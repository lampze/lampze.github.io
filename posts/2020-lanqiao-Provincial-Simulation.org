#+TITLE:       2020年蓝桥杯省模拟赛题解
#+DATE:        <2020-04-20 00:00>
#+FILETAGS:    蓝桥杯 算法 题解
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 2020年蓝桥杯省模拟赛题目解析

* 题解
** 第一题
*** 题目
在计算机存储中，12.5MB 是多少字节？
*** 解析
1MB=1024KB，1KB=1024B
*** 答案
13107200

** 第二题
*** 题目
由 1 对括号，可以组成一种合法括号序列：()。

由 2 对括号，可以组成两种合法括号序列：()()、(())。

由 4 对括号组成的合法括号序列一共有多少种？
*** 解析
- 直接查找卡特兰数
- 用栈模拟，左括号相当于入栈，右括号相当于出栈，这样将题目转换成了统计出入栈序列总数了。
*** 答案
14

** 第三题
*** 题目
将 LANQIAO 中的字母重新排列，可以得到不同的单词，LANQIAO、AAILNOQ 等，注意这 7 个字母都要被用上，单词不一定有具体的英文意义。请问，总共能排列如多少个不同的单词。
*** 解析
- 有两个字母相同，其余都是不同字母，所以可以用组合数求出： $\tbinom{7}{2}\tbinom{5}{1}\tbinom{4}{1}\tbinom{3}{1}\tbinom{2}{1}\tbinom{1}{1}$
- 头铁的可以写全排序，然后去掉重复的。
*** 答案
2520

** 第四题
*** 题目
一个包含有 2019 个结点的无向连通图，最少包含多少条边？
*** 解析
随便画一下两个三个结点的情况就明白了

*** 答案
2018

** 第五题
*** 题目
#+BEGIN_EXAMPLE
问题描述
　　给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。
　　请问在 1 至 n 中有多少个反倍数。
输入格式
　　输入的第一行包含一个整数 n。
　　第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。
输出格式
　　输出一行包含一个整数，表示答案。
样例输入
30
2 3 6
样例输出
10
样例说明
　　以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。
评测用例规模与约定
　　对于 40% 的评测用例，1 <= n <= 10000。
　　对于 80% 的评测用例，1 <= n <= 100000。
　　对于所有评测用例，1 <= n <= 1000000，1 <= a <= n，1 <= b <= n，1 <= c <= n。
#+END_EXAMPLE
*** 解析
直接枚举 1 至 n 所有数，然后统计就行了。
*** 答案
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

int main() {
	long n;
	cin >> n;
	long a, b, c;
	cin >> a >> b >> c;
	long cou = 0;
	for (long i = 1; i <= n; i++) {
		if (i % a && i % b && i % c)
			cou++;
	}
	cout << cou << endl;
	return 0;
}
#+END_SRC

** 第六题
*** 题目
#+BEGIN_EXAMPLE
问题描述
　　给定一个单词，请使用凯撒密码将这个单词加密。
　　凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移3位后被替换成密文。即a变为d，b变为e，...，w变为z，x变为a，y变为b，z变为c。
　　例如，lanqiao会变成odqtldr。
输入格式
　　输入一行，包含一个单词，单词中只包含小写英文字母。
输出格式
　　输出一行，表示加密后的密文。
样例输入
lanqiao
样例输出
odqtldr
评测用例规模与约定
　　对于所有评测用例，单词中的字母个数不超过100。
#+END_EXAMPLE
*** 解析
记录字符相对于 a 的偏移，然后加 3 并对 26 取余，这样就不会超过字符 z
*** 答案
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

char se(char c) {
	int p = c - 'a';
	p = (p + 3) % 26;
	return 'a' + p;
}

int main() {
	char c;
	while (cin >> c) {
		cout << se(c);
	}
	cout << endl;
	return 0;
}
#+END_SRC

** 第七题
*** 题目
#+BEGIN_EXAMPLE
问题描述
　　如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[2i]<a[2i-1], a[2i+1]>a[2i]。
　　小明想知道，长度为 m，每个数都是 1 到 n 之间的正整数的摆动序列一共有多少个。
输入格式
　　输入一行包含两个整数 m，n。
输出格式
　　输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。
样例输入
3 4
样例输出
14
样例说明
　　以下是符合要求的摆动序列：
2 1 2
2 1 3
2 1 4
3 1 2
3 1 3
3 1 4
3 2 3
3 2 4
4 1 2
4 1 3
4 1 4
4 2 3
4 2 4
4 3 4
评测用例规模与约定
　　对于 20% 的评测用例，1 <= n, m <= 5；
　　对于 50% 的评测用例，1 <= n, m <= 10；
　　对于 80% 的评测用例，1 <= n, m <= 100；
　　对于所有评测用例，1 <= n, m <= 1000。
#+END_EXAMPLE
*** 解析
最朴素的做法就是用 =dfs= 搜索，但 n m 的范围太大了，会超时。

所以我们就要用 dp 来做，首先确定公式的含义。

我们定义 =dp[i][j]= 表示第 i 项上放置比 j 大或小的数字的方案数，如何是偶数项就是比 j 小，奇数项就是比 j 大。

然后预处理初始条件，第一项的情况是固定的， =dp[1][j]= 肯定是 =n - j + 1= 因为比 j 大的数只有这么多。

接下来就是遍历每一行了。

奇数项的公式为 dp[i][j] = dp[i - 1][j - 1] + dp[i][j + 1] ，找到等于 j 的情况数和大于 j 的情况数然后加起来， =dp[i - 1][j - 1]= 表示前一项所有小于 =j - 1= 的情况数， =dp[i][j + 1]= 表示当前项所有大于 =j= 的情况数。

偶数项的公式为 dp[i][j] = dp[i-1][j+1] + dp[i][j-1] ，具体思路和上面一样，只不过方向换了。

最后注意遍历顺序就行了。
*** 答案
#+BEGIN_SRC c++
#include <iostream>
using namespace std;
int dp[1004][1004];
int main() {
    int m,n;
    cin>>m>>n;

    for(int i = 1; i <= n; i++)
        dp[1][i] = n - i + 1;

    for(int i = 2; i <= m; i++)
        if(i % 2)
            for(int j = n; j >= 1; j--)
                dp[i][j] = (dp[i-1][j-1] + dp[i][j+1]) % 10000;
        else
            for(int j = 1; j <= n; j++)
                dp[i][j] = (dp[i-1][j+1] + dp[i][j-1]) % 10000;

    cout << (m % 2 ? dp[m][1] : dp[m][n]) << endl;
    return 0;
}
#+END_SRC

** 第八题
*** 题目
#+BEGIN_EXAMPLE
问题描述
　　对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。
　　例如，一个 4 行 5 列的螺旋矩阵如下：
1 2 3 4 5
14 15 16 17 6
13 20 19 18 7
12 11 10 9 8
输入格式
　　输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。
　　第二行包含两个整数 r, c，表示要求的行号和列号。
输出格式
　　输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。
样例输入
4 5
2 2
样例输出
15
评测用例规模与约定
　　对于 30% 的评测用例，2 <= n, m <= 20。
　　对于 70% 的评测用例，2 <= n, m <= 100。
　　对于所有评测用例，2 <= n, m <= 1000，1 <= r <= n，1 <= c <= m。
#+END_EXAMPLE
*** 解析
最简单的方法就是把整个螺旋矩阵画出来，然后输出特定位置的数。
*** 答案
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

int main() {
	int n, m;
	cin >> n >> m;
	int r, c;
	cin >> r >> c;
	int all[n][m], tot = 1, x = 0, y = 0;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			all[i][j] = 0;
	all[0][0] = 1;
	while (tot != n * m) {
		while (y + 1 < m && !all[x][y + 1])
			all[x][++y] = ++tot;
		while (x + 1 < n && !all[x + 1][y])
			all[++x][y] = ++tot;
		while (y - 1 >= 0 && !all[x][y - 1])
			all[x][--y] = ++tot;
		while (x - 1 >= 0 && !all[x - 1][y])
			all[--x][y] = ++tot;
	}
	cout << all[r - 1][c - 1] << endl;
	return 0;
}
#+END_SRC
** 第九题
*** 题目
#+BEGIN_EXAMPLE
问题描述
　　2015年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。
　　这一次，小明要帮助 n 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。
　　现在，这 n 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。
　　小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为 (x_1, y_1) 高度为 h_1 的村庄与坐标为 (x_2, y_2) 高度为 h_2 的村庄之间连接的费用为
　　sqrt((x_1-x_2)*(x_1-x_2)+(y_1-y_2)*(y_1-y_2))+(h_1-h_2)*(h_1-h_2)。
　　在上式中 sqrt 表示取括号内的平方根。请注意括号的位置，高度的计算方式与横纵坐标的计算方式不同。
　　由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 n 个村庄都通电。
输入格式
　　输入的第一行包含一个整数 n ，表示村庄的数量。
　　接下来 n 行，每个三个整数 x, y, h，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。
输出格式
　　输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。
样例输入
4
1 1 3
9 9 7
8 8 6
4 5 4
样例输出
17.41
评测用例规模与约定
　　对于 30% 的评测用例，1 <= n <= 10；
　　对于 60% 的评测用例，1 <= n <= 100；
　　对于所有评测用例，1 <= n <= 1000，0 <= x, y, h <= 10000。
#+END_EXAMPLE
*** 解析
可以抽象成有 n 个全相连结点的图，边是拉电线的费用，然后找最小生成树就好了。
*** 答案
#+BEGIN_SRC c++
#include <iostream>
#include <queue>
#include <cmath>
#include <cstdio>

using namespace std;

struct poi {
	int x, y, h;
};

struct roa {
	int to;
	float len;
	bool operator<(const roa& a) const {
		return len > a.len;
	}
};

float calc(poi a, poi b) {
	int x = a.x - b.x, y = a.y - b.y,h = a.h - b.h;
	return sqrt(x * x + y * y) + h * h;
}

int check[1001];

int main() {
	int n;
	cin >> n;
	poi all[n];
	for (int i = 0; i < n; i++)
		cin >> all[i].x >> all[i].y >> all[i].h;

	//for (int i = 0; i < n; i++) {
	//	for (int j = 0; j < n; j++)
	//		cout << calc(all[i], all[j]) << " ";
	//	cout << endl;
	//}

	priority_queue<roa> q;
	for (int i = 1; i < n; i++) {
		roa *a = new roa;
		a->to = i;
		a->len = calc(all[i], all[0]);
		q.push(*a);
	}
	int cou = 1;
	float sum = 0;
	check[0] = true;
	while (!q.empty() && cou < n) {
		roa a = q.top();
		q.pop();
		if (check[a.to])
			continue;
		sum += a.len;
		cou++;
		check[a.to] = true;
		for (int i = 0; i < n; i++)
			if (!check[i]) {
				roa *nex = new roa;
				nex->to = i;
				nex->len = calc(all[i], all[a.to]);
				q.push(*nex);
			}
	}
	printf("%.2f\n",round(sum * 100) / 100);
	return 0;
}
#+END_SRC
** 第十题
*** 题目
#+BEGIN_EXAMPLE
问题描述
　　小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。
　　小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。
　　然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。
　　他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。
　　小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。
输入格式
　　输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。
　　接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。
输出格式
　　输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。
样例输入
6
1 1 2
1 4 2
1 7 2
4 1 2
4 4 2
4 7 2
样例输出
12
评测用例规模与约定
　　对于 30% 的评测用例，1 <= n <= 10；
　　对于 60% 的评测用例，1 <= n <= 20；
　　对于所有评测用例，1 <= n <= 30，0 <= x, y <= 1000，1 <= r <= 1000。
#+END_EXAMPLE
*** 解析
只想出了 =dfs= 搜索的方法，最高有 30 层，每层最多有两个分支，所以最高会有 =2^30= 次操作，但大部分都会被剪掉，不知道能不能过全部用例。

简单来说就是每次有两种操作，种或者不种，不种是每次都可以选的，种的话就要和之前种下的树检测一下有没有冲突，记录好树的状态并写好回溯就行了。
*** 答案
#+BEGIN_SRC c++
#include <iostream>

using namespace std;

int n;

struct tree {
	int x, y, r;
};

long long m = 0;

tree all[31];
bool check[31];

bool ch(tree a, tree b) {
	int r = a.r + b.r, x = a.x - b.x, y = a.y - b.y;
	return r * r > x * x + y * y;
}

void dfs(int now, long long sum) {
	if (now >= n) {
		if (sum > m)
			m = sum;
		return;
	}
	dfs(now + 1, sum);
	for (int i = 0; i < n; i++)
		if (check[i])
			if (ch(all[i], all[now]))
				return;
	check[now] = true;
	dfs(now + 1, sum + all[now].r * all[now].r);
	check[now] = false;
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> all[i].x >> all[i].y >> all[i].r;
	dfs(0, 0);
	cout << m << endl;
	return 0;
}
#+END_SRC
