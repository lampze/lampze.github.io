#+TITLE:       算法基础-模拟与搜索
#+DATE:        <2021-01-15 00:00>
#+FILETAGS:    algorithm
#+OPTIONS:     H:3 num:nil toc:nil \n:t ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 模拟与搜索的算法讲解
* 前言
模拟既直接根据题意做题，搜索既在可能的解里寻找正确答案

下面我就根据几道题目来具体的讲解它们的解题思路
* 扫雷游戏
https://www.luogu.com.cn/problem/P2670
** 思路
题目要求输出每个格子周围的地雷数，那么根据模拟思维，直接统计每个格子周围的地雷数并输出即可
** 代码
#+begin_src C++ :cmdline < demo.in
#include <iostream>

using namespace std;

bool checkb(int x, int y, int n, int m) {
  if (x < 0 || y < 0 || x >= n || y >= m)
    return false;
  return true;
}

int main() {
  int n, m;
  cin >> n >> m;
  char all[n][m];
  // 输入
  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++)
      cin >> all[i][j];

  // 遍历每个格子
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++)
      // 如果不是雷就统计周围地雷数
      if (all[i][j] == '?') {
        int count = 0;
        // 遍历周围八个格子
        for (int x = -1; x <= 1; x++)
          for (int y = -1; y <= 1; y++)
            // 防止越界
            if (checkb(i + x, j + y, n, m) && all[i + x][j + y] == '*')
              count++;
        cout << count;
      } else
        cout << "*";
    cout << endl;
  }
  return 0;
}
#+end_src

#+RESULTS:
| *10 |
| 221 |
| 1*1 |

* 字符串的展开
https://www.luogu.com.cn/problem/P1098
** 思路
这是一道复杂的模拟题目，题目已经把我们要做的操作都描述出来了，我们要学会如何分解这些复杂的操作，因为这么复杂的逻辑很容易写错，而把逻辑分解成一个个模块后再调试显然是更加方便快捷的。
** 代码
#+begin_src C++ :cmdline < demo.in
#include <algorithm>
#include <iostream>
#include <string>

using namespace std;

int p1, p2, p3;

bool isnum(char c) { return c >= '0' && c <= '9'; }

char tobig(char c) {
  if (c >= 'a' && c <= 'z')
    return c - 'a' + 'A';
  return c;
}

char tosmall(char c) {
  if (c >= 'A' && c <= 'Z')
    return c + 'a' - 'A';
  return c;
}

// 因为有各种参数，所以使用这个函数获取真实字符
char realchar(char c) {
  if (p1 == 3)
    return '*';
  if (isnum(c))
    return c;
  if (p1 == 2)
    return tobig(c);
  if (p1 == 1)
    return tosmall(c);
  return c;
}

// 返回不包括a，b的扩展字符串
string re(char a, char b) {
  // 中间没有可扩展的字符返回空
  if (b - a == 1)
    return "";
  // a大于b，不能扩展
  if (a >= b)
    return "-";
  // 两个字符类型不同
  if (isnum(a) != isnum(b))
    return "-";
  // 都是-肯定不行
  if (a == '-' || b == '-')
    return "-";
  string out = "";
  char c = a + 1;
  for (char c = a + 1; c < b; c++)
    for (int i = 0; i < p2; i++)
      out += realchar(c);
  if (p3 == 2)
    reverse(out.begin(), out.end());
  return out;
}

int main() {
  string s;
  cin >> p1 >> p2 >> p3 >> s;
  for (long long i = 0; i < s.size(); i++)
    // 第一个字符可能是-
    if (i && s[i] == '-')
      // 使用re获取扩展的字符串
      cout << re(s[i - 1], s[i + 1]);
    else
      cout << s[i];
  return 0;
}
#+end_src

#+RESULTS:
: abcsttuuvvw1234556677889s-4zz

* 选数
https://www.luogu.com.cn/problem/P1036
** 思路
首先题目提到了素数，那么第一步就是先把素数都筛出来，方便后续操作

然后我们需要需要在 $n$ 个整数里选出 $k$ 个整数相加，很显然这是一个排列问题，那么我们可以使用 =stl= 自带的 =next_permutation= 对 $n$ 个整数进行全排列，然后截取前 $k$ 个整数，当然还需要去重。
或者我们自己使用搜索的思维来写，题目的解空间是所有的排列，每个数字有两种状态，选或不选，选中的数字有个数要求，因为必须要把所有情况过一遍，所以使用 =dfs= 即可。
** 代码
#+begin_src C++ :cmdline < demo.in
#include <algorithm>
#include <iostream>

using namespace std;

long all[21], cou = 0;
int n, k;

bool prime[5000001];

// 三个参数为别为当前位置，选中的数字，当前的和
void dfs(int now, int sel, int sum) {
  // 如果剩下的数不够选就退出
  if (n - now < k - sel)
    return;
  // 选够了数
  if (sel == k) {
    if (!prime[sum])
      cou++;
    return;
  }
  // 遍历每种可能
  for (int i = now; i < n; i++)
    dfs(i + 1, sel + 1, sum + all[i]);
}

int main() {
  for (long i = 2; i < 5000001; i++)
    if (!prime[i])
      for (long j = i * 2; j < 5000001; j += i)
        prime[j] = true;
  prime[0] = prime[1] = true;

  cin >> n >> k;
  for (int i = 0; i < n; i++)
    cin >> all[i];

  dfs(0, 0, 0);

  cout << cou << endl;
  return 0;
}
#+end_src

#+RESULTS:
: 1

* 自然数的拆分问题
https://www.luogu.com.cn/problem/P2404
** 思路
这题就不使用全排列了，只能老老实实的自己写搜索了，因为必须要把所有情况过一遍，所以使用 =dfs= 比较方便，状态只需要保存已分拆分的数字个数与剩余数字就行了。
** 代码
#+begin_src C++ :cmdline < demo.in
#include <iostream>

using namespace std;

int n, all[10];

// 已拆出的数字个数，剩余的数字
void dfs(int now, int last) {
  // 没有剩余的数字了就结束
  if (last == 0) {
    // 1表示还是原来的数字，肯定不能算
    if (now == 1)
      return;
    // 输出拆分的数字
    for (int i = 0; i < now; i++)
      if (i)
        cout << "+" << all[i];
      else
        cout << all[i];
    cout << endl;
    return;
  }
  // 遍历每个可能拆分的数字
  for (int i = 1; i <= last; i++)
    // 因为需要从小到大排序
    // 所以只需要保持比上一个数字大即可
    // 第一个数字当然不用比较了
    if (!now || i >= all[now - 1]) {
      all[now] = i;
      dfs(now + 1, last - i);
    }
}

int main() {
  cin >> n;
  dfs(0, n);
  return 0;
}
#+end_src

#+RESULTS:
| 1+1+1+1+1+1+1 |
|   1+1+1+1+1+2 |
|     1+1+1+1+3 |
|     1+1+1+2+2 |
|       1+1+1+4 |
|       1+1+2+3 |
|         1+1+5 |
|       1+2+2+2 |
|         1+2+4 |
|         1+3+3 |
|           1+6 |
|         2+2+3 |
|           2+5 |
|           3+4 |

* 马的遍历
https://www.luogu.com.cn/problem/P1443
** 思路
题目叫我们计算到达一个点需要多少步，那我们就模拟一只马走路即可，但一只马一步可能走好多个地方，使用循环是不能做出来的，我们必须把马的状态保存起来，每走一次更新一下。
使用队列保存马每一步的坐标与步数，每次取出一个步数最小的状态，把下一步可能的状态计算出并加入到队列就行了。
** 代码
#+begin_src C++ :cmdline < demo.in
#include <cstdio>
#include <iostream>
#include <map>
#include <queue>

using namespace std;

// 使用结构体保存马的状态
struct Horse {
  int x;
  int y;
  int time;
  Horse(int a, int b, int c) {
    x = a;
    y = b;
    time = c;
  }
};

// 记录马下一步可以走的方向
int nex[8][2] = {2, 1, -2, 1, -2, -1, 2, -1, 1, 2, 1, -2, -1, -2, -1, 2};

int main() {
  int n, m, x, y;
  cin >> n >> m >> x >> y;
  int board[n + 1][m + 1];
  bool iswalk[n + 1][m + 1];

  // 先全放上-1，到达不了的点自然就是-1了
  for (int i = 0; i <= n; i++)
    for (int j = 0; j <= m; j++)
      board[i][j] = -1, iswalk[i][j] = false;

  // 放入初始条件
  queue<Horse> q;
  q.push(Horse(x, y, 0));
  iswalk[x][y] = true;

  // 循环到队列为空
  while (!q.empty()) {
    // 取出队首元素
    Horse in = q.front();
    q.pop();
    // 更新当前最小步数
    board[in.x][in.y] = in.time;

    for (int i = 0; i < 8; i++) {
      int nx = in.x + nex[i][0], ny = in.y + nex[i][1];
      // 超出边界或者已经走过就看下一种情况
      if (nx < 1 || ny < 1 || nx > n || ny > m || iswalk[nx][ny])
        continue;
      q.push(Horse(nx, ny, in.time + 1));
      iswalk[nx][ny] = true;
    }
  }

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++)
      printf("%-5d", board[i][j]);
    printf("\n");
  }
  return 0;
}
#+end_src

#+RESULTS:
| 0 |  3 | 2 |
| 3 | -1 | 1 |
| 2 |  1 | 4 |

* 奇怪的电梯
https://www.luogu.com.cn/problem/P1135
** 思路
根据题意，一个楼层最多只能跳转到另外两个楼层，一个节点表示一个楼层，画成图就是一个节点连接着两个节点，可以自己尝试的在纸上画一下。

那么题目的意思就是在这一张图上找到起点到终点的最短距离，使用 =bfs= 即可。
** 代码
#+begin_src C++ :cmdline > demo.in
#include <iostream>
#include <queue>
#include <set>

using namespace std;

set<int> all;
// a到b的最少次数
int count = -1;

int main() {
  int n, a, b;
  cin >> n >> a >> b;
  int k[n + 1];
  for (int i = 1; i <= n; i++)
    cin >> k[i];
  queue<int> q;
  q.push(a);

  // 当前按下按钮的次数
  int c = 0;
  // 循环到队列为空
  while (!q.empty()) {
    queue<int> p;
    // 到终点了没
    int flag = 0;
    // 两个队列精确控制按下按钮的次数
    // 不使用结构体就只能这样了
    while (!q.empty()) {
      int now = q.front();
      q.pop();
      // 如果到达终点就更新数据
      if (now == b) {
        count = c;
        flag = 1;
        break;
      }
      // 经过的楼层就不要再经过了
      all.insert(now);
      // 只有两种状态，使用for太累了
      int next = now + k[now];
      if (next > 0 && next <= n && !all.count(next))
        p.push(next);
      // 所以直接复制上面的再改一下就行了
      next = now - k[now];
      if (next > 0 && next <= n && !all.count(next))
        p.push(next);
      // 当然这样非常不好看
    }
    // 到终点就结束
    if (flag)
      break;
    // 更新队列与按钮的次数
    q = p;
    c++;
  }
  cout << count << endl;
  return 0;
}
#+end_src
