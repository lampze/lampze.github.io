<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[lampze's Blog]]></title>
<description><![CDATA[lampze's Blog]]></description>
<link>https://lampze.github.io/</link>
<lastBuildDate>Thu, 19 Aug 2021 14:05:15 +0800</lastBuildDate>
<item>
  <title><![CDATA[2021年蓝桥杯模拟赛题解]]></title>
  <description><![CDATA[
<div id="outline-container-org7605086" class="outline-2">
<h2 id="org7605086">第一题</h2>
<div class="outline-text-2" id="text-org7605086">
</div>
<div id="outline-container-org4fee903" class="outline-3">
<h3 id="org4fee903">题目</h3>
<div class="outline-text-3" id="text-org4fee903">
<p>
问题描述<br>
    请问在 1 到 2020 中，有多少个数既是 4 的整数倍，又是 6 的整数倍。<br>
答案提交<br>
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br>
</p>
</div>
</div>
<div id="outline-container-org15fede1" class="outline-3">
<h3 id="org15fede1">解析</h3>
<div class="outline-text-3" id="text-org15fede1">
<p>
直接枚举数字然后判断计数即可<br>
</p>
</div>
</div>
<div id="outline-container-org0e7b951" class="outline-3">
<h3 id="org0e7b951">代码</h3>
<div class="outline-text-3" id="text-org0e7b951">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">count</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= <span style="color: #8a3b3c; font-weight: bold;">2020</span>; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>i % <span style="color: #8a3b3c; font-weight: bold;">4</span> == <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; i % <span style="color: #8a3b3c; font-weight: bold;">6</span> == <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>
      count++;
  cout &lt;&lt; count &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
<p>
答案: <code>168</code><br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgf3ac536" class="outline-2">
<h2 id="orgf3ac536">第二题</h2>
<div class="outline-text-2" id="text-orgf3ac536">
</div>
<div id="outline-container-org5419810" class="outline-3">
<h3 id="org5419810">题目</h3>
<div class="outline-text-3" id="text-org5419810">
<p>
问题描述<br>
　　小明要用二进制来表示 1 到 10000 的所有整数，要求不同的整数用不同的二进制数表示，请问，为了表示 1 到 10000 的所有整数，至少需要多少个二进制位？<br>
答案提交<br>
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br>
</p>
</div>
</div>
<div id="outline-container-org44343b8" class="outline-3">
<h3 id="org44343b8">解析</h3>
<div class="outline-text-3" id="text-org44343b8">
<p>
可以看每种二进制位最高可以表示多大的数，然后选出最小的即可<br>
</p>
</div>
</div>
<div id="outline-container-orgfa3c59d" class="outline-3">
<h3 id="orgfa3c59d">代码</h3>
<div class="outline-text-3" id="text-orgfa3c59d">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #383a42;">n</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; n - <span style="color: #8a3b3c; font-weight: bold;">1</span> &lt; <span style="color: #8a3b3c; font-weight: bold;">10000</span>; n = n &lt;&lt; <span style="color: #8a3b3c; font-weight: bold;">1</span>, i++<span style="color: #a626a4;">)</span>
    cout &lt;&lt; i &lt;&lt; <span style="color: #8a3b3c;">":"</span> &lt;&lt; n-<span style="color: #8a3b3c; font-weight: bold;">1</span> &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
答案： <code>14</code><br>
</p>
</div>
</div>
</div>
<div id="outline-container-org65d7d0d" class="outline-2">
<h2 id="org65d7d0d">第三题</h2>
<div class="outline-text-2" id="text-org65d7d0d">
</div>
<div id="outline-container-org720a207" class="outline-3">
<h3 id="org720a207">题目</h3>
<div class="outline-text-3" id="text-org720a207">
<p>
问题描述<br>
　　请问有多少个序列满足下面的条件：<br>
</p>
<ol class="org-ol">
<li>序列的长度为 5。<br></li>
<li>序列中的每个数都是 1 到 10 之间的整数。<br></li>
<li>序列中后面的数大于等于前面的数。<br></li>
</ol>
</div>
</div>
<div id="outline-container-org227a449" class="outline-3">
<h3 id="org227a449">解析</h3>
<div class="outline-text-3" id="text-org227a449">
<p>
直接使用 <code>dfs</code> 搜索即可<br>
</p>

<p>
或者写5个循环也行<br>
</p>
</div>
</div>
<div id="outline-container-orgaebb425" class="outline-3">
<h3 id="orgaebb425">代码</h3>
<div class="outline-text-3" id="text-orgaebb425">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="color: #383a42;">all</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">5</span><span style="color: #014980;">]</span>;
<span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">count</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;

<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">dfs</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">now</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>now == <span style="color: #8a3b3c; font-weight: bold;">5</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    count++;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">for (int i = 0; i &lt; 5; i++)</span>
    <span style="color: #556b2f;">//   </span><span style="color: #556b2f;">cout &lt;&lt; all[i] &lt;&lt; " ";</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">cout &lt;&lt; endl;</span>
    <span style="font-weight: bold;">return</span>;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= <span style="color: #8a3b3c; font-weight: bold;">10</span>; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>now == <span style="color: #8a3b3c; font-weight: bold;">0</span> || i &gt;= all<span style="color: #556b2f;">[</span>now - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
      all<span style="color: #556b2f;">[</span>now<span style="color: #556b2f;">]</span> = i;
      dfs<span style="color: #556b2f;">(</span>now + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">)</span>;
    <span style="color: #a626a4;">}</span>
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  dfs<span style="color: #a626a4;">(</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>;
  cout &lt;&lt; count &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">count</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; a &lt;= <span style="color: #8a3b3c; font-weight: bold;">10</span>; a++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span> = a; b &lt;= <span style="color: #8a3b3c; font-weight: bold;">10</span>; b++<span style="color: #a626a4;">)</span>
      <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">c</span> = b; c &lt;= <span style="color: #8a3b3c; font-weight: bold;">10</span>; c++<span style="color: #a626a4;">)</span>
        <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">d</span> = c; d &lt;= <span style="color: #8a3b3c; font-weight: bold;">10</span>; d++<span style="color: #a626a4;">)</span>
          <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">e</span> = d; e &lt;= <span style="color: #8a3b3c; font-weight: bold;">10</span>; e++<span style="color: #a626a4;">)</span>
            count++;
  cout &lt;&lt; count &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
答案： <code>2002</code><br>
</p>
</div>
</div>
</div>

<div id="outline-container-org83217c8" class="outline-2">
<h2 id="org83217c8">第四题</h2>
<div class="outline-text-2" id="text-org83217c8">
</div>
<div id="outline-container-org7a79a0d" class="outline-3">
<h3 id="org7a79a0d">题目</h3>
<div class="outline-text-3" id="text-org7a79a0d">
<p>
问题描述<br>
　　一个无向图包含 2020 条边，如果图中没有自环和重边，请问最少包含多少个结点？<br>
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br>
</p>
</div>
</div>
<div id="outline-container-org56d4672" class="outline-3">
<h3 id="org56d4672">解析</h3>
<div class="outline-text-3" id="text-org56d4672">
<p>
假设有结点的个数为 \(n\) 的图，已知边的个数最多为 \(\frac{n \times (n-1)}{2}\) ，可以列出等式 \(\frac{n \times (n-1)}{2} = 2020\) 可得 \(n = 64.0629609128\) 然后取整加一即可<br>
</p>
</div>
</div>
<div id="outline-container-org828902e" class="outline-3">
<h3 id="org828902e">答案</h3>
<div class="outline-text-3" id="text-org828902e">
<p>
<code>65</code><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgcb78929" class="outline-2">
<h2 id="orgcb78929">第五题</h2>
<div class="outline-text-2" id="text-orgcb78929">
</div>
<div id="outline-container-org45fc8e8" class="outline-3">
<h3 id="org45fc8e8">题目</h3>
<div class="outline-text-3" id="text-org45fc8e8">
<p>
问题描述<br>
　　两个字母之间的距离定义为它们在字母表中位置的距离。例如 A 和 C 的距离为 2，L 和 Q 的距离为 5。<br>
　　对于一个字符串，我们称字符串中两两字符之间的距离之和为字符串的内部距离。<br>
　　例如：ZOO 的内部距离为 22，其中 Z 和 O 的距离为 11。<br>
　　请问，LANQIAO 的内部距离是多少？<br>
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br>
</p>
</div>
</div>
<div id="outline-container-orga6fb367" class="outline-3">
<h3 id="orga6fb367">解析</h3>
<div class="outline-text-3" id="text-orga6fb367">
<p>
枚举 <code>LANQIAO</code> 字符串所有两个字符的组合，计算距离然后相加即可<br>
</p>
</div>
</div>
<div id="outline-container-orgf9a8e81" class="outline-3">
<h3 id="orgf9a8e81">代码</h3>
<div class="outline-text-3" id="text-orgf9a8e81">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">f</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">char</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>b &gt; a<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> f<span style="color: #a626a4;">(</span>b, a<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> a - b;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">string</span> <span style="color: #383a42;">s</span> = <span style="color: #8a3b3c;">"LANQIAO"</span>;
  <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">sum</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; s.size<span style="color: #556b2f;">()</span>; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = i; j &lt; s.size<span style="color: #556b2f;">()</span>; j++<span style="color: #a626a4;">)</span>
      sum += f<span style="color: #a626a4;">(</span>s<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span>, s<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>;
  cout &lt;&lt; sum &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
答案： <code>162</code><br>
</p>
</div>
</div>
</div>
<div id="outline-container-org85f5c53" class="outline-2">
<h2 id="org85f5c53">第六题</h2>
<div class="outline-text-2" id="text-org85f5c53">
</div>
<div id="outline-container-orgec5dd22" class="outline-3">
<h3 id="orgec5dd22">题目</h3>
<div class="outline-text-3" id="text-orgec5dd22">
<p>
问题描述<br>
　　给定一个平行四边形的底边长度 l 和高度 h，求平行四边形的面积。<br>
输入格式<br>
　　输入的第一行包含一个整数 l，表示平行四边形的底边长度。<br>
　　第二行包含一个整数 h，表示平行四边形的高。<br>
输出格式<br>
　　输出一个整数，表示平行四边形的面积。（提示：底边长度和高都是整数的平行四边形面积为整数）<br>
样例输入<br>
</p>
<pre class="example" id="org392c378">
2
7
</pre>

<p>
样例输出<br>
</p>
<pre class="example" id="org8e04ebc">
14
</pre>

<p>
数据规模和约定：对于所有评测用例，1 &lt;= l, h &lt;= 100。<br>
</p>
</div>
</div>
<div id="outline-container-orgbab3519" class="outline-3">
<h3 id="orgbab3519">解析</h3>
<div class="outline-text-3" id="text-orgbab3519">
<p>
直接计算输出，没什么好说的<br>
</p>
</div>
</div>
<div id="outline-container-orgca0b268" class="outline-3">
<h3 id="orgca0b268">代码</h3>
<div class="outline-text-3" id="text-orgca0b268">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">l</span>,<span style="color: #383a42;">h</span>;
  cin &gt;&gt; l &gt;&gt; h;
  cout &lt;&lt; l * h &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgf3e16ab" class="outline-2">
<h2 id="orgf3e16ab">第七题</h2>
<div class="outline-text-2" id="text-orgf3e16ab">
</div>
<div id="outline-container-org2fd74e2" class="outline-3">
<h3 id="org2fd74e2">题目</h3>
<div class="outline-text-3" id="text-org2fd74e2">
<p>
问题描述<br>
　　现在时间是 a 点 b 分，请问 t 分钟后，是几点几分？<br>
输入格式<br>
　　输入的第一行包含一个整数 a。<br>
　　第二行包含一个整数 b。<br>
　　第三行包含一个整数 t。<br>
输出格式<br>
　　输出第一行包含一个整数，表示结果是几点。<br>
　　第二行包含一个整数，表示结果是几分。<br>
样例输入<br>
</p>

<pre class="example" id="orgcee3d15">
3
20
165
</pre>

<p>
样例输出<br>
</p>

<pre class="example" id="org818c927">
6
5
</pre>

<p>
样例输入<br>
</p>

<pre class="example" id="orgc9da871">
3
20
175
</pre>

<p>
样例输出<br>
</p>

<pre class="example" id="org83b35b2">
6
15
</pre>

<p>
数据规模和约定：对于所有评测用例，0 &lt;= a &lt;= 23, 0 &lt;= b &lt;= 59, 0 &lt;= t, t 分钟后还是在当天。<br>
</p>
</div>
</div>
<div id="outline-container-org5619ebd" class="outline-3">
<h3 id="org5619ebd">解析</h3>
<div class="outline-text-3" id="text-org5619ebd">
<p>
直接把 <code>t</code> 加入到 <code>b</code> 中，然后把超出的时间补到小时上，并把分钟修整到60分钟内即可。<br>
</p>
</div>
</div>
<div id="outline-container-orgd3d5e3a" class="outline-3">
<h3 id="orgd3d5e3a">代码</h3>
<div class="outline-text-3" id="text-orgd3d5e3a">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="color: #383a42;">b</span>, <span style="color: #383a42;">t</span>;
  cin &gt;&gt; a &gt;&gt; b &gt;&gt; t;
  b += t;
  a += b / <span style="color: #8a3b3c; font-weight: bold;">60</span>;
  b %= <span style="color: #8a3b3c; font-weight: bold;">60</span>;
  cout &lt;&lt; a &lt;&lt; endl &lt;&lt; b &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orge7c9101" class="outline-2">
<h2 id="orge7c9101">第八题</h2>
<div class="outline-text-2" id="text-orge7c9101">
</div>
<div id="outline-container-org4e5d781" class="outline-3">
<h3 id="org4e5d781">题目</h3>
<div class="outline-text-3" id="text-org4e5d781">
<p>
问题描述<br>
　　小蓝负责花园的灌溉工作。<br>
　　花园可以看成一个 n 行 m 列的方格图形。中间有一部分位置上安装有出水管。<br>
　　小蓝可以控制一个按钮同时打开所有的出水管，打开时，有出水管的位置可以被认为已经灌溉好。<br>
　　每经过一分钟，水就会向四面扩展一个方格，被扩展到的方格可以被认为已经灌溉好。即如果前一分钟某一个方格被灌溉好，则下一分钟它上下左右的四个方格也被灌溉好。<br>
　　给定花园水管的位置，请问 k 分钟后，有多少个方格被灌溉好？<br>
输入格式<br>
　　输入的第一行包含两个整数 n, m。<br>
　　第二行包含一个整数 t，表示出水管的数量。<br>
　　接下来 t 行描述出水管的位置，其中第 i 行包含两个数 r, c 表示第 r 行第 c 列有一个排水管。<br>
　　接下来一行包含一个整数 k。<br>
输出格式<br>
　　输出一个整数，表示答案。<br>
样例输入<br>
</p>

<pre class="example" id="orgd5f96f9">
3 6
2
2 2
3 4
1
</pre>

<p>
样例输出<br>
</p>

<pre class="example" id="org238eb0b">
9
</pre>

<p>
样例说明<br>
　　用1表示灌溉到，0表示未灌溉到。<br>
　　打开水管时：<br>
　　000000<br>
　　010000<br>
　　000100<br>
　　1分钟后：<br>
　　010000<br>
　　111100<br>
　　011110<br>
　　共有9个方格被灌溉好。<br>
数据规模和约定<br>
　　对于所有评测用例，1 &lt;= n, m &lt;= 100, 1 &lt;= t &lt;= 10, 1 &lt;= k &lt;= 100。<br>
</p>
</div>
</div>
<div id="outline-container-org1d90f09" class="outline-3">
<h3 id="org1d90f09">解析</h3>
<div class="outline-text-3" id="text-org1d90f09">
<p>
使用 <code>bfs</code> ，更新每个结点直到时间结束，每次把新灌溉的结点加入到队列即可。<br>
</p>
</div>
</div>
<div id="outline-container-org355243b" class="outline-3">
<h3 id="org355243b">代码</h3>
<div class="outline-text-3" id="text-org355243b">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">queue</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20445;&#23384;&#29366;&#24577;</span>
<span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">point</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span>, <span style="color: #383a42;">y</span>, <span style="color: #383a42;">time</span>;
  <span style="font-weight: bold;">point</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">_x</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">_y</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">_time</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    x = _x;
    y = _y;
    time = _time;
  <span style="color: #a626a4;">}</span>
<span style="color: #014980;">}</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">all&#26159;&#20840;&#37096;&#30340;&#33457;&#22253;</span>
<span style="font-weight: bold;">bool</span> <span style="color: #383a42;">all</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">105</span><span style="color: #014980;">][</span><span style="color: #8a3b3c; font-weight: bold;">105</span><span style="color: #014980;">]</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#19979;&#19968;&#27493;&#30340;&#25968;&#32452;</span>
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">nex</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">4</span><span style="color: #014980;">][</span><span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #014980;">]</span> = <span style="color: #014980;">{</span>-<span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span>, -<span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #014980;">}</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">m</span>, <span style="color: #383a42;">t</span>;
  cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;
  <span style="font-weight: bold;">queue</span><span style="color: #a626a4;">&lt;</span><span style="font-weight: bold;">point</span><span style="color: #a626a4;">&gt;</span> <span style="color: #383a42;">q</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22788;&#29702;&#27700;&#31649;&#65292;&#26631;&#35760;&#22909;&#33457;&#22253;&#65292;&#24182;&#21152;&#20837;&#21040;&#38431;&#21015;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; t; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">int</span> <span style="color: #383a42;">r</span>, <span style="color: #383a42;">c</span>;
    cin &gt;&gt; r &gt;&gt; c;
    q.push<span style="color: #556b2f;">(</span>point<span style="color: #b751b6;">(</span>r, c, <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #b751b6;">)</span><span style="color: #556b2f;">)</span>;
    all<span style="color: #556b2f;">[</span>r<span style="color: #556b2f;">][</span>c<span style="color: #556b2f;">]</span> = <span style="color: #383a42;">true</span>;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">k</span>, <span style="color: #383a42;">count</span>;
  cin &gt;&gt; k;
  count = t;
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span><span style="color: #383a42; font-weight: bold;">!</span>q.empty<span style="color: #556b2f;">()</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">point</span> <span style="color: #383a42;">a</span> = q.front<span style="color: #556b2f;">()</span>;
    q.pop<span style="color: #556b2f;">()</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22914;&#26524;&#26102;&#38388;&#21040;&#20102;&#23601;&#19981;&#36827;&#34892;&#19979;&#19968;&#27493;&#20102;</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>a.time == k<span style="color: #556b2f;">)</span>
      <span style="font-weight: bold;">continue</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#22235;&#21608;</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">4</span>; i++<span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
      <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span> = a.x + nex<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">][</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #b751b6;">]</span>, <span style="color: #383a42;">y</span> = a.y + nex<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">][</span><span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #b751b6;">]</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22914;&#26524;&#36825;&#20010;&#26684;&#23376;&#27809;&#26377;&#27700;&#65292;&#23601;&#21152;&#20837;&#38431;&#21015;&#24182;&#26631;&#35760;</span>
      <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>x &gt; <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; y &gt; <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= m &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all<span style="color: #014980;">[</span>x<span style="color: #014980;">][</span>y<span style="color: #014980;">]</span><span style="color: #b751b6;">)</span> <span style="color: #b751b6;">{</span>
        all<span style="color: #014980;">[</span>x<span style="color: #014980;">][</span>y<span style="color: #014980;">]</span> = <span style="color: #383a42;">true</span>;
        q.push<span style="color: #014980;">(</span>point<span style="color: #a626a4;">(</span>x, y, a.time + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">)</span><span style="color: #014980;">)</span>;
        count++;
      <span style="color: #b751b6;">}</span>
    <span style="color: #556b2f;">}</span>
  <span style="color: #a626a4;">}</span>
  cout &lt;&lt; count &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org3c6ece0" class="outline-2">
<h2 id="org3c6ece0">第九题</h2>
<div class="outline-text-2" id="text-org3c6ece0">
</div>
<div id="outline-container-org181e76f" class="outline-3">
<h3 id="org181e76f">题目</h3>
<div class="outline-text-3" id="text-org181e76f">
<p>
问题描述<br>
　　小蓝有一张黑白图像，由 n * m 个像素组成，其中从上到下共 n 行，每行从左到右 m 列。每个像素由一个 0 到 255 之间的灰度值表示。<br>
　　现在，小蓝准备对图像进行模糊操作，操作的方法为：<br>
　　对于每个像素，将以它为中心 3 * 3 区域内的所有像素（可能是 9 个像素或少于 9 个像素）求和后除以这个范围内的像素个数（取下整），得到的值就是模糊后的结果。<br>
　　请注意每个像素都要用原图中的灰度值计算求和。<br>
输入格式<br>
　　输入的第一行包含两个整数 n, m。<br>
　　第 2 行到第 n + 1 行每行包含 m 个整数，表示每个像素的灰度值，相邻整数之间用一个空格分隔。<br>
输出格式<br>
　　输出 n 行，每行 m 个整数，相邻整数之间用空格分隔，表示模糊后的图像。<br>
样例输入<br>
</p>

<pre class="example" id="orgbe681cc">
3 4
0 0 0 255
0 0 255 0
0 30 255 255
</pre>

<p>
样例输出<br>
</p>

<pre class="example" id="org8213522">
0 42 85 127
5 60 116 170
7 90 132 191
</pre>

<p>
数据规模和约定<br>
　　对于所有评测用例，1 &lt;= n, m &lt;= 100。<br>
</p>
</div>
</div>
<div id="outline-container-orge76056f" class="outline-3">
<h3 id="orge76056f">解析</h3>
<div class="outline-text-3" id="text-orge76056f">
<p>
遍历统计计算并输出即可<br>
</p>
</div>
</div>
<div id="outline-container-orgd04abc6" class="outline-3">
<h3 id="orgd04abc6">代码</h3>
<div class="outline-text-3" id="text-orgd04abc6">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">m</span>;
  cin &gt;&gt; n &gt;&gt; m;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">pic</span><span style="color: #a626a4;">[</span>n<span style="color: #a626a4;">][</span>m<span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; m; j++<span style="color: #a626a4;">)</span>
      cin &gt;&gt; pic<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; m; j++<span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
      <span style="font-weight: bold;">int</span> <span style="color: #383a42;">c</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #383a42;">sum</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#21608;&#36793;&#20687;&#32032;&#65292;&#35745;&#31639;&#21644;&#19982;&#20010;&#25968;</span>
      <span style="font-weight: bold;">for</span> <span style="color: #b751b6;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span> = -<span style="color: #8a3b3c; font-weight: bold;">1</span>; a &lt;= <span style="color: #8a3b3c; font-weight: bold;">1</span>; a++<span style="color: #b751b6;">)</span>
        <span style="font-weight: bold;">for</span> <span style="color: #b751b6;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span> = -<span style="color: #8a3b3c; font-weight: bold;">1</span>; b &lt;= <span style="color: #8a3b3c; font-weight: bold;">1</span>; b++<span style="color: #b751b6;">)</span> <span style="color: #b751b6;">{</span>
          <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span> = i + a, <span style="color: #383a42;">y</span> = j + b;
          <span style="font-weight: bold;">if</span> <span style="color: #014980;">(</span>x &gt;= <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; y &gt;= <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m<span style="color: #014980;">)</span>
            c++, sum += pic<span style="color: #014980;">[</span>x<span style="color: #014980;">][</span>y<span style="color: #014980;">]</span>;
        <span style="color: #b751b6;">}</span>
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#35745;&#31639;&#24182;&#30452;&#25509;&#36755;&#20986;</span>
      cout &lt;&lt; sum / c &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
    <span style="color: #556b2f;">}</span>
    cout &lt;&lt; endl;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org022de43" class="outline-2">
<h2 id="org022de43">第十题</h2>
<div class="outline-text-2" id="text-org022de43">
</div>
<div id="outline-container-orge74518d" class="outline-3">
<h3 id="orge74518d">题目</h3>
<div class="outline-text-3" id="text-orge74518d">
<p>
问题描述<br>
　　小蓝在一个 n 行 m 列的方格图中玩一个游戏。<br>
　　开始时，小蓝站在方格图的左上角，即第 1 行第 1 列。<br>
　　小蓝可以在方格图上走动，走动时，如果当前在第 r 行第 c 列，他不能走到行号比 r 小的行，也不能走到列号比 c 小的列。同时，他一步走的直线距离不超过3。<br>
　　例如，如果当前小蓝在第 3 行第 5 列，他下一步可以走到第 3 行第 6 列、第 3 行第 7 列、第 3 行第 8 列、第 4 行第 5 列、第 4 行第 6 列、第 4 行第 7 列、第 5 行第 5 列、第 5 行第 6 列、第 6 行第 5 列之一。<br>
　　小蓝最终要走到第 n 行第 m 列。<br>
　　在图中，有的位置有奖励，走上去即可获得，有的位置有惩罚，走上去就要接受惩罚。奖励和惩罚最终抽象成一个权值，奖励为正，惩罚为负。<br>
　　小蓝希望，从第 1 行第 1 列走到第 n 行第 m 列后，总的权值和最大。请问最大是多少？<br>
输入格式<br>
　　输入的第一行包含两个整数 n, m，表示图的大小。<br>
　　接下来 n 行，每行 m 个整数，表示方格图中每个点的权值。<br>
输出格式<br>
　　输出一个整数，表示最大权值和。<br>
样例输入<br>
</p>

<pre class="example" id="org9010d78">
3 5
-4 -5 -10 -3 1
7 5 -9 3 -10
10 -2 6 -10 -4
</pre>

<p>
样例输出<br>
</p>

<pre class="example" id="org1b2d599">
15
</pre>

<p>
数据规模和约定<br>
　　对于30%的评测用例，1 &lt;= n, m &lt;= 10；<br>
　　对于50%的评测用例，1 &lt;= n, m &lt;= 20；<br>
　　对于所有评测用例，1 &lt;= n &lt;= 100，-10000 &lt;= 权值 &lt;= 10000。<br>
</p>
</div>
</div>
<div id="outline-container-org68fb889" class="outline-3">
<h3 id="org68fb889">解析</h3>
<div class="outline-text-3" id="text-org68fb889">
<p>
和只能向下或向右走的题目一样，我们使用逆向思维，每个点的最大权值就是当前点的权值加上能走过来的点的最大权值<br>
</p>
</div>
</div>
<div id="outline-container-orgbefbfc4" class="outline-3">
<h3 id="orgbefbfc4">代码</h3>
<div class="outline-text-3" id="text-orgbefbfc4">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">max</span><span style="color: #014980;">(</span><span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span> <span style="font-weight: bold;">return</span> a &gt; b ? a : b; <span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">m</span>;
  cin &gt;&gt; n &gt;&gt; m;
  <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">dp</span><span style="color: #a626a4;">[</span>n<span style="color: #a626a4;">][</span>m<span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; m; j++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36755;&#20837;&#24403;&#21069;&#26435;&#20540;</span>
      cin &gt;&gt; dp<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">][</span>j<span style="color: #556b2f;">]</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22240;&#20026;&#19981;&#20250;&#29992;&#21040;&#21518;&#38754;&#30340;&#26435;&#20540;</span>
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25152;&#20197;&#21487;&#20197;&#36793;&#36755;&#20837;&#36793;&#22788;&#29702;</span>
      <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">mp</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
      <span style="font-weight: bold;">bool</span> <span style="color: #383a42;">flag</span> = <span style="color: #383a42;">true</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25214;&#21040;&#33021;&#21040;&#24403;&#21069;&#26684;&#23376;&#30340;&#26368;&#22823;&#26435;&#20540;</span>
      <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; a &lt;= <span style="color: #8a3b3c; font-weight: bold;">3</span>; a++<span style="color: #556b2f;">)</span>
        <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#19981;&#33021;&#36208;&#36229;&#36807;&#19977;&#27493;</span>
        <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; b &lt;= <span style="color: #8a3b3c; font-weight: bold;">3</span> - a; b++<span style="color: #556b2f;">)</span>
          <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>a + b != <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
            <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span> = i - a, <span style="color: #383a42;">y</span> = j - b;
            <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>x &gt;= <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; y &gt;= <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; m<span style="color: #b751b6;">)</span>
              <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>flag<span style="color: #b751b6;">)</span> <span style="color: #b751b6;">{</span>
                flag = <span style="color: #383a42;">false</span>;
                mp = dp<span style="color: #014980;">[</span>x<span style="color: #014980;">][</span>y<span style="color: #014980;">]</span>;
              <span style="color: #b751b6;">}</span> <span style="font-weight: bold;">else</span>
                mp = max<span style="color: #b751b6;">(</span>mp, dp<span style="color: #014980;">[</span>x<span style="color: #014980;">][</span>y<span style="color: #014980;">]</span><span style="color: #b751b6;">)</span>;
          <span style="color: #556b2f;">}</span>
      dp<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">][</span>j<span style="color: #556b2f;">]</span> += mp;
    <span style="color: #a626a4;">}</span>
  cout &lt;&lt; dp<span style="color: #a626a4;">[</span>n - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">][</span>m - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span> &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-蓝桥杯.html">蓝桥杯</a> </div>]]></description>
  <category><![CDATA[蓝桥杯]]></category>
  <link>https://lampze.github.io/2021-lanqiao-simula.html</link>
  <pubDate>Fri, 22 Jan 2021 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[算法基础-模拟与搜索]]></title>
  <description><![CDATA[
<div id="outline-container-org9730ef4" class="outline-2">
<h2 id="org9730ef4">前言</h2>
<div class="outline-text-2" id="text-org9730ef4">
<p>
模拟既直接根据题意做题，搜索既在可能的解里寻找正确答案<br>
</p>

<p>
下面我就根据几道题目来具体的讲解它们的解题思路<br>
</p>
</div>
</div>
<div id="outline-container-org4a6c947" class="outline-2">
<h2 id="org4a6c947">扫雷游戏</h2>
<div class="outline-text-2" id="text-org4a6c947">
<p>
<a href="https://www.luogu.com.cn/problem/P2670">https://www.luogu.com.cn/problem/P2670</a><br>
</p>
</div>
<div id="outline-container-org41582a1" class="outline-3">
<h3 id="org41582a1">思路</h3>
<div class="outline-text-3" id="text-org41582a1">
<p>
题目要求输出每个格子周围的地雷数，那么根据模拟思维，直接统计每个格子周围的地雷数并输出即可<br>
</p>
</div>
</div>
<div id="outline-container-org04ea18c" class="outline-3">
<h3 id="org04ea18c">代码</h3>
<div class="outline-text-3" id="text-org04ea18c">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">bool</span> <span style="font-weight: bold;">checkb</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">y</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">m</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>x &lt; <span style="color: #8a3b3c; font-weight: bold;">0</span> || y &lt; <span style="color: #8a3b3c; font-weight: bold;">0</span> || x &gt;= n || y &gt;= m<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #383a42;">false</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #383a42;">true</span>;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">m</span>;
  cin &gt;&gt; n &gt;&gt; m;
  <span style="font-weight: bold;">char</span> <span style="color: #383a42;">all</span><span style="color: #a626a4;">[</span>n<span style="color: #a626a4;">][</span>m<span style="color: #a626a4;">]</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36755;&#20837;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; m; j++<span style="color: #a626a4;">)</span>
      cin &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span>;

  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#27599;&#20010;&#26684;&#23376;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; m; j++<span style="color: #556b2f;">)</span>
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22914;&#26524;&#19981;&#26159;&#38647;&#23601;&#32479;&#35745;&#21608;&#22260;&#22320;&#38647;&#25968;</span>
      <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>all<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">][</span>j<span style="color: #b751b6;">]</span> == <span style="color: #8a3b3c;">'?'</span><span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
        <span style="font-weight: bold;">int</span> <span style="color: #383a42;">count</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
        <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#21608;&#22260;&#20843;&#20010;&#26684;&#23376;</span>
        <span style="font-weight: bold;">for</span> <span style="color: #b751b6;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span> = -<span style="color: #8a3b3c; font-weight: bold;">1</span>; x &lt;= <span style="color: #8a3b3c; font-weight: bold;">1</span>; x++<span style="color: #b751b6;">)</span>
          <span style="font-weight: bold;">for</span> <span style="color: #b751b6;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">y</span> = -<span style="color: #8a3b3c; font-weight: bold;">1</span>; y &lt;= <span style="color: #8a3b3c; font-weight: bold;">1</span>; y++<span style="color: #b751b6;">)</span>
            <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#38450;&#27490;&#36234;&#30028;</span>
            <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>checkb<span style="color: #014980;">(</span>i + x, j + y, n, m<span style="color: #014980;">)</span> &amp;&amp; all<span style="color: #014980;">[</span>i + x<span style="color: #014980;">][</span>j + y<span style="color: #014980;">]</span> == <span style="color: #8a3b3c;">'*'</span><span style="color: #b751b6;">)</span>
              count++;
        cout &lt;&lt; count;
      <span style="color: #556b2f;">}</span> <span style="font-weight: bold;">else</span>
        cout &lt;&lt; <span style="color: #8a3b3c;">"*"</span>;
    cout &lt;&lt; endl;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orga25590a" class="outline-2">
<h2 id="orga25590a">字符串的展开</h2>
<div class="outline-text-2" id="text-orga25590a">
<p>
<a href="https://www.luogu.com.cn/problem/P1098">https://www.luogu.com.cn/problem/P1098</a><br>
</p>
</div>
<div id="outline-container-orgf880a82" class="outline-3">
<h3 id="orgf880a82">思路</h3>
<div class="outline-text-3" id="text-orgf880a82">
<p>
这是一道复杂的模拟题目，题目已经把我们要做的操作都描述出来了，我们要学会如何分解这些复杂的操作，因为这么复杂的逻辑很容易写错，而把逻辑分解成一个个模块后再调试显然是更加方便快捷的。<br>
</p>
</div>
</div>
<div id="outline-container-orgf11fd0d" class="outline-3">
<h3 id="orgf11fd0d">代码</h3>
<div class="outline-text-3" id="text-orgf11fd0d">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">algorithm</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">string</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="color: #383a42;">p1</span>, <span style="color: #383a42;">p2</span>, <span style="color: #383a42;">p3</span>;

<span style="font-weight: bold;">bool</span> <span style="font-weight: bold;">isnum</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span> <span style="font-weight: bold;">return</span> c &gt;= <span style="color: #8a3b3c;">'0'</span> &amp;&amp; c &lt;= <span style="color: #8a3b3c;">'9'</span>; <span style="color: #014980;">}</span>

<span style="font-weight: bold;">char</span> <span style="font-weight: bold;">tobig</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>c &gt;= <span style="color: #8a3b3c;">'a'</span> &amp;&amp; c &lt;= <span style="color: #8a3b3c;">'z'</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> c - <span style="color: #8a3b3c;">'a'</span> + <span style="color: #8a3b3c;">'A'</span>;
  <span style="font-weight: bold;">return</span> c;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">char</span> <span style="font-weight: bold;">tosmall</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>c &gt;= <span style="color: #8a3b3c;">'A'</span> &amp;&amp; c &lt;= <span style="color: #8a3b3c;">'Z'</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> c + <span style="color: #8a3b3c;">'a'</span> - <span style="color: #8a3b3c;">'A'</span>;
  <span style="font-weight: bold;">return</span> c;
<span style="color: #014980;">}</span>

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22240;&#20026;&#26377;&#21508;&#31181;&#21442;&#25968;&#65292;&#25152;&#20197;&#20351;&#29992;&#36825;&#20010;&#20989;&#25968;&#33719;&#21462;&#30495;&#23454;&#23383;&#31526;</span>
<span style="font-weight: bold;">char</span> <span style="font-weight: bold;">realchar</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>p1 == <span style="color: #8a3b3c; font-weight: bold;">3</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c;">'*'</span>;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>isnum<span style="color: #556b2f;">(</span>c<span style="color: #556b2f;">)</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> c;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>p1 == <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> tobig<span style="color: #a626a4;">(</span>c<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>p1 == <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> tosmall<span style="color: #a626a4;">(</span>c<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> c;
<span style="color: #014980;">}</span>

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36820;&#22238;&#19981;&#21253;&#25324;a&#65292;b&#30340;&#25193;&#23637;&#23383;&#31526;&#20018;</span>
<span style="font-weight: bold;">string</span> <span style="font-weight: bold;">re</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">char</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20013;&#38388;&#27809;&#26377;&#21487;&#25193;&#23637;&#30340;&#23383;&#31526;&#36820;&#22238;&#31354;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>b - a == <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c;">""</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">a&#22823;&#20110;b&#65292;&#19981;&#33021;&#25193;&#23637;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>a &gt;= b<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c;">"-"</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20004;&#20010;&#23383;&#31526;&#31867;&#22411;&#19981;&#21516;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>isnum<span style="color: #556b2f;">(</span>a<span style="color: #556b2f;">)</span> != isnum<span style="color: #556b2f;">(</span>b<span style="color: #556b2f;">)</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c;">"-"</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#37117;&#26159;-&#32943;&#23450;&#19981;&#34892;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>a == <span style="color: #8a3b3c;">'-'</span> || b == <span style="color: #8a3b3c;">'-'</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c;">"-"</span>;
  <span style="font-weight: bold;">string</span> <span style="color: #383a42;">out</span> = <span style="color: #8a3b3c;">""</span>;
  <span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span> = a + <span style="color: #8a3b3c; font-weight: bold;">1</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span> = a + <span style="color: #8a3b3c; font-weight: bold;">1</span>; c &lt; b; c++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; p2; i++<span style="color: #a626a4;">)</span>
      out += realchar<span style="color: #a626a4;">(</span>c<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>p3 == <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>
    reverse<span style="color: #a626a4;">(</span>out.begin<span style="color: #556b2f;">()</span>, out.end<span style="color: #556b2f;">()</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> out;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">string</span> <span style="color: #383a42;">s</span>;
  cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; p3 &gt;&gt; s;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; s.size<span style="color: #556b2f;">()</span>; i++<span style="color: #a626a4;">)</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#31532;&#19968;&#20010;&#23383;&#31526;&#21487;&#33021;&#26159;-</span>
    <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>i &amp;&amp; s<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> == <span style="color: #8a3b3c;">'-'</span><span style="color: #a626a4;">)</span>
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20351;&#29992;re&#33719;&#21462;&#25193;&#23637;&#30340;&#23383;&#31526;&#20018;</span>
      cout &lt;&lt; re<span style="color: #a626a4;">(</span>s<span style="color: #556b2f;">[</span>i - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span>, s<span style="color: #556b2f;">[</span>i + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>;
    <span style="font-weight: bold;">else</span>
      cout &lt;&lt; s<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org89bd1b5" class="outline-2">
<h2 id="org89bd1b5">选数</h2>
<div class="outline-text-2" id="text-org89bd1b5">
<p>
<a href="https://www.luogu.com.cn/problem/P1036">https://www.luogu.com.cn/problem/P1036</a><br>
</p>
</div>
<div id="outline-container-org8fd7807" class="outline-3">
<h3 id="org8fd7807">思路</h3>
<div class="outline-text-3" id="text-org8fd7807">
<p>
首先题目提到了素数，那么第一步就是先把素数都筛出来，方便后续操作<br>
</p>

<p>
然后我们需要需要在 \(n\) 个整数里选出 \(k\) 个整数相加，很显然这是一个排列问题，那么我们可以使用 <code>stl</code> 自带的 <code>next_permutation</code> 对 \(n\) 个整数进行全排列，然后截取前 \(k\) 个整数，当然还需要去重。<br>
或者我们自己使用搜索的思维来写，题目的解空间是所有的排列，每个数字有两种状态，选或不选，选中的数字有个数要求，因为必须要把所有情况过一遍，所以使用 <code>dfs</code> 即可。<br>
</p>
</div>
</div>
<div id="outline-container-orgaf37e24" class="outline-3">
<h3 id="orgaf37e24">代码</h3>
<div class="outline-text-3" id="text-orgaf37e24">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">algorithm</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">long</span> <span style="color: #383a42;">all</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">21</span><span style="color: #014980;">]</span>, <span style="color: #383a42;">cou</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">k</span>;

<span style="font-weight: bold;">bool</span> <span style="color: #383a42;">prime</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">5000001</span><span style="color: #014980;">]</span>;

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#19977;&#20010;&#21442;&#25968;&#20026;&#21035;&#20026;&#24403;&#21069;&#20301;&#32622;&#65292;&#36873;&#20013;&#30340;&#25968;&#23383;&#65292;&#24403;&#21069;&#30340;&#21644;</span>
<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">dfs</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">now</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">sel</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">sum</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22914;&#26524;&#21097;&#19979;&#30340;&#25968;&#19981;&#22815;&#36873;&#23601;&#36864;&#20986;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>n - now &lt; k - sel<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36873;&#22815;&#20102;&#25968;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>sel == k<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span><span style="color: #383a42; font-weight: bold;">!</span>prime<span style="color: #b751b6;">[</span>sum<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>
      cou++;
    <span style="font-weight: bold;">return</span>;
  <span style="color: #a626a4;">}</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#27599;&#31181;&#21487;&#33021;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = now; i &lt; n; i++<span style="color: #a626a4;">)</span>
    dfs<span style="color: #a626a4;">(</span>i + <span style="color: #8a3b3c; font-weight: bold;">1</span>, sel + <span style="color: #8a3b3c; font-weight: bold;">1</span>, sum + all<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">long</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">2</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">5000001</span>; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span><span style="color: #383a42; font-weight: bold;">!</span>prime<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>
      <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">long</span> <span style="color: #383a42;">j</span> = i * <span style="color: #8a3b3c; font-weight: bold;">2</span>; j &lt; <span style="color: #8a3b3c; font-weight: bold;">5000001</span>; j += i<span style="color: #a626a4;">)</span>
        prime<span style="color: #a626a4;">[</span>j<span style="color: #a626a4;">]</span> = <span style="color: #383a42;">true</span>;
  prime<span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">]</span> = prime<span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span> = <span style="color: #383a42;">true</span>;

  cin &gt;&gt; n &gt;&gt; k;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    cin &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>;

  dfs<span style="color: #a626a4;">(</span><span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>;

  cout &lt;&lt; cou &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orge5ee173" class="outline-2">
<h2 id="orge5ee173">自然数的拆分问题</h2>
<div class="outline-text-2" id="text-orge5ee173">
<p>
<a href="https://www.luogu.com.cn/problem/P2404">https://www.luogu.com.cn/problem/P2404</a><br>
</p>
</div>
<div id="outline-container-org1a5cb60" class="outline-3">
<h3 id="org1a5cb60">思路</h3>
<div class="outline-text-3" id="text-org1a5cb60">
<p>
这题就不使用全排列了，只能老老实实的自己写搜索了，因为必须要把所有情况过一遍，所以使用 <code>dfs</code> 比较方便，状态只需要保存已分拆分的数字个数与剩余数字就行了。<br>
</p>
</div>
</div>
<div id="outline-container-org4cc0fbd" class="outline-3">
<h3 id="org4cc0fbd">代码</h3>
<div class="outline-text-3" id="text-org4cc0fbd">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">all</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">10</span><span style="color: #014980;">]</span>;

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#24050;&#25286;&#20986;&#30340;&#25968;&#23383;&#20010;&#25968;&#65292;&#21097;&#20313;&#30340;&#25968;&#23383;</span>
<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">dfs</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">now</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">last</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#27809;&#26377;&#21097;&#20313;&#30340;&#25968;&#23383;&#20102;&#23601;&#32467;&#26463;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>last == <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">1&#34920;&#31034;&#36824;&#26159;&#21407;&#26469;&#30340;&#25968;&#23383;&#65292;&#32943;&#23450;&#19981;&#33021;&#31639;</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>now == <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">)</span>
      <span style="font-weight: bold;">return</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36755;&#20986;&#25286;&#20998;&#30340;&#25968;&#23383;</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; now; i++<span style="color: #556b2f;">)</span>
      <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>i<span style="color: #556b2f;">)</span>
        cout &lt;&lt; <span style="color: #8a3b3c;">"+"</span> &lt;&lt; all<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span>;
      <span style="font-weight: bold;">else</span>
        cout &lt;&lt; all<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span>;
    cout &lt;&lt; endl;
    <span style="font-weight: bold;">return</span>;
  <span style="color: #a626a4;">}</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#27599;&#20010;&#21487;&#33021;&#25286;&#20998;&#30340;&#25968;&#23383;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= last; i++<span style="color: #a626a4;">)</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22240;&#20026;&#38656;&#35201;&#20174;&#23567;&#21040;&#22823;&#25490;&#24207;</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25152;&#20197;&#21482;&#38656;&#35201;&#20445;&#25345;&#27604;&#19978;&#19968;&#20010;&#25968;&#23383;&#22823;&#21363;&#21487;</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#31532;&#19968;&#20010;&#25968;&#23383;&#24403;&#28982;&#19981;&#29992;&#27604;&#36739;&#20102;</span>
    <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span><span style="color: #383a42; font-weight: bold;">!</span>now || i &gt;= all<span style="color: #556b2f;">[</span>now - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
      all<span style="color: #556b2f;">[</span>now<span style="color: #556b2f;">]</span> = i;
      dfs<span style="color: #556b2f;">(</span>now + <span style="color: #8a3b3c; font-weight: bold;">1</span>, last - i<span style="color: #556b2f;">)</span>;
    <span style="color: #a626a4;">}</span>
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  cin &gt;&gt; n;
  dfs<span style="color: #a626a4;">(</span><span style="color: #8a3b3c; font-weight: bold;">0</span>, n<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgc3189c5" class="outline-2">
<h2 id="orgc3189c5">马的遍历</h2>
<div class="outline-text-2" id="text-orgc3189c5">
<p>
<a href="https://www.luogu.com.cn/problem/P1443">https://www.luogu.com.cn/problem/P1443</a><br>
</p>
</div>
<div id="outline-container-org31fd966" class="outline-3">
<h3 id="org31fd966">思路</h3>
<div class="outline-text-3" id="text-org31fd966">
<p>
题目叫我们计算到达一个点需要多少步，那我们就模拟一只马走路即可，但一只马一步可能走好多个地方，使用循环是不能做出来的，我们必须把马的状态保存起来，每走一次更新一下。<br>
使用队列保存马每一步的坐标与步数，每次取出一个步数最小的状态，把下一步可能的状态计算出并加入到队列就行了。<br>
</p>
</div>
</div>
<div id="outline-container-org878df86" class="outline-3">
<h3 id="org878df86">代码</h3>
<div class="outline-text-3" id="text-org878df86">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">cstdio</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">map</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">queue</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20351;&#29992;&#32467;&#26500;&#20307;&#20445;&#23384;&#39532;&#30340;&#29366;&#24577;</span>
<span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">Horse</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span>;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">y</span>;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">time</span>;
  <span style="font-weight: bold;">Horse</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">c</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    x = a;
    y = b;
    time = c;
  <span style="color: #a626a4;">}</span>
<span style="color: #014980;">}</span>;

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#35760;&#24405;&#39532;&#19979;&#19968;&#27493;&#21487;&#20197;&#36208;&#30340;&#26041;&#21521;</span>
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">nex</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">8</span><span style="color: #014980;">][</span><span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #014980;">]</span> = <span style="color: #014980;">{</span><span style="color: #8a3b3c; font-weight: bold;">2</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, -<span style="color: #8a3b3c; font-weight: bold;">2</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, -<span style="color: #8a3b3c; font-weight: bold;">2</span>, -<span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">2</span>, -<span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">2</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, -<span style="color: #8a3b3c; font-weight: bold;">2</span>, -<span style="color: #8a3b3c; font-weight: bold;">1</span>, -<span style="color: #8a3b3c; font-weight: bold;">2</span>, -<span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #014980;">}</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">m</span>, <span style="color: #383a42;">x</span>, <span style="color: #383a42;">y</span>;
  cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">board</span><span style="color: #a626a4;">[</span>n + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">][</span>m + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">bool</span> <span style="color: #383a42;">iswalk</span><span style="color: #a626a4;">[</span>n + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">][</span>m + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span>;

  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20808;&#20840;&#25918;&#19978;-1&#65292;&#21040;&#36798;&#19981;&#20102;&#30340;&#28857;&#33258;&#28982;&#23601;&#26159;-1&#20102;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt;= n; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt;= m; j++<span style="color: #a626a4;">)</span>
      board<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span> = -<span style="color: #8a3b3c; font-weight: bold;">1</span>, iswalk<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span> = <span style="color: #383a42;">false</span>;

  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25918;&#20837;&#21021;&#22987;&#26465;&#20214;</span>
  <span style="font-weight: bold;">queue</span><span style="color: #a626a4;">&lt;</span><span style="font-weight: bold;">Horse</span><span style="color: #a626a4;">&gt;</span> <span style="color: #383a42;">q</span>;
  q.push<span style="color: #a626a4;">(</span>Horse<span style="color: #556b2f;">(</span>x, y, <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #556b2f;">)</span><span style="color: #a626a4;">)</span>;
  iswalk<span style="color: #a626a4;">[</span>x<span style="color: #a626a4;">][</span>y<span style="color: #a626a4;">]</span> = <span style="color: #383a42;">true</span>;

  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#24490;&#29615;&#21040;&#38431;&#21015;&#20026;&#31354;</span>
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span><span style="color: #383a42; font-weight: bold;">!</span>q.empty<span style="color: #556b2f;">()</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21462;&#20986;&#38431;&#39318;&#20803;&#32032;</span>
    <span style="font-weight: bold;">Horse</span> <span style="color: #383a42;">in</span> = q.front<span style="color: #556b2f;">()</span>;
    q.pop<span style="color: #556b2f;">()</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#26356;&#26032;&#24403;&#21069;&#26368;&#23567;&#27493;&#25968;</span>
    board<span style="color: #556b2f;">[</span>in.x<span style="color: #556b2f;">][</span>in.y<span style="color: #556b2f;">]</span> = in.time;

    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">8</span>; i++<span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
      <span style="font-weight: bold;">int</span> <span style="color: #383a42;">nx</span> = in.x + nex<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">][</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #b751b6;">]</span>, <span style="color: #383a42;">ny</span> = in.y + nex<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">][</span><span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #b751b6;">]</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36229;&#20986;&#36793;&#30028;&#25110;&#32773;&#24050;&#32463;&#36208;&#36807;&#23601;&#30475;&#19979;&#19968;&#31181;&#24773;&#20917;</span>
      <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span><span style="font-weight: bold;">nx</span> <span style="color: #014980;">&lt;</span> <span style="color: #8a3b3c; font-weight: bold;">1</span> || <span style="font-weight: bold;">ny</span> <span style="color: #a626a4;">&lt;</span> <span style="color: #8a3b3c; font-weight: bold;">1</span> || nx <span style="color: #a626a4;">&gt;</span> n || ny <span style="color: #014980;">&gt;</span> <span style="color: #383a42;">m</span> || iswalk<span style="color: #014980;">[</span>nx<span style="color: #014980;">][</span>ny<span style="color: #014980;">]</span><span style="color: #b751b6;">)</span>
        <span style="font-weight: bold;">continue</span>;
      q.push<span style="color: #b751b6;">(</span>Horse<span style="color: #014980;">(</span>nx, ny, in.time + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #014980;">)</span><span style="color: #b751b6;">)</span>;
      iswalk<span style="color: #b751b6;">[</span>nx<span style="color: #b751b6;">][</span>ny<span style="color: #b751b6;">]</span> = <span style="color: #383a42;">true</span>;
    <span style="color: #556b2f;">}</span>
  <span style="color: #a626a4;">}</span>

  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= n; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; j &lt;= m; j++<span style="color: #556b2f;">)</span>
      printf<span style="color: #556b2f;">(</span><span style="color: #8a3b3c;">"%-5d"</span>, board<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">][</span>j<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>;
    printf<span style="color: #556b2f;">(</span><span style="color: #8a3b3c;">"\n"</span><span style="color: #556b2f;">)</span>;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org8c0d365" class="outline-2">
<h2 id="org8c0d365">奇怪的电梯</h2>
<div class="outline-text-2" id="text-org8c0d365">
<p>
<a href="https://www.luogu.com.cn/problem/P1135">https://www.luogu.com.cn/problem/P1135</a><br>
</p>
</div>
<div id="outline-container-orgbcfea2d" class="outline-3">
<h3 id="orgbcfea2d">思路</h3>
<div class="outline-text-3" id="text-orgbcfea2d">
<p>
根据题意，一个楼层最多只能跳转到另外两个楼层，一个节点表示一个楼层，画成图就是一个节点连接着两个节点，可以自己尝试的在纸上画一下。<br>
</p>

<p>
那么题目的意思就是在这一张图上找到起点到终点的最短距离，使用 <code>bfs</code> 即可。<br>
</p>
</div>
</div>
<div id="outline-container-org65a781f" class="outline-3">
<h3 id="org65a781f">代码</h3>
<div class="outline-text-3" id="text-org65a781f">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">queue</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">set</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">set</span><span style="color: #014980;">&lt;</span><span style="font-weight: bold;">int</span><span style="color: #014980;">&gt;</span> <span style="color: #383a42;">all</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">a&#21040;b&#30340;&#26368;&#23569;&#27425;&#25968;</span>
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">count</span> = -<span style="color: #8a3b3c; font-weight: bold;">1</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">a</span>, <span style="color: #383a42;">b</span>;
  cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">k</span><span style="color: #a626a4;">[</span>n + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= n; i++<span style="color: #a626a4;">)</span>
    cin &gt;&gt; k<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">queue</span><span style="color: #a626a4;">&lt;</span><span style="font-weight: bold;">int</span><span style="color: #a626a4;">&gt;</span> <span style="color: #383a42;">q</span>;
  q.push<span style="color: #a626a4;">(</span>a<span style="color: #a626a4;">)</span>;

  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#24403;&#21069;&#25353;&#19979;&#25353;&#38062;&#30340;&#27425;&#25968;</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">c</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#24490;&#29615;&#21040;&#38431;&#21015;&#20026;&#31354;</span>
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span><span style="color: #383a42; font-weight: bold;">!</span>q.empty<span style="color: #556b2f;">()</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">queue</span><span style="color: #556b2f;">&lt;</span><span style="font-weight: bold;">int</span><span style="color: #556b2f;">&gt;</span> <span style="color: #383a42;">p</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21040;&#32456;&#28857;&#20102;&#27809;</span>
    <span style="font-weight: bold;">int</span> <span style="color: #383a42;">flag</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20004;&#20010;&#38431;&#21015;&#31934;&#30830;&#25511;&#21046;&#25353;&#19979;&#25353;&#38062;&#30340;&#27425;&#25968;</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#19981;&#20351;&#29992;&#32467;&#26500;&#20307;&#23601;&#21482;&#33021;&#36825;&#26679;&#20102;</span>
    <span style="font-weight: bold;">while</span> <span style="color: #556b2f;">(</span><span style="color: #383a42; font-weight: bold;">!</span>q.empty<span style="color: #b751b6;">()</span><span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
      <span style="font-weight: bold;">int</span> <span style="color: #383a42;">now</span> = q.front<span style="color: #b751b6;">()</span>;
      q.pop<span style="color: #b751b6;">()</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22914;&#26524;&#21040;&#36798;&#32456;&#28857;&#23601;&#26356;&#26032;&#25968;&#25454;</span>
      <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>now == b<span style="color: #b751b6;">)</span> <span style="color: #b751b6;">{</span>
        count = c;
        flag = <span style="color: #8a3b3c; font-weight: bold;">1</span>;
        <span style="font-weight: bold;">break</span>;
      <span style="color: #b751b6;">}</span>
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#32463;&#36807;&#30340;&#27004;&#23618;&#23601;&#19981;&#35201;&#20877;&#32463;&#36807;&#20102;</span>
      all.insert<span style="color: #b751b6;">(</span>now<span style="color: #b751b6;">)</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21482;&#26377;&#20004;&#31181;&#29366;&#24577;&#65292;&#20351;&#29992;for&#22826;&#32047;&#20102;</span>
      <span style="font-weight: bold;">int</span> <span style="color: #383a42;">next</span> = now + k<span style="color: #b751b6;">[</span>now<span style="color: #b751b6;">]</span>;
      <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>next &gt; <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; next &lt;= n &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all.count<span style="color: #014980;">(</span>next<span style="color: #014980;">)</span><span style="color: #b751b6;">)</span>
        p.push<span style="color: #b751b6;">(</span>next<span style="color: #b751b6;">)</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25152;&#20197;&#30452;&#25509;&#22797;&#21046;&#19978;&#38754;&#30340;&#20877;&#25913;&#19968;&#19979;&#23601;&#34892;&#20102;</span>
      next = now - k<span style="color: #b751b6;">[</span>now<span style="color: #b751b6;">]</span>;
      <span style="font-weight: bold;">if</span> <span style="color: #b751b6;">(</span>next &gt; <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; next &lt;= n &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all.count<span style="color: #014980;">(</span>next<span style="color: #014980;">)</span><span style="color: #b751b6;">)</span>
        p.push<span style="color: #b751b6;">(</span>next<span style="color: #b751b6;">)</span>;
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#24403;&#28982;&#36825;&#26679;&#38750;&#24120;&#19981;&#22909;&#30475;</span>
    <span style="color: #556b2f;">}</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21040;&#32456;&#28857;&#23601;&#32467;&#26463;</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>flag<span style="color: #556b2f;">)</span>
      <span style="font-weight: bold;">break</span>;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#26356;&#26032;&#38431;&#21015;&#19982;&#25353;&#38062;&#30340;&#27425;&#25968;</span>
    q = p;
    c++;
  <span style="color: #a626a4;">}</span>
  cout &lt;&lt; count &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-algorithm.html">algorithm</a> </div>]]></description>
  <category><![CDATA[algorithm]]></category>
  <link>https://lampze.github.io/algorithm-basic-sim-search.html</link>
  <pubDate>Fri, 15 Jan 2021 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[基础算法简介]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8d71cf1">前言</a></li>
<li><a href="#org6914536">算法思想</a>
<ul>
<li><a href="#org7c0800f">模拟</a></li>
<li><a href="#org9b321d2">搜索</a></li>
<li><a href="#org72d667f">递归</a></li>
<li><a href="#orgf55b418">递推</a></li>
</ul>
</li>
<li><a href="#orga51f261">算法种类</a>
<ul>
<li><a href="#org2f02396">搜索</a>
<ul>
<li><a href="#orge2edf18">枚举</a></li>
<li><a href="#org04a4334">排列</a></li>
<li><a href="#orgb083d6c">子集</a></li>
<li><a href="#org9eee757">DFS</a></li>
<li><a href="#orga9ae623">BFS</a></li>
<li><a href="#org3bd47bd">二分查找</a></li>
</ul>
</li>
<li><a href="#org3ebe615">动态规划</a>
<ul>
<li><a href="#org6302225">递推</a></li>
<li><a href="#org5bf91de">记忆化搜索</a></li>
<li><a href="#orgd6bf637">贪心</a></li>
</ul>
</li>
<li><a href="#org4842bfe">数学</a>
<ul>
<li><a href="#orga42f37e">高精度</a></li>
<li><a href="#orgc1978a0">快速幂</a></li>
<li><a href="#org117bb41">数论</a></li>
</ul>
</li>
<li><a href="#orgaf7a75c">数据结构</a>
<ul>
<li><a href="#org12b3168">栈</a></li>
<li><a href="#org44dbbd5">队列</a></li>
<li><a href="#orgd3fd8ed">并查集</a></li>
<li><a href="#orgb1a8ed1">树状数组</a></li>
<li><a href="#org4d89c59">线段树</a></li>
</ul>
</li>
<li><a href="#orgab05511">图论</a>
<ul>
<li><a href="#org7f04492">最短路</a></li>
<li><a href="#org1efb23c">最小生成树</a></li>
<li><a href="#orgaaa2b6d">拓扑排序</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>
<div id="outline-container-org8d71cf1" class="outline-2">
<h2 id="org8d71cf1">前言</h2>
<div class="outline-text-2" id="text-org8d71cf1">
<p>
本文将会简单介绍些竞赛会使用的各种算法<br>
</p>

<p>
学习算法之前是需要一点编程语言基础的，在学习算法时就需要确定一门实现语言了，对于初学者我还是推荐使用 <code>C++</code> 或者 <code>Python</code> 。因为 <code>C++</code> 多了许多有用的算法库，而不需要像 <code>C</code> 那样关心底层， <code>Python</code> 则是完全不用考虑许多细节，可以更加专注于算法思维。<br>
</p>
</div>
</div>
<div id="outline-container-org6914536" class="outline-2">
<h2 id="org6914536">算法思想</h2>
<div class="outline-text-2" id="text-org6914536">
</div>
<div id="outline-container-org7c0800f" class="outline-3">
<h3 id="org7c0800f">模拟</h3>
<div class="outline-text-3" id="text-org7c0800f">
<p>
模拟的含义就是题目说什么我们就做什么，比如赛跑、算时间、猜拳等等只需要根据题意把代码实现出来即可<br>
模拟是我们拿到一个题目时第一个思考的破解算法，但对于大多数题目单纯的模拟是不能在规定时间内解开的。也有的题目只能使用模拟，但模拟的事物非常复杂，这时就非常考验编程功底了。<br>
</p>

<p>
可以这样说，其它算法思想的出现解决了不能直接模拟的问题。<br>
</p>
</div>
</div>
<div id="outline-container-org9b321d2" class="outline-3">
<h3 id="org9b321d2">搜索</h3>
<div class="outline-text-3" id="text-org9b321d2">
<p>
搜索即是找到答案的过程，通过题目上已知的可能解，我们一个一个的去试就能找到正确的解了。<br>
</p>

<p>
比如题目给定了一些数，问两个数和为0的数对有多少。<br>
</p>

<p>
我们可以使用两个循环，每个循环确定一个数，就可以把所有的可能性都遍历了。<br>
</p>

<p>
当然有些题目是不能简单的直接使用固定的循环的，比如我把那个题目改成和为0的子集数量，就不可能使用2个3个或者4个循环解决了。<br>
</p>
</div>
</div>
<div id="outline-container-org72d667f" class="outline-3">
<h3 id="org72d667f">递归</h3>
<div class="outline-text-3" id="text-org72d667f">
<p>
递归既调用自身<br>
</p>

<p>
我们会遇到一些公式，它们会自己引用自己，像 <code>fib(n)=fib(n-1)+fib(n-2)</code> ，当然只有这一条的公式是不可解的，它还需要一个下界 <code>fib(1)=fib(2)=1</code> 。<br>
</p>

<p>
这时我们从 <code>fib(n)</code> 开始算起的过程就叫递归，虽然我们人这样算时非常痛苦，需要记录很多中间变量，但机器天然就适应这样的算法，只需要几行代码就能实现。<br>
</p>

<div class="org-src-container">
<pre class="src src-C++"><span style="font-weight: bold;">int</span> <span style="font-weight: bold;">fib</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>n &lt;= <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">1</span>;
  <span style="font-weight: bold;">return</span> fib<span style="color: #a626a4;">(</span>n - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">)</span> + fib<span style="color: #a626a4;">(</span>n - <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf55b418" class="outline-3">
<h3 id="orgf55b418">递推</h3>
<div class="outline-text-3" id="text-orgf55b418">
<p>
递推与递归相反，递推也是使用相同的数学公式，但它从下界开始算起，比如算 <code>fib(n)</code> 使用递推的思想就是从 <code>fib(1)</code> 开始一步一步往上推。<br>
</p>

<div class="org-src-container">
<pre class="src src-C++"><span style="font-weight: bold;">int</span> <span style="font-weight: bold;">fib</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">f</span><span style="color: #a626a4;">[</span>n + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span> = <span style="color: #a626a4;">{</span><span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">}</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">3</span>; i &lt;= n; i++<span style="color: #a626a4;">)</span>
    f<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span> = f<span style="color: #a626a4;">[</span>i - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span> + f<span style="color: #a626a4;">[</span>i - <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">return</span> f<span style="color: #a626a4;">[</span>n<span style="color: #a626a4;">]</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
可以发现这种做法更加贴近人的思维，并且使用普通的循环就解决了问题，但作为代价我们需要推算出所有的上下界，并准确的处理这些边界情况。<br>
</p>

<p>
有些同学可能发现了递推的版本使用了数组，而递归的版本没有，这是否说明递推的方法需要消耗更多的内存呢？<br>
其实并没有，递归的代码需要多次调用函数，每次调用的函数都会消耗空间，但递推我们申请内存只能规整的一块一块同时申请，但递归的空间使用情况是动态的，虽然最大时的空间消耗相同，但我认为动态的程序是比较好的。<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orga51f261" class="outline-2">
<h2 id="orga51f261">算法种类</h2>
<div class="outline-text-2" id="text-orga51f261">
</div>
<div id="outline-container-org2f02396" class="outline-3">
<h3 id="org2f02396">搜索</h3>
<div class="outline-text-3" id="text-org2f02396">
<p>
搜索的思想已经讲过，下面我介绍一些常用的搜索方法<br>
</p>
</div>
<div id="outline-container-orge2edf18" class="outline-4">
<h4 id="orge2edf18">枚举</h4>
<div class="outline-text-4" id="text-orge2edf18">
<p>
简单的把每种可能性都测试一遍，循环即可<br>
</p>
</div>
</div>
<div id="outline-container-org04a4334" class="outline-4">
<h4 id="org04a4334">排列</h4>
<div class="outline-text-4" id="text-org04a4334">
<p>
对于安排时间的问题：给出很多段时间，要求找到不重合的时间段，使得总时长最大<br>
</p>

<p>
排列既对给定的时间段排列组合情况都试试，比如一共有3段时间的话就是试试 <code>1,2,3</code> 、 <code>1,3,2</code> 、 <code>3,1,2</code> 、 <code>3,2,1</code> 这些情况，注意这里的数字是时间段的下标，即第几个时间段，不止这个题目许多题目都可以使用这个排列顺序解决。<br>
</p>

<p>
所以我们只要找出生成这个排列的方法就能解决这些问题，可喜可贺的是 <code>C++</code> 有一个函数可以生成排列 <code>next_permutation</code> ，下面给出一个伪代码。<br>
</p>

<div class="org-src-container">
<pre class="src src-C++"><span style="color: #556b2f;">// </span><span style="color: #556b2f;">time&#23384;&#25918;&#26102;&#38388;&#27573;&#65292;len&#26159;&#26102;&#38388;&#27573;&#30340;&#20010;&#25968;</span>
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">time</span><span style="color: #014980;">[]</span>, <span style="color: #383a42;">len</span>;
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">per</span><span style="color: #014980;">[</span>len<span style="color: #014980;">]</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21021;&#22987;&#21270;&#25490;&#21015;&#25968;&#32452;</span>
<span style="font-weight: bold;">for</span> <span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #014980;">)</span>
  par<span style="color: #014980;">[</span>i<span style="color: #014980;">]</span> = i;
<span style="font-weight: bold;">do</span> <span style="color: #014980;">{</span>
  &#35745;&#31639;&#24403;&#21069;&#25490;&#21015;&#19981;&#37325;&#21512;&#26102;&#38388;&#27573;&#30340;&#24635;&#26102;&#38271;&#24182;&#26356;&#26032;&#26368;&#22823;&#20540;
<span style="color: #014980;">}</span> <span style="font-weight: bold;">while</span> <span style="color: #014980;">(</span>next_permutation<span style="color: #a626a4;">(</span>per, per + len<span style="color: #a626a4;">)</span><span style="color: #014980;">)</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">next_permutation&#20250;&#35745;&#31639;&#19979;&#19968;&#20010;&#25490;&#21015;&#65292;&#22914;&#26524;&#27809;&#26377;&#30340;&#35805;&#20250;&#36820;&#22238;&#20551;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb083d6c" class="outline-4">
<h4 id="orgb083d6c">子集</h4>
<div class="outline-text-4" id="text-orgb083d6c">
<p>
给定一些数，问你一共有多少种方法让数的和为0。<br>
</p>

<p>
这种情况我们就要遍历所有的子集了，我们还是把数字的下标抽象出来，不关心具体的数，只关心第几个数，我们只需要知道所有数字对应下标的子集即可。<br>
可以肯定对于1到n的集合是有通用的子集生成算法的，就像之前的排列。<br>
</p>

<p>
因为子集并没有库函数，所以我们只能自己来实现了。<br>
</p>

<p>
一个数字在集合里只有两种状态：存在或者不存在。我们用1和0表示，像下面这样<br>
</p>
<pre class="example" id="org375cd6d">
1 2 3
0 0 1
</pre>
<p>
表示这个集合只有3<br>
调整第二行的数字就可以得到所有的子集了，可以知道3个数有8个子集。聪明的同学可能发现了，n个数的集合有 <code>2^n</code> 个子集<br>
如果我们把第二行的数字从左至右连接在一起，组合成一个二进制数。像上面这个例子就是 <code>001</code> 这个二进制数，我们只需要从 <code>000</code> 开始每次增加1，直到 <code>111</code> 就能得到所有的子集<br>
现在很清晰了，从0开始遍历到 <code>2^n</code> 即可，每次找到对应2进制位为1的下标就是当前子集存在的数。<br>
</p>

<div class="org-src-container">
<pre class="src src-C++"><span style="color: #556b2f;">// </span><span style="color: #556b2f;">num&#26159;&#25152;&#26377;&#25968;&#23383;&#65292;len&#26159;&#25968;&#23383;&#20010;&#25968;</span>
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">num</span><span style="color: #014980;">[]</span>, <span style="color: #383a42;">len</span>, <span style="color: #383a42;">cou</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">1 &lt;&lt; len&#30340;&#32467;&#26524;&#26159;2^len</span>
<span style="font-weight: bold;">for</span> <span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #a626a4;">(</span><span style="color: #8a3b3c; font-weight: bold;">1</span> &lt;&lt; len<span style="color: #a626a4;">)</span>; i++<span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">sum</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #383a42;">ind</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #383a42;">temp</span> = i;
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#31532;&#19968;&#20301;</span>
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span>temp<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22914;&#26524;&#24403;&#21069;&#20301;&#20026;1&#34920;&#31034;&#24403;&#21069;&#19979;&#26631;&#30340;&#25968;&#23383;&#23384;&#22312;&#20110;&#23376;&#38598;</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>temp % <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #556b2f;">)</span>
      sum += num<span style="color: #556b2f;">[</span>ind<span style="color: #556b2f;">]</span>;
    ind++;
    temp /= <span style="color: #8a3b3c; font-weight: bold;">2</span>;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>sum == <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>
    cou++;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org9eee757" class="outline-4">
<h4 id="org9eee757">DFS</h4>
<div class="outline-text-4" id="text-org9eee757">
<p>
DFS(Depth First Search)既深度优先搜索<br>
</p>

<p>
用生成排列的问题来举例的话，可以想像出10个空位，每个空位都可以放数字， <code>DFS</code> 就是优先把空位都填好。<br>
</p>

<div class="org-src-container">
<pre class="src src-C++"><span style="font-weight: bold;">int</span> <span style="color: #383a42;">end</span> = <span style="color: #8a3b3c; font-weight: bold;">10</span>;
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">num</span><span style="color: #014980;">[</span>end<span style="color: #014980;">]</span>;

<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">dfs</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">now</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20840;&#37096;&#31354;&#20301;&#37117;&#22635;&#23436;&#20102;</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>now == end<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; end; i++<span style="color: #556b2f;">)</span>
      cout &lt;&lt; num<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
    cout &lt;&lt; endl;
    <span style="font-weight: bold;">return</span>;
  <span style="color: #a626a4;">}</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21015;&#20986;&#25152;&#26377;&#21487;&#22635;&#30340;&#25968;&#23383;</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= end; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22635;&#24403;&#21069;&#20301;&#32622;</span>
    num<span style="color: #556b2f;">[</span>now<span style="color: #556b2f;">]</span> = i;
    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#22635;&#23436;&#31435;&#21363;&#21435;&#22635;&#19979;&#19968;&#20010;</span>
    dfs<span style="color: #556b2f;">(</span>now + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">)</span>;
  <span style="color: #a626a4;">}</span>
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
这个代码会填入重复的数字，同学们可以自己修改试试<br>
</p>
</div>
</div>

<div id="outline-container-orga9ae623" class="outline-4">
<h4 id="orga9ae623">BFS</h4>
<div class="outline-text-4" id="text-orga9ae623">
<p>
BFS(Breadth First Search)既广度优先搜索<br>
</p>

<p>
与 <code>DFS</code> 不同， <code>BFS</code> 是先把当前空位的所有可能数字都填好后再进入下一个格子，所以 <code>BFS</code> 还需要保存所有的状态，一般采用队列的方式保存。<br>
</p>
</div>
</div>
<div id="outline-container-org3bd47bd" class="outline-4">
<h4 id="org3bd47bd">二分查找</h4>
<div class="outline-text-4" id="text-org3bd47bd">
<p>
二分查找只能应用在有单调性的数据上，对于一个单调递增的数列，我想查找一个数字是否存在于这个数列上，就可以查找数列中间的数字，如果相等返回真，如果查找的数字比中间数字大就去右边查找，反之则去左边查找。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-org3ebe615" class="outline-3">
<h3 id="org3ebe615">动态规划</h3>
<div class="outline-text-3" id="text-org3ebe615">
<p>
动态规划是算法学习上的一道分水岭，动态规划的核心是找出题目背后的那个数学公式，而找到公式是非常困难的，所幸有许多类型的题目都有现成的公式，而找到公式后就可以非常简单轻松的完成了。<br>
</p>
</div>
<div id="outline-container-org6302225" class="outline-4">
<h4 id="org6302225">递推</h4>
<div class="outline-text-4" id="text-org6302225">
<p>
递推与之前讲的内容一样，利用公式从小的情况开始出发，处理好边界情况，慢慢的向上递推到目标<br>
</p>

<p>
递推时虽然时间复杂度是一致的，但空间复杂度还可以优化，有许多公式不会用到非常以前的结果，我们就可以节省掉这些空间，比如 <code>fib</code> 的例子我们只需要2个变量保存历史结果。<br>
</p>
</div>
</div>
<div id="outline-container-org5bf91de" class="outline-4">
<h4 id="org5bf91de">记忆化搜索</h4>
<div class="outline-text-4" id="text-org5bf91de">
<p>
因为对于复杂的公式，递推有时非常的难以确定边界，而公式一般都是递归的，我们可以直接使用递归完成题目，但时间复杂度会爆炸，因为有许多子问题是重复的，使用递归会重复计算这些内容，所以我们可以利用空间换取时间，既记录已经算过的结果，保存下来以便以后使用，这样就能在相同的时间复杂度下完成了。<br>
</p>
</div>
</div>
<div id="outline-container-orgd6bf637" class="outline-4">
<h4 id="orgd6bf637">贪心</h4>
<div class="outline-text-4" id="text-orgd6bf637">
<p>
有些最优子结构的题目可以不使用动态规划的方法解决，单纯的最大或最小就能解决，这里只需要排序即可，但分辩这些题目是最大的难点。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-org4842bfe" class="outline-3">
<h3 id="org4842bfe">数学</h3>
<div class="outline-text-3" id="text-org4842bfe">
</div>
<div id="outline-container-orga42f37e" class="outline-4">
<h4 id="orga42f37e">高精度</h4>
<div class="outline-text-4" id="text-orga42f37e">
<p>
<code>C++</code> 的数字是有范围的，超过一定大小就会损失精度，这时可以自己模拟数字的计算来实现高精度的数字计算。<br>
可以使用数组保存每一位的数字，然后利用平常计算加减乘除的方法就能解决了，当然这样模拟的程序是非常复杂的。<br>
</p>

<p>
<code>Java</code> 与 <code>Python</code> 都自带有高精度的解决方案<br>
</p>
</div>
</div>
<div id="outline-container-orgc1978a0" class="outline-4">
<h4 id="orgc1978a0">快速幂</h4>
<div class="outline-text-4" id="text-orgc1978a0">
<p>
如何快速计算 \(a^b\) ，普通的做就是使用循环一个一个相乘，这样的时间复杂度为 \(O(b)\) ，可以把 \(a^b=\) 分成三个部分 \(a^{b/2}*a^{b/2}*a\) 如果 <code>b</code> 是偶数则没有最后一个 <code>a</code> ，可以发现有两个相同的数，所以我们可以重复利用 \(a^{b/2}\) ，这样最后的复杂度只有 \(O(log(b))\)<br>
</p>

<div class="org-src-container">
<pre class="src src-C++"><span style="font-weight: bold;">int</span> <span style="font-weight: bold;">pow</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>b == <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">1</span>;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">c</span> = pow<span style="color: #a626a4;">(</span>a, b / <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>b % <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> c * c * a;
  <span style="font-weight: bold;">return</span> c * c;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org117bb41" class="outline-4">
<h4 id="org117bb41">数论</h4>
<div class="outline-text-4" id="text-org117bb41">
<p>
想把数论学好，需要非常好的数学功底，但基础的题目还是非常简单的，只需要记下公式与用法即可。<br>
</p>

<p>
基础的部分有埃氏筛法、最大公约数、最小公倍数、乘法的逆元、同余方程等<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgaf7a75c" class="outline-3">
<h3 id="orgaf7a75c">数据结构</h3>
<div class="outline-text-3" id="text-orgaf7a75c">
<p>
数据结构是为了更好更快的实现特定的算法<br>
</p>
</div>
<div id="outline-container-org12b3168" class="outline-4">
<h4 id="org12b3168">栈</h4>
<div class="outline-text-4" id="text-org12b3168">
<p>
栈是个存储容器，它的数据出入顺序是先入后出，可以自己使用数组模拟，但 <code>stl</code> 有集成。<br>
</p>

<p>
函数的递归调用就是使用栈来实现的。<br>
</p>
</div>
</div>
<div id="outline-container-org44dbbd5" class="outline-4">
<h4 id="org44dbbd5">队列</h4>
<div class="outline-text-4" id="text-org44dbbd5">
<p>
队列也是一个存储窗口，它的出入顺序先入选出，就像是一根管子或者排队打饭。<br>
</p>

<p>
使用这些存储容器是为了解决数组的效率问题，更改数组的元素的复杂度基本都是 \(O(n)\) 的，但对于队列和栈都是 \(O(1)\) 既常数级别的，对于某些特定场景非常的有用，比如约瑟夫问题。<br>
</p>
</div>
</div>
<div id="outline-container-orgd3fd8ed" class="outline-4">
<h4 id="orgd3fd8ed">并查集</h4>
<div class="outline-text-4" id="text-orgd3fd8ed">
<p>
并查集可以查找一个元素是否在一个集合内，并且可以非常快速的合并两个集合<br>
</p>
</div>
</div>
<div id="outline-container-orgb1a8ed1" class="outline-4">
<h4 id="orgb1a8ed1">树状数组</h4>
<div class="outline-text-4" id="text-orgb1a8ed1">
<p>
树状数组是对于前缀和问题的时间和空间上的一个平衡，单纯的前缀和需要 \(O(1)\) 的时间和 \(O(n)\) 的空间，使用树状数组保存前缀和可以做到 \(O(log(n))\) 的时空复杂度。<br>
</p>

<p>
而前缀和可以在常数时间内算出连续范围的内的和，用处非常广泛。<br>
</p>
</div>
</div>
<div id="outline-container-org4d89c59" class="outline-4">
<h4 id="org4d89c59">线段树</h4>
<div class="outline-text-4" id="text-org4d89c59">
<p>
线段树是树状数组的升级，线段树不止支持区间和，还支持单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作，并且时间复杂度都是 \(O(log(N))\) 。<br>
</p>

<p>
作为代价，线段树的实现非常的复杂，有许多边界条件需要记忆与解决，一不小心就会写错。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgab05511" class="outline-3">
<h3 id="orgab05511">图论</h3>
<div class="outline-text-3" id="text-orgab05511">
</div>
<div id="outline-container-org7f04492" class="outline-4">
<h4 id="org7f04492">最短路</h4>
<div class="outline-text-4" id="text-org7f04492">
<p>
最短路就是给定一个图，计算两个结点之间的最短路径。<br>
</p>

<p>
相应的算法主要有 <code>Floyd</code> 、 <code>Bellman-Ford</code> 、 <code>Dijkstra</code> 、 <code>Johnson</code> 等。<br>
</p>

<p>
每种算法都有各自的优点与适用的题型，最好都钻研清楚。<br>
</p>
</div>
</div>
<div id="outline-container-org1efb23c" class="outline-4">
<h4 id="org1efb23c">最小生成树</h4>
<div class="outline-text-4" id="text-org1efb23c">
<p>
最小生成树是在图上找到一棵子树连接全部节点并且使得边权和最小。<br>
</p>

<p>
在现实中的计算机网络上，路由器就使用了这个算法。<br>
</p>

<p>
主要有 <code>Kruskal</code> 与 <code>Prim</code> 算法，应用了贪心的想法，并且 <code>Kruskal</code> 需要使用并查集来处理。<br>
</p>
</div>
</div>
<div id="outline-container-orgaaa2b6d" class="outline-4">
<h4 id="orgaaa2b6d">拓扑排序</h4>
<div class="outline-text-4" id="text-orgaaa2b6d">
<p>
拓扑排序的目标是将所有节点排序，使得排在前面的节点不能依赖于排在后面的节点。<br>
</p>

<p>
每次在图上找到一个没有其它节点依赖的节点，移除它和它所有的边，重复这个操作即可。<br>
</p>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-algorithm.html">algorithm</a> </div>]]></description>
  <category><![CDATA[algorithm]]></category>
  <link>https://lampze.github.io/intro-basic-algorithm.html</link>
  <pubDate>Fri, 08 Jan 2021 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[超星是如何统计学习情况的]]></title>
  <description><![CDATA[

<div id="outline-container-org80c391a" class="outline-2">
<h2 id="org80c391a">前言</h2>
<div class="outline-text-2" id="text-org80c391a">
<p>
写这篇文章当然是因为最近我有一门网课需要刷平时分，这门课的视频个数又不多，还多个视频合在一个网页上，最后又要求我们有几百次的学习次数，然后还要求我们有2个小时的阅读时长，但读物加起来顶多只有一两百页，超星的阅读统计又有些问题。为了给后人避坑，我就把摸索出来的一些经验分享出来。<br>
</p>

<p>
如果你的网课只需要看视频的话就不用往下看了，网上对于这种方法的解决方案有很多，简单的就是在手机上自己刷。<br>
</p>

<p>
代码的使用方法不给出，请自行钻研，直接在控制台使用是不行的，需要在页面打开时就注入代码，实现这个功能的插件网上有很详细的教程。<br>
</p>
</div>
</div>

<div id="outline-container-org7dd6251" class="outline-2">
<h2 id="org7dd6251">章节学习次数</h2>
<div class="outline-text-2" id="text-org7dd6251">
</div>
<div id="outline-container-orgcb5552f" class="outline-3">
<h3 id="orgcb5552f">统计方法</h3>
<div class="outline-text-3" id="text-orgcb5552f">
<p>
每打开一个视频页面等上一小会，学习次数就会增加，尚不知不滚动会不会有不良影响<br>
</p>
</div>
</div>
<div id="outline-container-orgb0f5640" class="outline-3">
<h3 id="orgb0f5640">刷分方法</h3>
<div class="outline-text-3" id="text-orgb0f5640">
<p>
只需要对一个页面不停刷新即可<br>
</p>
</div>
</div>
<div id="outline-container-orgf5072ba" class="outline-3">
<h3 id="orgf5072ba">代码实现</h3>
<div class="outline-text-3" id="text-orgf5072ba">
<div class="org-src-container">
<pre class="src src-js"><span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25105;&#23545;&#20110;&#22823;&#37096;&#20998;&#25805;&#20316;&#21152;&#20837;&#20102;&#38543;&#26426;&#25968;</span>
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36991;&#20813;&#21487;&#33021;&#30340;&#21518;&#21488;&#26816;&#27979;</span>
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#19968;&#23450;&#26102;&#38388;&#21518;&#21047;&#26032;&#26412;&#32593;&#39029;</span>
setTimeout(() =&gt; location.reload(), <span style="color: #8a3b3c; font-weight: bold;">1000</span> * Math.random() * <span style="color: #8a3b3c; font-weight: bold;">20</span>);
<span style="font-weight: bold;">let</span> <span style="color: #383a42;">now</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36825;&#26159;&#28378;&#21160;&#24403;&#21069;&#39029;&#38754;&#65292;&#20063;&#26159;&#36991;&#20813;&#19981;&#33391;&#24433;&#21709;</span>
setInterval(() =&gt; window.scroll(<span style="color: #8a3b3c; font-weight: bold;">0</span>, (now = now + Math.random() * <span style="color: #8a3b3c; font-weight: bold;">10</span>)), <span style="color: #8a3b3c; font-weight: bold;">50</span>);
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org6451b89" class="outline-2">
<h2 id="org6451b89">阅读</h2>
<div class="outline-text-2" id="text-org6451b89">
</div>
<div id="outline-container-org9d83556" class="outline-3">
<h3 id="org9d83556">统计方法</h3>
<div class="outline-text-3" id="text-org9d83556">
<p>
经过测试，在网页上滚动具体阅读资料的区域刷分效果不好，我测试时第二天只增加了几分钟的阅读时长，所以只能滚动全局的页面<br>
在刷分时我还注意到一个问题，单个页面可能有分值上限，所以我又改进了刷分方式<br>
</p>
</div>
</div>
<div id="outline-container-org7ea2f46" class="outline-3">
<h3 id="org7ea2f46">刷分方法</h3>
<div class="outline-text-3" id="text-org7ea2f46">
<p>
打开阅读界面，不停向下滚动到底，到底后随机打开一个阅读页面，继续上续操作<br>
</p>
</div>
</div>
<div id="outline-container-org0ce2bff" class="outline-3">
<h3 id="org0ce2bff">代码实现</h3>
<div class="outline-text-3" id="text-org0ce2bff">
<div class="org-src-container">
<pre class="src src-js"><span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#33719;&#21462;&#38543;&#26426;&#38405;&#35835;&#39029;&#38754;</span>
<span style="font-weight: bold;">function</span> <span style="font-weight: bold;">randu</span>() {
  <span style="font-weight: bold;">let</span> <span style="color: #383a42;">arr</span> = [];
  document
    .querySelectorAll(<span style="color: #8a3b3c;">".mt10 .mb15 a"</span>)
    .forEach((dom) =&gt; arr.push(dom.href));
  <span style="font-weight: bold;">return</span> arr[Math.floor(Math.random() * arr.length)];
}
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21521;&#19979;&#28378;&#21160;&#30452;&#21040;&#24213;</span>
<span style="font-weight: bold;">let</span> <span style="color: #383a42;">now</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
setInterval(() =&gt; {
  window.scroll(<span style="color: #8a3b3c; font-weight: bold;">0</span>, (now += Math.random()));
  <span style="font-weight: bold;">if</span> (now - <span style="color: #8a3b3c; font-weight: bold;">1</span> &gt; window.scrollY)
    setTimeout(() =&gt; (location.href = randu()), <span style="color: #8a3b3c; font-weight: bold;">1000</span> * Math.random());
}, <span style="color: #8a3b3c; font-weight: bold;">40</span>);
</pre>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-超星.html">超星</a> </div>]]></description>
  <category><![CDATA[超星]]></category>
  <link>https://lampze.github.io/chaoxing-statistics.html</link>
  <pubDate>Wed, 06 Jan 2021 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[C/C++简明教程]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0ca2331">前言</a></li>
<li><a href="#orga4496a8">C语言</a>
<ul>
<li><a href="#org7b0f7ff">编程与运行流程</a>
<ul>
<li><a href="#orgdcdf803">写代码</a></li>
<li><a href="#org177359a">编译</a></li>
<li><a href="#org9031dfa">运行过程</a></li>
</ul>
</li>
<li><a href="#org1878336">语法简介</a></li>
<li><a href="#org973b2c2">变量</a>
<ul>
<li><a href="#org59301ae">简介</a></li>
<li><a href="#org779020d">类型</a></li>
<li><a href="#org6254d82">创建</a></li>
<li><a href="#orgd300059">使用</a></li>
</ul>
</li>
<li><a href="#orgd285085">输入输出</a>
<ul>
<li><a href="#orgcb62477">简介</a></li>
<li><a href="#org08d47cf">输出</a></li>
<li><a href="#orgbd592fc">输入</a></li>
</ul>
</li>
<li><a href="#org859e6e8">选择</a>
<ul>
<li><a href="#org17ffed6">简介</a></li>
<li><a href="#org9804d46">if</a></li>
<li><a href="#org792206c">switch</a></li>
<li><a href="#orgcbb9dc9">三元运算符</a></li>
</ul>
</li>
<li><a href="#org43e0d51">循环</a>
<ul>
<li><a href="#orgee7c9b8">简介</a></li>
<li><a href="#orgd8143cf">while</a></li>
<li><a href="#orgda48312">for</a></li>
</ul>
</li>
<li><a href="#orge09719b">数组</a>
<ul>
<li><a href="#orgfa90727">简介</a></li>
<li><a href="#org1453b10">语法</a></li>
<li><a href="#orgffe350c">插入排序</a></li>
</ul>
</li>
<li><a href="#org55c32eb">指针</a>
<ul>
<li><a href="#orgea68118">简介</a></li>
<li><a href="#org3092690">语法</a></li>
<li><a href="#org3d97e9d">用法</a></li>
<li><a href="#org51fb2f9">数组</a></li>
</ul>
</li>
<li><a href="#orgc1b637f">函数</a>
<ul>
<li><a href="#orga2122d6">简介</a></li>
<li><a href="#org4faa907">语法</a></li>
<li><a href="#org3016efa">例子</a></li>
</ul>
</li>
<li><a href="#org0a1f7b0">递归</a>
<ul>
<li><a href="#orga6b3c41">简介</a></li>
<li><a href="#org6098eaa">fib</a></li>
</ul>
</li>
<li><a href="#org4e610c7">结构体</a>
<ul>
<li><a href="#org716630f">简介</a></li>
<li><a href="#org625279b">语法</a></li>
<li><a href="#org053c7f2">结构体指针</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgee68899">C++</a>
<ul>
<li><a href="#orgfb50646">stl</a></li>
<li><a href="#org5008358">输入输出</a>
<ul>
<li><a href="#org5333db7">头文件</a></li>
<li><a href="#org96bcf5c">cin</a></li>
<li><a href="#orgdf3d3fe">cout</a></li>
<li><a href="#org018b0c1">总结</a></li>
</ul>
</li>
<li><a href="#org11673ce">vector</a>
<ul>
<li><a href="#org0f91b02">头文件</a></li>
<li><a href="#org8956a3f">简介</a></li>
<li><a href="#orgf24e818">创建</a></li>
<li><a href="#org1e521f6">使用</a></li>
</ul>
</li>
<li><a href="#orgd4b456a">string</a>
<ul>
<li><a href="#org108c659">头文件</a></li>
<li><a href="#org4aaf2ae">简介</a></li>
<li><a href="#org91a5395">使用</a></li>
</ul>
</li>
<li><a href="#org8e7f06f">queue</a>
<ul>
<li><a href="#org59a98ee">头文件</a></li>
<li><a href="#org0f85b0f">简介</a></li>
<li><a href="#org1822aa4">使用</a></li>
</ul>
</li>
<li><a href="#org2850884">stack</a>
<ul>
<li><a href="#orgdd0efa6">头文件</a></li>
<li><a href="#org3c37bbf">简介</a></li>
<li><a href="#orga91ccc8">使用</a></li>
</ul>
</li>
<li><a href="#orgd0fb5e7">set</a>
<ul>
<li><a href="#orgd04a227">头文件</a></li>
<li><a href="#org7f40d0f">简介</a></li>
<li><a href="#org339d3e1">使用</a></li>
</ul>
</li>
<li><a href="#org184e887">map</a>
<ul>
<li><a href="#org394cd0a">头文件</a></li>
<li><a href="#orgdafb0c5">简介</a></li>
<li><a href="#org22fea5b">使用</a></li>
</ul>
</li>
<li><a href="#orge4c2b97">sort</a>
<ul>
<li><a href="#orgb313176">头文件</a></li>
<li><a href="#org6509035">简介</a></li>
<li><a href="#org0d6876e">用法</a></li>
</ul>
</li>
<li><a href="#org7438c15">next_permutation</a>
<ul>
<li><a href="#org082e0b4">头文件</a></li>
<li><a href="#org5e036ef">简介</a></li>
<li><a href="#org8fa7509">使用方法</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org239f4a1">结语</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org0ca2331" class="outline-2">
<h2 id="org0ca2331">前言</h2>
<div class="outline-text-2" id="text-org0ca2331">
<p>
编程语言是让我们使用一个大部分人能理解的方式控制计算机，所以写代码时最重要的是可读性，对自己要求高的同学可以思考怎么保持代码的整洁与优雅。<br>
</p>

<p>
本文不会把每种表都列出来（如优先级、关键字等），这些网上或课本上都有，请自行翻阅，本书仅仅是讲清原理与我自己理解的逻辑。<br>
</p>

<p>
本文只把基础的逻辑与用法讲清楚，最后可能会附带几个例题，想要真正的学会编程还是要多写代码。<br>
</p>

<p>
如果对更加细节的部分感兴趣，可以看看这些：<a href="https://www.runoob.com/cprogramming/c-tutorial.html">C 语言教程</a>、<a href="https://github.com/jobbole/awesome-c-cn">awesome-c-cn</a><br>
</p>

<p>
最后请看看这篇文章《<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">提问的智慧</a>》，问问题时请按照这上面做。<br>
</p>
</div>
</div>

<div id="outline-container-orga4496a8" class="outline-2">
<h2 id="orga4496a8">C语言</h2>
<div class="outline-text-2" id="text-orga4496a8">
</div>
<div id="outline-container-org7b0f7ff" class="outline-3">
<h3 id="org7b0f7ff">编程与运行流程</h3>
<div class="outline-text-3" id="text-org7b0f7ff">
</div>
<div id="outline-container-orgdcdf803" class="outline-4">
<h4 id="orgdcdf803">写代码</h4>
<div class="outline-text-4" id="text-orgdcdf803">
<p>
对于 <code>windows</code> 来说，我推荐新手使用 <code>Dev-C++</code> 这个 <code>IDE</code> 来编写代码，这个软件虽然有些年头了，也很长时间没有更新了，但作为一个编程集成环境还是及格的，具体的操作还是比较简单，很多事情都能一键完成。<br>
对于参加蓝桥杯的同学， <code>Dev-C++</code> 也是官方指定的编程环境。<br>
请不要使用 <code>vc++</code> ！！！<br>
</p>

<p>
对于 <code>Linux</code> 来说，新手可以使用 <code>nano</code> 来编写代码，有基础的同学可以学下 <code>vim</code> ，进阶的话可以玩玩 <code>Emacs</code> 。<br>
</p>
</div>
</div>
<div id="outline-container-org177359a" class="outline-4">
<h4 id="org177359a">编译</h4>
<div class="outline-text-4" id="text-org177359a">
<p>
对于 <code>IDE</code> 来说只需要按下按钮就能自动的编译了，没有什么需要动脑的地方。<br>
</p>

<p>
当然我们不能这样就行了，下面简单介绍下编译是什么。我们写的代码其实都是文本文件，计算机并不认识，计算机只能处理2进制的指令，也就是机器语言，每种 <code>CPU</code> 的机器语言都是不一样的，所以我们需要把我们认识的代码转换成计算机认识机器代码，这个过程叫做编译。<br>
</p>

<p>
目前使用最广的编译器是 <code>gcc</code> ， <code>Dev-C++</code> 也是使用的这个编译器，安装 <code>gcc</code> 后可以在命令行使用 <code>gcc</code> 命令，这个命令给定一个源代码文件，然后输出一个二进制文件，然后计算机就能执行这个二进制文件了。<br>
</p>
</div>
</div>
<div id="outline-container-org9031dfa" class="outline-4">
<h4 id="org9031dfa">运行过程</h4>
<div class="outline-text-4" id="text-org9031dfa">
<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"Hello, World\n"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
对于 <code>C</code> 来说，它运行时总会从 <code>main</code> 函数开始，只要 <code>main</code> 函数结束整个程序就结束了。对于上面这个代码来说，它输出了一行 <code>Hello，World</code> 文本，并返回了0。需要注意这个0是返回给了操作系统，作用只有一个，就是告诉操作系统这个程序运行过程是否有错误，0表示没有错误。<br>
</p>

<p>
注意 <code>main</code> 只是第一个执行的函数，定义语句、引入库函数语句、宏语句等肯定是要优先执行的。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-org1878336" class="outline-3">
<h3 id="org1878336">语法简介</h3>
<div class="outline-text-3" id="text-org1878336">
<p>
我们从简单的语句开始，语句由表达式组成，一条语句必须有一个分号当作结尾，比如 <code>1+1;</code> 就是一条语句。这条语句中的 <code>+</code> 是 <code>C</code> 自带的一些操作符，数学上常用的运算符都有。这里需要强调一下 <code>=</code> 是赋值运算符，比如 <code>a=b;</code> 的意思就是把a的值设置成b的值，也即对等号右边的表达式进行求值，然后把返回值赋值给左边。变量可以简单理解为一个箱子，箱子可以放置或取出数据。<br>
</p>

<p>
下面讲解表达式，每个表达式都有返回值，同一时刻只能运算一个操作。对于 <code>1+1+1</code> 这个表达式，它的求值过程是这样的：<br>
</p>
<ol class="org-ol">
<li>先运算第一个 <code>1+1</code> ，它的返回值是 <code>2</code><br></li>
<li>表达式变成 <code>2+1</code><br></li>
<li>得出返回值 <code>3</code><br></li>
</ol>

<p>
记住分辩操作是跟根据操作符来的，有些操作符是需要两边都有数据，有些只需要一个，并且每个操作符都有优先级的，计算机会优先执行优先级高的操作，优先级一般来说符合直觉<br>
如果是同级的操作，根据操作符的类型来判定是从左到右还是从右到左。<br>
如果记不住执行的顺序，可以简单的使用括号把你想要独立执行的操作括起来，括号内的会优先执行。<br>
比如 <code>(1 + 2) * 3</code> -&gt; <code>(3) * 3</code> -&gt; <code>3 * 3</code> -&gt; <code>9</code><br>
</p>

<p>
这样就是最基本的 <code>C</code> 语法，更加复杂的语法在后面讲解。<br>
</p>
</div>
</div>
<div id="outline-container-org973b2c2" class="outline-3">
<h3 id="org973b2c2">变量</h3>
<div class="outline-text-3" id="text-org973b2c2">
</div>
<div id="outline-container-org59301ae" class="outline-4">
<h4 id="org59301ae">简介</h4>
<div class="outline-text-4" id="text-org59301ae">
<p>
变量可以理解成一个箱子，我们可以把一些东西放到箱子，也可以从箱子内把东西取出来。<br>
类型的作用只是为每个箱子打上了标签，规定了箱子内不能随便放东西，比如一个放水果的箱子就不能把水倒进去。<br>
</p>
</div>
</div>
<div id="outline-container-org779020d" class="outline-4">
<h4 id="org779020d">类型</h4>
<div class="outline-text-4" id="text-org779020d">
<p>
<code>C</code> 是一个强类型的语言，它的意思就是每个数据都有类型，不同类型的数据不能随便使用，比如一个整数类型的变量就不能放入一个小数数据。<br>
</p>

<p>
<code>C</code> 里有三种简单常用的类型：整数、小数、字符；<br>
</p>

<p>
我们需要记下这些类型的名称<br>
整数有： <code>short</code> 、 <code>int</code> 、 <code>long</code> 、 <code>long long</code><br>
小数有： <code>float</code> 、 <code>doubel</code><br>
字符有： <code>char</code><br>
</p>

<p>
这些不同的类型之间的区别只是它们用来存储数据的空间大小，比如 <code>short</code> 只用2个字节存储整数。<br>
对于初学者只需要记下 <code>int</code> 、 <code>float</code>  、 <code>char</code> 就行了。<br>
</p>
</div>
</div>

<div id="outline-container-org6254d82" class="outline-4">
<h4 id="org6254d82">创建</h4>
<div class="outline-text-4" id="text-org6254d82">
<p>
创建一个变量需要使用变量声明语句，大概是这种形式 <code>&lt;变量类型&gt; &lt;变量名&gt;;</code> ，举个例子 <code>int a;</code> 这样就创建了一个 <code>int</code> 类型的变量 <code>a</code> 。<br>
</p>

<p>
如果使用这种形式 <code>&lt;变量类型&gt; &lt;变量名&gt; = &lt;表达式&gt;;</code> 的语句声明变量的话，就会给这个变量一个初始值，比如 <code>float pi = 3.1415926;</code> 就定义了一个 <code>float</code> 类型的变量 <code>pi</code> ，它的初始值为 <code>3.1415926</code> 。<br>
</p>

<p>
注意一点，变量名不能与 <code>C</code> 的关键字重名，已经使用过的名字不能重复定义。<br>
</p>
</div>
</div>
<div id="outline-container-orgd300059" class="outline-4">
<h4 id="orgd300059">使用</h4>
<div class="outline-text-4" id="text-orgd300059">
<p>
在表达式内，我们可以把变量当作一个求值操作，这个操作的返回值为变量内的值，比如 <code>int a = 1;</code> 后 <code>a</code> 这个表示式的值就为 <code>1</code> ， <code>(a + 1) * a</code> -&gt; <code>(1 + 1) * a</code> -&gt; <code>2 * a</code> -&gt; <code>2 * 1</code> -&gt; <code>2</code> 。<br>
</p>

<p>
对于变量我们还可以对它使用赋值运算符，比如 <code>=</code> 、 <code>++</code> 、 <code>--</code> <br>
<code>=</code> 就是简单的把等号右边的表示式求值，放到等号左边的变量内<br>
<code>++</code> 是把变量内的值加上1，然后放到变量内<br>
<code>--</code> 是把变量内的值减去1，然后放入变量内<br>
</p>

<p>
赋值运算也是一个表示式，这意味着它也会返回一个值<br>
比如 <code>1 + (a = 3)</code> -&gt; <code>1 + 3</code> -&gt; <code>4</code><br>
需要注意这个表示式会有一个副作用，它把 <code>a</code> 的值改变成 <code>3</code> 了<br>
</p>

<p>
后面两个运算符有些许的复杂<br>
<code>a++</code> 的返回值是 <code>a</code><br>
<code>++a</code> 的返回值是 <code>a+1</code><br>
<code>a--</code> 的返回值是 <code>a--</code><br>
<code>--a</code> 的返回值是 <code>a-1</code><br>
注意，虽然返回值不一样，但这个变量的值都改变了，也即是一个副作用<br>
</p>

<p>
下面举些例子 <code>int a = 1;</code><br>
<code>1 + a++</code> -&gt; <code>1 + 1</code> -&gt; <code>2</code><br>
<code>a</code> -&gt; <code>2</code><br>
<code>1 + (++a)</code> -&gt; <code>1 + 3</code> -&gt; <code>4</code><br>
<code>a</code> -&gt; <code>3</code><br>
<code>1 + a--</code> -&gt; <code>1 + 3</code> -&gt; <code>4</code><br>
<code>a</code> -&gt; <code>2</code><br>
<code>1 + (--a)</code> -&gt; <code>1 + 1</code> -&gt; <code>2</code><br>
<code>a</code> -&gt; <code>1</code><br>
</p>

<p>
变量不能放入不同类型的数据，但把小数放到整数的盒子里肯定是常见的操作，这种不同类型的数据之间的操作 <code>C</code> 是支持。 <code>C</code> 会对不同类型的数据自动进行类型转换，转换的规则是尽量减少信息的流失，比如 <code>short</code> 和 <code>int</code> 类型的数据运算，返回的结果是 <code>int</code> 类型的数据。小数转换成整数会直接把小数部分去掉，并不会四舍五入。<br>
对于赋值运行也是相同的道理<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgd285085" class="outline-3">
<h3 id="orgd285085">输入输出</h3>
<div class="outline-text-3" id="text-orgd285085">
</div>
<div id="outline-container-orgcb62477" class="outline-4">
<h4 id="orgcb62477">简介</h4>
<div class="outline-text-4" id="text-orgcb62477">
<p>
我们写一个程序，一般都是面向用户的，作为人类我们肯定是需要获取和输入一些信息，一个无法干涉无法感知的东西我们是不能使用的。<br>
</p>

<p>
下面我就介绍下 <code>C</code> 里的标准输入输出，标准输入输出可以理解成通用的接口，一般情况下我们都可以使用这个接口来输入输出信息。<br>
一般情况输入输出都是文本的形式。<br>
</p>

<p>
需要注意 <code>C</code> 默认不包含输入输出的功能，我们需要引入这些功能， <code>stdio.h</code> 这个头文件包含了我们需要的功能，使用 <code>#include &lt;stdio.h&gt;</code> 这个命令我们可以引入它。<br>
可以简单的把这个命令理解成把 <code>stdio.h</code> 这个文件里的内容放到我们程序的最前面。<br>
</p>

<p>
函数也可以理解成一个魔法盒子，它可以放入一些数据，然后扔出一些数据。<br>
</p>
</div>
</div>

<div id="outline-container-org08d47cf" class="outline-4">
<h4 id="org08d47cf">输出</h4>
<div class="outline-text-4" id="text-org08d47cf">
</div>
<ul class="org-ul">
<li><a id="org76a959b"></a>putchar<br>
<div class="outline-text-5" id="text-org76a959b">
<p>
这个函数很容易理解，传入一个字符，并把它输出， <code>c</code> 可以使用 <code>''</code> 包裹一个字符来表示一个字符常量，如果 <code>''</code> 内有多个字符就会报错。<br>
</p>

<p>
<code>putchar('a')</code> 语句输出 <code>a</code> 到标准输出。<br>
</p>
</div>
</li>
<li><a id="org362aeea"></a>puts<br>
<div class="outline-text-5" id="text-org362aeea">
<p>
同理这个函数也是传入一个字符串，并输出它，与字符的表示方式相似，我们使用 <code>""</code> 包裹多个字符来表示字符串变量。<br>
</p>

<p>
比如 <code>puts("Hello")</code> 语句就会输出 <code>Hello</code> 到标准输出。<br>
</p>
</div>
</li>
<li><a id="orgd40bd57"></a>printf<br>
<div class="outline-text-5" id="text-orgd40bd57">
<p>
格式化输出一串字符，它接收任意多个参数，第一个参数是一个字符串，并把它作为模板，里面可以放一些标识来表示需要把标识替换成我们想要的数据，后面的参数填入表达式，函数会按顺序把它们一个个填入模板字符串中。<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#35821;&#21477;&#21518;&#38754;&#30340;&#27880;&#37322;&#37324;&#25918;&#36755;&#20986;&#30340;&#20869;&#23481;</span><span style="color: #556b2f;"> */</span>
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">\n&#26159;&#36716;&#20041;&#23383;&#31526;&#65292;&#34920;&#31034;&#25442;&#34892;&#65292;&#22240;&#20026;&#26377;&#20123;&#23383;&#31526;&#19981;&#21487;&#36755;&#20837;</span><span style="color: #556b2f;"> */</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d is a number\n"</span>, <span style="color: #8a3b3c; font-weight: bold;">123</span><span style="color: #a626a4;">)</span>; <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">123 is a number</span><span style="color: #556b2f;"> */</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%s is a string, and i like %c"</span>, <span style="color: #8a3b3c;">"haha"</span>, <span style="color: #8a3b3c;">'a'</span><span style="color: #a626a4;">)</span>;<span style="color: #556b2f;">/* </span><span style="color: #556b2f;">haha is a string, and i like a</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-orgbd592fc" class="outline-4">
<h4 id="orgbd592fc">输入</h4>
<div class="outline-text-4" id="text-orgbd592fc">
</div>
<ul class="org-ul">
<li><a id="org1c078e0"></a>getchar<br>
<div class="outline-text-5" id="text-org1c078e0">
<p>
这个函数从标准输入读入一个字符然后返回，比如 <code>char c = getchar();</code> 这条语句就会从输入流获取一个字符，并赋值给变量 <code>c</code> 。<br>
</p>

<p>
<code>getchar</code> 只从输入拿下一个字符，所有的字符都可以拿下来，包括空白字符（空格、回车等等）<br>
</p>
</div>
</li>
<li><a id="org407b224"></a>gets<br>
<div class="outline-text-5" id="text-org407b224">
<p>
这个函数从标准输入读取一行字符，并把这一行填入一个字符数组。<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">char</span> <span style="color: #383a42;">s</span><span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">100</span><span style="color: #a626a4;">]</span>;  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#23383;&#31526;&#20018;&#21487;&#20197;&#29702;&#35299;&#25104;&#22810;&#20010;&#23383;&#31526;&#65292;&#25152;&#20197;c&#37324;&#38754;&#20351;&#29992;&#25968;&#32452;&#26469;&#34920;&#31034;&#23383;&#31526;&#20018;</span><span style="color: #556b2f;"> */</span>
  gets<span style="color: #a626a4;">(</span>s<span style="color: #a626a4;">)</span>;      <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#19982;&#19978;&#38754;&#30340;getchar&#19981;&#21516;&#65292;&#23427;&#19981;&#20250;&#36820;&#22238;&#19968;&#20010;&#20540;</span><span style="color: #556b2f;"> */</span>
  puts<span style="color: #a626a4;">(</span>s<span style="color: #a626a4;">)</span>;      <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20986;&#19968;&#20010;&#23383;&#31526;&#20018;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
请注意一行末尾的回车不会被填入字符数组。<br>
</p>
</div>
</li>
<li><a id="orgf37d3ee"></a>scanf<br>
<div class="outline-text-5" id="text-orgf37d3ee">
<p>
这个函数就可以支持多种形式格式的输入了，与上面的 <code>printf</code> 有相同的控制符。<br>
需要注意一点， <code>scanf</code> 填写变量的位置需要提供一个指针，获取变量指针的方法是使用 <code>&amp;</code> 运算符。<br>
使用 <code>%c</code> 时和 <code>getchar</code> 一样会读取空白字符<br>
使用 <code>%s</code> 时只要遇到一个空白字符就会停止<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>;
  <span style="font-weight: bold;">char</span> <span style="color: #383a42;">s</span><span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">100</span><span style="color: #a626a4;">]</span>;
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">n&#26159;&#19968;&#20010;&#21464;&#37327;&#38656;&#35201;&#20351;&#29992; &amp; &#33719;&#21462;&#23427;&#30340;&#25351;&#38024;</span>
<span style="color: #556b2f;">   * &#32780;&#25968;&#32452;&#21517;&#23601;&#26159;&#19968;&#20010;&#25351;&#38024;</span><span style="color: #556b2f;"> */</span>
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %s"</span>, &amp;n, s<span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %s\n"</span>, n, s<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-org859e6e8" class="outline-3">
<h3 id="org859e6e8">选择</h3>
<div class="outline-text-3" id="text-org859e6e8">
</div>
<div id="outline-container-org17ffed6" class="outline-4">
<h4 id="org17ffed6">简介</h4>
<div class="outline-text-4" id="text-org17ffed6">
<p>
选择结构的出现打破了我之前讲述的简洁明了的语法，我们需要重新学习一些额外的情况，所幸这种新结构并不复杂。<br>
</p>

<p>
选择结构有三种表达方式， <code>if</code> 、 <code>switch</code> 、 <code>三元运算符</code><br>
前面两种方式可以相互转换，而最后一种出现的目的是减少代码行数，同时也加重了我们理解程序的负担。<br>
</p>

<p>
需要注意一点，在选择结构内如果执行了 <code>break</code> 会直接结束当前的选择结构。<br>
</p>
</div>
</div>
<div id="outline-container-org9804d46" class="outline-4">
<h4 id="org9804d46">if</h4>
<div class="outline-text-4" id="text-org9804d46">
<p>
它的语法大概是这样 <code>if (表达式) { 代码块 }</code><br>
简单来说如果对表达式求值的结果为真，就执行使用 <code>{}</code> 包裹的代码块<br>
<code>c</code> 里面使用 <code>0</code> 表示假，而其它的任何值都为真<br>
所谓代码块就是任意行语句<br>
</p>

<p>
如果需要执行的语句只有一行可以使用 <code>if (表达式-判断) 表达式-执行;</code> 的形式，表达式可以不写。<br>
</p>

<p>
如果我们还要对表达式为假的情况做些操作，并不用再写一个 <code>if</code> ，可以使用下述方式<br>
<code>if (表达式) {为真时执行} else {为假时执行}</code><br>
同理，只有一条语句时可以省略 <code>{}</code><br>
下面看一个例子<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span> = <span style="color: #8a3b3c; font-weight: bold;">10</span>;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>a &lt; <span style="color: #8a3b3c; font-weight: bold;">20</span><span style="color: #a626a4;">)</span>
    puts<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"a &lt; 20\n"</span><span style="color: #a626a4;">)</span>;

  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>a &gt; <span style="color: #8a3b3c; font-weight: bold;">100</span><span style="color: #a626a4;">)</span>
    puts<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"a &gt; 100"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">else</span>
    puts<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"a &lt;= 100"</span><span style="color: #a626a4;">)</span>;

  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>a &gt; <span style="color: #8a3b3c; font-weight: bold;">10</span><span style="color: #a626a4;">)</span>
    puts<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"a &gt; 10\n"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">else</span> <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>a &lt; <span style="color: #8a3b3c; font-weight: bold;">10</span><span style="color: #a626a4;">)</span>
    puts<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"a &lt; 10\n"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">else</span>
    puts<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"a == 10\n"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org792206c" class="outline-4">
<h4 id="org792206c">switch</h4>
<div class="outline-text-4" id="text-org792206c">
<p>
<code>switch</code> 的语法比较复杂，简单来说它会把你给予的一个整数与 <code>case</code> 语句从上到下一一比对<br>
如果跟 <code>case</code> 语句后面的值相等，就执行 <code>case</code> 对应的代码块<br>
<code>default</code> 表示没有一个 <code>case</code> 语句匹配时的情况<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">switch</span><span style="color: #a626a4;">(</span><span style="color: #8a3b3c; font-weight: bold;">10</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">case</span> <span style="color: #8a3b3c; font-weight: bold;">10</span>:
      puts<span style="color: #556b2f;">(</span><span style="color: #8a3b3c;">"10"</span><span style="color: #556b2f;">)</span>;
    <span style="font-weight: bold;">case</span> <span style="color: #8a3b3c; font-weight: bold;">9</span>:
      puts<span style="color: #556b2f;">(</span><span style="color: #8a3b3c;">"9"</span><span style="color: #556b2f;">)</span>;
    <span style="font-weight: bold;">default</span>:
      puts<span style="color: #556b2f;">(</span><span style="color: #8a3b3c;">"not match"</span><span style="color: #556b2f;">)</span>;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
需要注意，有匹配项后它会忽略当前 <code>case</code> 后面的所有 <code>case</code> 条件，即它会执行匹配 <code>case</code> 后面的所有语句，直到 <code>switch</code> 结构结束。<br>
所以我们一般对于每个 <code>case</code> 都会在它的结尾加上 <code>break</code><br>
</p>
</div>
</div>
<div id="outline-container-orgcbb9dc9" class="outline-4">
<h4 id="orgcbb9dc9">三元运算符</h4>
<div class="outline-text-4" id="text-orgcbb9dc9">
<p>
它的语法比较简单 <code>条件?表达式1:表达式2</code><br>
对这个三元运算表达式求值时，如果条件为真就执行并返回表达式1的值，否则执行并返回表达式2的值<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="color: #383a42;">b</span>;
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %d"</span>, &amp;a, &amp;b<span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"the max number is:%d\n"</span>, a &gt; b ? a : b<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org43e0d51" class="outline-3">
<h3 id="org43e0d51">循环</h3>
<div class="outline-text-3" id="text-org43e0d51">
</div>
<div id="outline-container-orgee7c9b8" class="outline-4">
<h4 id="orgee7c9b8">简介</h4>
<div class="outline-text-4" id="text-orgee7c9b8">
<p>
我们继续来破坏 <code>c</code> 的简单性，这次介绍循环结构<br>
有两种方式来描述一个循环结构 <code>while</code> 、 <code>for</code><br>
</p>
</div>
</div>
<div id="outline-container-orgd8143cf" class="outline-4">
<h4 id="orgd8143cf">while</h4>
<div class="outline-text-4" id="text-orgd8143cf">
<p>
语法为 <code>while(条件) {代码块}</code><br>
与 <code>if</code> 的结构相似，与 <code>if</code> 不同的地方在于， <code>while</code> 会在代码块执行结束后重复检查条件，如果条件还是为真就继续执行代码块<br>
简单来说就是执行代码块直到条件为假。<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span> = <span style="color: #8a3b3c; font-weight: bold;">10</span>, <span style="color: #383a42;">sum</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span>a &gt; <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    sum += a;
    a--;
  <span style="color: #a626a4;">}</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d\n"</span>, sum<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
<code>while</code> 还有一种变形 <code>do while</code> ，它的语法为<br>
<code>do {代码块} while(条件);</code><br>
与 <code>while</code> 的差别就是它一定会执行一次代码块<br>
</p>
</div>
</div>
<div id="outline-container-orgda48312" class="outline-4">
<h4 id="orgda48312">for</h4>
<div class="outline-text-4" id="text-orgda48312">
<p>
语法为： <code>for (初始化;条件;副作用){代码块}</code><br>
<code>for</code> 可以转换成 <code>while</code> 的形式<br>
<code>初始化;while(条件){代码块;副作用;}</code><br>
初始化部分会在代码块之前执行，并且只执行一次<br>
每次条件为真时会执行代码块<br>
而副作用部分会在每次代码块结束后执行<br>
</p>

<p>
<code>for</code> 可以理解成 <code>while</code> 的严格模式，它让你把一些容易忘记写的部分先写好，尽量避免出错的可能性，比如写 <code>while</code> 语句时有人可能就忘记在末尾加上递增语句了。<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span> = <span style="color: #8a3b3c; font-weight: bold;">10</span>, <span style="color: #383a42;">sum</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>a = <span style="color: #8a3b3c; font-weight: bold;">10</span>; a &gt; <span style="color: #8a3b3c; font-weight: bold;">0</span>; a--<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    sum += a;
  <span style="color: #a626a4;">}</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d\n"</span>, sum<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orge09719b" class="outline-3">
<h3 id="orge09719b">数组</h3>
<div class="outline-text-3" id="text-orge09719b">
</div>
<div id="outline-container-orgfa90727" class="outline-4">
<h4 id="orgfa90727">简介</h4>
<div class="outline-text-4" id="text-orgfa90727">
<p>
数组提供了简单声明多个变量的方法，假设你需要对100个数进行排序，如果采用以往声明变量的方式，你需要写100个变量名，而使用数组就能一行语句生成多个变量。<br>
</p>
</div>
</div>
<div id="outline-container-org1453b10" class="outline-4">
<h4 id="org1453b10">语法</h4>
<div class="outline-text-4" id="text-org1453b10">
<p>
数组的语法非常简单 <code>类型名 数组名[数组大小]</code><br>
类型名和数组名与变量的声明相同，数组与变量的区别只在于后面的那个括号，括号定义了数组里包含多少个元素，使用 <code>数组名[下标]</code> 可以找到任意一个元素，而它的使用方式与普通变量并无区别<br>
声明数组后，数组的大小不可改变，如果下标超过声明的大小，程序可能会发生错误<br>
既然声明后不可改变大小，而一次想好数组大小是一件很头疼的事情，那么可以不可以让数组的大小跟随数据变化呢？<br>
比如我知道了有100个数据，那么我只用开一个长度为100的数组即可<br>
对于 <code>vc++</code> 这些使用低版本编译器的 <code>IDE</code> 来说这是不可行的，因为低版本的编译器 <code>[]</code> 内只能放常量<br>
但如果你使用 <code>Dev-C++</code> 的话就不用但这个问题，它是可以在 <code>[]</code> 内放表达式的<br>
</p>

<p>
注意第一个元素的下标为0<br>
</p>

<p>
我们对于 <code>类型名 数组名[行数][列数]</code> 这种形式的数组称为二维数组，同理我们能够声明任意维度的数组<br>
对于二维数组，使用它时必须填好两个 <code>[]</code> 内的内容，你可以简单画一个表格，这样方便理解<br>
</p>
</div>
</div>
<div id="outline-container-orgffe350c" class="outline-4">
<h4 id="orgffe350c">插入排序</h4>
<div class="outline-text-4" id="text-orgffe350c">
<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">len</span>, <span style="color: #383a42;">i</span>, <span style="color: #383a42;">j</span>;
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d"</span>, &amp;len<span style="color: #a626a4;">)</span>;        <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20837;&#25968;&#32452;&#38271;&#24230;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">arr</span><span style="color: #a626a4;">[</span>len<span style="color: #a626a4;">]</span>;             <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#21160;&#24577;&#23450;&#20041;&#25968;&#32452;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>i = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #a626a4;">)</span> <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20837;&#25968;&#25454;</span><span style="color: #556b2f;"> */</span>
    scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d"</span>, arr + i<span style="color: #a626a4;">)</span>;

  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#20351;&#29992;&#25554;&#20837;&#25490;&#24207;&#65292;&#19979;&#38754;&#20171;&#32461;&#19968;&#19979;&#21407;&#29702;</span>
<span style="color: #556b2f;">   * &#31616;&#21333;&#26469;&#35828;&#23545;&#20110;&#27599;&#20010;i&#65292;&#25214;&#21040;i&#21518;&#38754;&#26368;&#23567;&#30340;&#20803;&#32032;&#65292;&#24182;&#35753;&#23427;&#19982;i&#20301;&#32622;&#30340;&#20803;&#32032;&#20132;&#25442;</span>
<span style="color: #556b2f;">   * &#20063;&#26082;&#20445;&#25345;&#27599;&#20010;i&#19978;&#30340;&#20803;&#32032;&#37117;&#27604;&#20043;&#21518;&#30340;&#20803;&#32032;&#23567;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>i = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>j = i + <span style="color: #8a3b3c; font-weight: bold;">1</span>; j &lt; len; j++<span style="color: #a626a4;">)</span>
      <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> &gt; arr<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
        <span style="font-weight: bold;">int</span> <span style="color: #383a42;">temp</span> = arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span>;
        arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> = arr<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span>;
        arr<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span> = temp;
      <span style="color: #a626a4;">}</span>

  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20986;&#25968;&#25454;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>i = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #a626a4;">)</span>
    printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d "</span>, arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"\n"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org55c32eb" class="outline-3">
<h3 id="org55c32eb">指针</h3>
<div class="outline-text-3" id="text-org55c32eb">
</div>
<div id="outline-container-orgea68118" class="outline-4">
<h4 id="orgea68118">简介</h4>
<div class="outline-text-4" id="text-orgea68118">
<p>
前面我们介绍了变量，变量我把它形容成一个盒子，盒子可以往里面放或拿东西<br>
现在想像一下，我们把所有的盒子都放到地上，按顺序一个一个编号<br>
如果有人想用盒子就标记一下这个盒子被占用了，并自己记下盒子的编号，然后就可以自由使用这个盒子了<br>
这个编号我们就称之为地址，而指针也是一个盒子，但它里面装着的东西只能是地址，也即一个地址类型的变量<br>
或者可以想像成一个里面放着纸条的盒子，纸条上写着一个盒子的地址<br>
</p>
</div>
</div>
<div id="outline-container-org3092690" class="outline-4">
<h4 id="org3092690">语法</h4>
<div class="outline-text-4" id="text-org3092690">
<p>
<code>类型 *指针名</code> 就可以声明一个指针了<br>
需要注意一下 <code>int* a, b</code> 并不会声明指针 <code>a</code> <code>b</code> ，而是声明一个指针 <code>a</code> 与一个变量 <code>b</code><br>
所以写代码时请让 <code>*</code> 挨着指针名<br>
</p>
</div>
</div>
<div id="outline-container-org3d97e9d" class="outline-4">
<h4 id="org3d97e9d">用法</h4>
<div class="outline-text-4" id="text-org3d97e9d">
<p>
指针可以放地址，但是我们怎么获得一个地址呢？<br>
有些同学可能已经想到了，我们之前用 <code>scanf</code> 的时候使用一个操作符 <code>&amp;</code><br>
使用 <code>&amp;变量</code> 的方式，我们就能获得变量的地址了<br>
但我们对指针求值得到的结果是一个地址，那么我们怎么使用指针指向的变量呢？<br>
很简单，我们可以使用 <code>*指针</code> 的方式来找到那个地址<br>
通俗来说，跟着盒子内的纸条找到另一个盒子<br>
<code>*指针</code> 和普通变量的用法是一样的<br>
</p>
</div>
</div>
<div id="outline-container-org51fb2f9" class="outline-4">
<h4 id="org51fb2f9">数组</h4>
<div class="outline-text-4" id="text-org51fb2f9">
<p>
对于数组来说，数组名其实是一个指针，它保存的是数组的起始地址<br>
我们先定义一个数组 <code>int arr[10]</code><br>
我们可以发现 <code>arr[2]</code> 和 <code>*(arr+2)</code> 的效果是一样的，其实 <code>arr[2]</code> 是一个<a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E7%B3%96">语法糖</a><br>
<code>arr+2</code> 的意思就是找到 <code>arr</code> 之后两个位置的地址<br>
需要注意指针会自动识别一个单元格的大小<br>
</p>

<p>
还记得之前我们说过 <code>vc++</code> 不能动态定义数组长度吗？<br>
现在我们通过指针来实现这一功能<br>
首先先引入 <code>stdlib.h</code> 库，我们要使用 <code>malloc</code> 函数，这个函数可以让我们向系统申请内存，也就是和盒子的例子一样，我们登记一个盒子<br>
然后这样 <code>int *arr = (int *)malloc(sizeof(int) * len)</code> 就可以定义一个len长度的数组了<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdlib.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">len</span>, <span style="color: #383a42;">i</span>, <span style="color: #383a42;">j</span>;
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d"</span>, &amp;len<span style="color: #a626a4;">)</span>;                           <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20837;&#25968;&#32452;&#38271;&#24230;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">int</span> *<span style="color: #383a42;">arr</span> = <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> *<span style="color: #a626a4;">)</span>malloc<span style="color: #a626a4;">(</span><span style="font-weight: bold;">sizeof</span><span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span><span style="color: #556b2f;">)</span> * len<span style="color: #a626a4;">)</span>; <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#21160;&#24577;&#23450;&#20041;&#25968;&#32452;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>i = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #a626a4;">)</span>                    <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20837;&#25968;&#25454;</span><span style="color: #556b2f;"> */</span>
    scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d"</span>, arr + i<span style="color: #a626a4;">)</span>;

  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#20351;&#29992;&#25554;&#20837;&#25490;&#24207;&#65292;&#19979;&#38754;&#20171;&#32461;&#19968;&#19979;&#21407;&#29702;</span>
<span style="color: #556b2f;">   * &#31616;&#21333;&#26469;&#35828;&#23545;&#20110;&#27599;&#20010;i&#65292;&#25214;&#21040;i&#21518;&#38754;&#26368;&#23567;&#30340;&#20803;&#32032;&#65292;&#24182;&#35753;&#23427;&#19982;i&#20301;&#32622;&#30340;&#20803;&#32032;&#20132;&#25442;</span>
<span style="color: #556b2f;">   * &#20063;&#26082;&#20445;&#25345;&#27599;&#20010;i&#19978;&#30340;&#20803;&#32032;&#37117;&#27604;&#20043;&#21518;&#30340;&#20803;&#32032;&#23567;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>i = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>j = i + <span style="color: #8a3b3c; font-weight: bold;">1</span>; j &lt; len; j++<span style="color: #a626a4;">)</span>
      <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> &gt; arr<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
        <span style="font-weight: bold;">int</span> <span style="color: #383a42;">temp</span> = arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span>;
        arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> = arr<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span>;
        arr<span style="color: #556b2f;">[</span>j<span style="color: #556b2f;">]</span> = temp;
      <span style="color: #a626a4;">}</span>

  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#36755;&#20986;&#25968;&#25454;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span>i = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; len; i++<span style="color: #a626a4;">)</span>
    printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d "</span>, arr<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"\n"</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc1b637f" class="outline-3">
<h3 id="orgc1b637f">函数</h3>
<div class="outline-text-3" id="text-orgc1b637f">
</div>
<div id="outline-container-orga2122d6" class="outline-4">
<h4 id="orga2122d6">简介</h4>
<div class="outline-text-4" id="text-orga2122d6">
<p>
函数让我们可以把一堆操作封装起来，下次可以直接使用，数学一点的像pi、cos、sin等都可以用函数封装起来，再比如打印一行星号、对数组进行排序、计算fib数列之类的。<br>
</p>

<p>
如果你以后开发一个比较大型的应用，把所有语句写在 <code>main</code> 函数里当然也可以，但如果你突然发现一个功能写错了，那么你可以会痛苦的找上很久 <code>bug</code> 。<br>
而如果你模块化的把每个功能都封装好成一个个函数，那么你就能单独的测试每个函数，更妙的是如果你把每个函数的名字起的好，那么你的程序就可以像读文章一样，不需要注释也能读懂。<br>
</p>
</div>
</div>
<div id="outline-container-org4faa907" class="outline-4">
<h4 id="org4faa907">语法</h4>
<div class="outline-text-4" id="text-org4faa907">
<p>
<code>返回类型 函数名(类型1 参数1，类型2 参数2){函数体}</code> 就可以创建一个函数<br>
每个函数都要定义好返回类型，函数可以有多个参数，每个参数都必须定义类型，因为 <code>c</code> 是强类型的语言<br>
变量进入函数时，函数并不会使用原来的变量，而是把变量里的内容复制到一个新建的变量，记住这一点！！！<br>
函数只能有一个返回值，那么我想返回多个值怎么办呢？<br>
我们可以返回一个结构体<br>
</p>
</div>
</div>
<div id="outline-container-org3016efa" class="outline-4">
<h4 id="org3016efa">例子</h4>
<div class="outline-text-4" id="text-org3016efa">
<p>
我们来简单的举一个例子，交换变量里的值<br>
我们先看看错误的例子<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">swap</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">temp</span> = a;
  a = b;
  b = temp;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="color: #383a42;">b</span>;
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %d"</span>, &amp;a, &amp;b<span style="color: #a626a4;">)</span>;
  swap<span style="color: #a626a4;">(</span>a, b<span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %d\n"</span>, a, b<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
对于这个例子，它的关键点是 <code>swap</code> 函数，为什么在函数里已经交换了变量，但输出的结果却和输入一样呢？<br>
原因已经在语法里说过，函数内的变量并不是从函数外进入的变量，函数内的变量只是复制了他的值，所以你无论在函数内做什么操作，都不会影响到函数外的变量。<br>
那我们怎么办呢？<br>
现在又到指针登场的环节了<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">swap</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> *<span style="color: #383a42;">a</span>, <span style="font-weight: bold;">int</span> *<span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">temp</span> = *a;
  *a = *b;
  *b = temp;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="color: #383a42;">b</span>;
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %d"</span>, &amp;a, &amp;b<span style="color: #a626a4;">)</span>;
  swap<span style="color: #a626a4;">(</span>&amp;a, &amp;b<span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %d\n"</span>, a, b<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
可以看到我把两个指针作为参数，然后我把 <code>a</code> <code>b</code> 的地址传入了函数，这样虽然只把值复制了过去，但我们已经知识了地址，所以直接修改地址指针的内存即可。<br>
</p>
</div>
</div>
</div>

<div id="outline-container-org0a1f7b0" class="outline-3">
<h3 id="org0a1f7b0">递归</h3>
<div class="outline-text-3" id="text-org0a1f7b0">
</div>
<div id="outline-container-orga6b3c41" class="outline-4">
<h4 id="orga6b3c41">简介</h4>
<div class="outline-text-4" id="text-orga6b3c41">
<p>
首先，我们可以确定一点，函数内是可以使用函数的，这点一开始就可以从在 <code>main</code> 函数内使用 <code>printf</code> 看出。<br>
那么你有没有想过，如果我在函数内使用自己会怎么样呢？<br>
可以预见，没有特殊措施的话，程序会疯狂的循环<br>
但只要函数有最小值，并且每次递归时输入的规模都会减少，这个函数还是会停止的<br>
</p>
</div>
</div>
<div id="outline-container-org6098eaa" class="outline-4">
<h4 id="org6098eaa">fib</h4>
<div class="outline-text-4" id="text-org6098eaa">
<p>
对于fib数列，它在数学是这样定义的<br>
</p>
\begin{equation}
fib(n)=\left\{
\begin{array}{cc}
0 & {n=0}\\
1 & {n=1}\\
1 & {n=2}\\
fib(n-1)+fib(n-2) & {n>2}
\end{array}
\right.
\end{equation}

<p>
可以看到上面是 <code>fib</code> 函数的定义，我们只需要把它转换成 <code>c</code> 的形式即可<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">fib</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>n == <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>n &lt; <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">1</span>;
  <span style="font-weight: bold;">return</span> fib<span style="color: #a626a4;">(</span>n - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">)</span> + fib<span style="color: #a626a4;">(</span>n - <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>;
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d"</span>, &amp;n<span style="color: #a626a4;">)</span>;
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d\n"</span>, fib<span style="color: #556b2f;">(</span>n<span style="color: #556b2f;">)</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>

<p>
从这个例子可以看出对于数学上的东西，使用递归是最好写的，但这也说明了，理解需要一定的数学思维，毕竟现实世界上人可不能把自己提起来。<br>
</p>

<p>
为什么函数自己调用自己时不会产生混乱呢？<br>
因为 <code>c</code> 每次执行函数时，都是新生成了一个机器。如果我们把函数定义比做一张蓝图，那么执行函数时我们就制作了一个机器来运行，也就是每次执行的函数都是一个全新的机器，我在这台机器做的操作当然不会同步到另一台机器，而之前的一台机器也会耐心等待后面的机器运行完毕后，再把返回的结果拿过来。<br>
</p>
</div>
</div>
</div>

<div id="outline-container-org4e610c7" class="outline-3">
<h3 id="org4e610c7">结构体</h3>
<div class="outline-text-3" id="text-org4e610c7">
</div>
<div id="outline-container-org716630f" class="outline-4">
<h4 id="org716630f">简介</h4>
<div class="outline-text-4" id="text-org716630f">
<p>
结构体提供了一个把多种类型，多个变量集合到一起的功能<br>
比如我想保存一个学生的数据，对于学生他有年龄、名字、学号、性别...<br>
我们当然可以直接定义多个变量，但如果我想把这些数据传入函数处理，那么就要输入很多变量，而如果我想返回一个学生的数据，那我们只能使用丑陋又危险的全局变量了<br>
或者，我们可以简单的使用结构体来解决这些问题<br>
</p>
</div>
</div>
<div id="outline-container-org625279b" class="outline-4">
<h4 id="org625279b">语法</h4>
<div class="outline-text-4" id="text-org625279b">
<p>
结构体其实是声明了一个类型，很奇怪吧，我们之前声明过很多东西，但没想到类型也可以自定义吧<br>
类型就意味着，使用结构体时，我们是使用一个结构体类型的变量<br>
下面我们就直接来看代码<br>
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">stdio.h</span><span style="color: #014980;">&gt;</span>

<span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#23450;&#20041;&#20102;&#19968;&#20010;&#32467;&#26500;&#20307;&#31867;&#22411;stu</span><span style="color: #556b2f;"> */</span>
<span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">stu</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#23398;&#21495;&#21644;&#24180;&#40836;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">no</span>, <span style="color: #383a42;">age</span>;
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#24615;&#21035;&#21644;&#21517;&#23383;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">char</span> <span style="color: #383a42;">sex</span>, <span style="color: #383a42;">name</span><span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">20</span><span style="color: #a626a4;">]</span>;
<span style="color: #014980;">}</span>;

<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">prtstu</span><span style="color: #014980;">(</span><span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">stu</span> <span style="color: #383a42;">a</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"&#23398;&#21495;&#65306;%d &#24180;&#40836;&#65306;%d &#24615;&#21035;&#65306;%c &#21517;&#23383;&#65306;%s\n"</span>, a.no, a.age, a.sex, a.name<span style="color: #a626a4;">)</span>;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">struct&#34920;&#31034;&#23427;&#26159;&#19968;&#20010;&#32467;&#26500;&#20307;&#31867;&#22411;</span><span style="color: #556b2f;"> */</span>
  <span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">stu</span> <span style="color: #383a42;">xiami</span>;
  <span style="color: #556b2f;">/* </span><span style="color: #556b2f;">&#20351;&#29992;.&#36816;&#31639;&#31526;&#21487;&#20197;&#20351;&#29992;&#32467;&#26500;&#20307;&#20869;&#30340;&#21464;&#37327;</span><span style="color: #556b2f;"> */</span>
  scanf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%d %d %c %s"</span>, &amp;xiami.no, &amp;xiami.age, &amp;xiami.sex, xiami.name<span style="color: #a626a4;">)</span>;
  prtstu<span style="color: #a626a4;">(</span>xiami<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org053c7f2" class="outline-4">
<h4 id="org053c7f2">结构体指针</h4>
<div class="outline-text-4" id="text-org053c7f2">
<p>
我们来看一个很魔鬼的东西，结构体指针<br>
顾名思义，结构体指针就是存放着结构体变量地址的变量<br>
使用 <code>struct stu *p</code> 就定义了一个学生类型的结构体指针， <code>p</code> 可以指向一个结构体变量的地址了<br>
现在我们再声明一个结构体变量 <code>struct stu a</code> ，把 <code>p</code> 指向这个变量 <code>p = &amp;a</code><br>
现在我们想知道a的年龄就可以这样 <code>(*p).age</code><br>
因为 <code>.</code> 的优先级高于 <code>*</code> 所以必须用一个括号括起来<br>
这个方式太过麻烦，跟不用 <code>[]</code> 的数组一样，那么官方有没有做一个对应的语法糖呢？<br>
幸运的是还真有，使用 <code>-&gt;</code> 即可， <code>p-&gt;ag</code> 就可以查看 <code>a</code> 的年龄了<br>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgee68899" class="outline-2">
<h2 id="orgee68899">C++</h2>
<div class="outline-text-2" id="text-orgee68899">
</div>
<div id="outline-container-orgfb50646" class="outline-3">
<h3 id="orgfb50646">stl</h3>
<div class="outline-text-3" id="text-orgfb50646">
<p>
<code>c++</code> 是 <code>c</code> 的超集，也就是说 <code>c++</code> 支持所有 <code>c</code> 的语法，并在此基础上 <code>c++</code> 又新增了一些语法与工具。更重要的区别在于 <code>c</code> 是面向过程的，而 <code>c++</code> 是面向对象的。<br>
</p>

<p>
对于我们做算法竞赛的同学来说， <code>c++</code> 最重要的功能就是 <code>stl</code> 了，它内置了许多有用的工具，这使得我们不需要一切都从轮子写起。<br>
</p>

<p>
<code>namespace</code> 即命名空间，不同于 <code>c</code> 在 <code>c++</code> 里提供了一种分隔代码的好方法，我们可以为一类变量函数增加一个命名空间，使用 <code>空间名::变量名</code> 就可以使用这个命名空间内的东西， <code>stl</code> 就是这样做的，它为每个变量与函数都设置了名为 <code>std</code> 的命名空间。但这个东西其实非常的麻烦，每个函数我都要加上5个字符，所以可以使用 <code>using namespace std;</code> 来导入这个命名空间，让它所有的变量与函数暴露出来。<br>
</p>

<p>
但这也引出了一个问题， <code>std</code> 下的内容太多了，像 <code>min</code> 、 <code>max</code> 、 <code>next</code> 、 <code>count</code> 等等常用的名字都被使用了，所以我们必须避开他们，使用其它的名字。<br>
</p>
</div>
</div>
<div id="outline-container-org5008358" class="outline-3">
<h3 id="org5008358">输入输出</h3>
<div class="outline-text-3" id="text-org5008358">
</div>
<div id="outline-container-org5333db7" class="outline-4">
<h4 id="org5333db7">头文件</h4>
<div class="outline-text-4" id="text-org5333db7">
<p>
<code>c++</code> 的输入输出头文件叫 <code>iostream</code> ，引用使用 <code>#include &lt;iostream&gt;</code> 语句<br>
</p>

<p>
可以发现，头文件后面并没有 <code>.h</code> ，这是 <code>c++</code> 与 <code>c</code> 的不同，所有新增的头文件都不能加 <code>.h</code><br>
</p>
</div>
</div>
<div id="outline-container-org96bcf5c" class="outline-4">
<h4 id="org96bcf5c">cin</h4>
<div class="outline-text-4" id="text-org96bcf5c">
<p>
使用 <code>cin &gt;&gt; 变量名</code> 可以从标准输入把数据输入变量内，需要注意的是输入时不需要加标识符来表示变量的类型， <code>c++</code> 可以自己确定变量的类型，并根据类型自己确定会输入的数据。<br>
</p>

<p>
<code>cin &gt;&gt; 变量名1 &gt;&gt; 变量名2 &gt;&gt; 变量名3</code> 它的后面可以接许多个变量，变量的输入是从左至右依次进行， <code>&gt;&gt;</code> 可以把想像成数据流入了变量。<br>
</p>
</div>
</div>
<div id="outline-container-orgdf3d3fe" class="outline-4">
<h4 id="orgdf3d3fe">cout</h4>
<div class="outline-text-4" id="text-orgdf3d3fe">
<p>
同理 <code>cout &lt;&lt; 表达式</code> 就可以向标准输出输出内容了， <code>cout</code> 也会自动判断表达式返回值的类型，但相比 <code>printf</code> 它就不能做到精准的格式输出了，比如固定4位宽度的数字使用 <code>cout</code> 就比较难以做到了。<br>
</p>
</div>
</div>
<div id="outline-container-org018b0c1" class="outline-4">
<h4 id="org018b0c1">总结</h4>
<div class="outline-text-4" id="text-org018b0c1">
<p>
对于输入没有规定必须使用哪个，挑选最合适的就行了。<br>
</p>
</div>
</div>
</div>
<div id="outline-container-org11673ce" class="outline-3">
<h3 id="org11673ce">vector</h3>
<div class="outline-text-3" id="text-org11673ce">
</div>
<div id="outline-container-org0f91b02" class="outline-4">
<h4 id="org0f91b02">头文件</h4>
<div class="outline-text-4" id="text-org0f91b02">
<p>
<code>#include &lt;vector&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-org8956a3f" class="outline-4">
<h4 id="org8956a3f">简介</h4>
<div class="outline-text-4" id="text-org8956a3f">
<p>
<code>vector</code> 翻译成中文叫向量<br>
它可以理解成一个动态数组，它的长度可以自由调整<br>
</p>
</div>
</div>
<div id="outline-container-orgf24e818" class="outline-4">
<h4 id="orgf24e818">创建</h4>
<div class="outline-text-4" id="text-orgf24e818">
<p>
<code>vector&lt;类型名&gt; 数组名</code> 就可以创建一个 <code>vector</code> 了<br>
不止如此， <code>vector</code> 支持初始化时自定义长度与初始内容<br>
<code>vector&lt;int&gt; v1(3)</code> 创建了长度为3，元素默认值为0的 <code>vector</code><br>
<code>vector&lt;int&gt; v2(5, 10)</code> 创建了长度为5，元素默认值为10的 <code>vector</code><br>
<code>vector&lt;int&gt; v3(v1)</code> 创建了和 <code>v1</code> 内容一样的 <code>vector</code><br>
</p>
</div>
</div>
<div id="outline-container-org1e521f6" class="outline-4">
<h4 id="org1e521f6">使用</h4>
<div class="outline-text-4" id="text-org1e521f6">
<p>
可以直接使用 <code>[]</code> 像数组一样访问 <code>vector</code><br>
<code>vector</code> 因为是一个对象，它内置了一系列函数，其中有一个名为 <code>at()</code> 的函数也可以访问对应下标的元素，但如果下标越界了它会直接抛出异常<br>
</p>

<p>
下面我介绍几个常用的函数：<br>
<code>size()</code> 返回向量的长度<br>
<code>empty()</code> 如果向量为空则返回真<br>
<code>begin()</code> 返回向量第一个元素的引用（地址）<br>
<code>end()</code> 返回向量最后一个元素之后一个长度的引用<br>
<code>push_back()</code> 在向量后面加入一个元素<br>
<code>pop_back()</code> 删除向量最后一个元素<br>
<code>insert()</code> 在某个位置插入元素<br>
</p>

<p>
<code>vector</code> 也重载了一些运算符<br>
使用 <code>v1=v2</code> 可以直接赋值<br>
使用 <code>v1==v2</code> 可以轻松的判断两个向量是否完全一致<br>
使用 <code>v1&gt;v2</code> 可以判断两个向量的大小问题，它从第一个元素开始对比，如果当前 <code>v1</code> 元素不等于 <code>v2</code> 直接返回它们之间的大小，如果相等就同时向后延一格对比<br>
</p>
</div>
</div>
</div>

<div id="outline-container-orgd4b456a" class="outline-3">
<h3 id="orgd4b456a">string</h3>
<div class="outline-text-3" id="text-orgd4b456a">
</div>
<div id="outline-container-org108c659" class="outline-4">
<h4 id="org108c659">头文件</h4>
<div class="outline-text-4" id="text-org108c659">
<p>
<code>#include &lt;string&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-org4aaf2ae" class="outline-4">
<h4 id="org4aaf2ae">简介</h4>
<div class="outline-text-4" id="text-org4aaf2ae">
<p>
<code>string</code> 是一个字符串，它的底层实现是 <code>vector</code> 它可以使用 <code>vector</code> 的所有函数，它也新加了许多方便的方法<br>
</p>
</div>
</div>
<div id="outline-container-org91a5395" class="outline-4">
<h4 id="org91a5395">使用</h4>
<div class="outline-text-4" id="text-org91a5395">
<p>
它的创建方法与 <code>vector</code> 一样，这些可以直接看上面的 <code>vector</code> 介绍<br>
</p>

<p>
对于字符串来说它有两个方法非常常用<br>
<code>find()</code> 可以查找子串第一次出现的位置，函数可以传入字符或字符串<br>
<code>substr(pos, len)</code> 从 <code>pos</code> 开始开始截取 <code>len</code> 个字符并返回它<br>
</p>
</div>
</div>
</div>
<div id="outline-container-org8e7f06f" class="outline-3">
<h3 id="org8e7f06f">queue</h3>
<div class="outline-text-3" id="text-org8e7f06f">
</div>
<div id="outline-container-org59a98ee" class="outline-4">
<h4 id="org59a98ee">头文件</h4>
<div class="outline-text-4" id="text-org59a98ee">
<p>
<code>#include &lt;queue&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-org0f85b0f" class="outline-4">
<h4 id="org0f85b0f">简介</h4>
<div class="outline-text-4" id="text-org0f85b0f">
<p>
<code>queue</code> 叫做队列，它是一种数据结构，先进入队列的数据会先出来，可以想像一个管子，从后面往里面塞球，取球时只能从前面取<br>
</p>

<p>
还有一个叫双端队列的类 <code>deque</code> ，与 <code>queue</code> 的不同在于， <code>deque</code> 可以从两边取和删除数据<br>
</p>

<p>
为什么要使用队列呢？我使用数组也可以做到相同功能<br>
原因就是数组在前端插入一个数据需要遍历整个数组，但队列只需要一下操作就能实现，这在数据量大的情况下是有利的。<br>
简单来说 <code>queue</code> 的修改是 <code>O(1)</code> 的，而数组的修改是 <code>O(n)</code> 的。<br>
</p>
</div>
</div>
<div id="outline-container-org1822aa4" class="outline-4">
<h4 id="org1822aa4">使用</h4>
<div class="outline-text-4" id="text-org1822aa4">
<p>
<code>queue&lt;类型名&gt; 队列名</code> 就可以创建一个队列了，初始化的方法与之前的方法一致<br>
</p>

<p>
<code>queue</code> 的函数：<br>
<code>empty()</code> 返回队列是否为空<br>
<code>push()</code> 向队尾插入一个元素<br>
<code>pop()</code> 队首弹出一个元素<br>
<code>front()</code> 查看队首的元素<br>
</p>

<p>
<code>deque</code> 的函数：<br>
<code>push_front()</code> 在队首插入元素<br>
<code>pop_front()</code> 弹出队首的元素<br>
<code>push_back()</code> 在队尾插入元素<br>
<code>pop_back()</code> 弹出队尾的元素<br>
<code>at()</code> 通过下标访问元素<br>
</p>
</div>
</div>
</div>

<div id="outline-container-org2850884" class="outline-3">
<h3 id="org2850884">stack</h3>
<div class="outline-text-3" id="text-org2850884">
</div>
<div id="outline-container-orgdd0efa6" class="outline-4">
<h4 id="orgdd0efa6">头文件</h4>
<div class="outline-text-4" id="text-orgdd0efa6">
<p>
<code>#include &lt;stack&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-org3c37bbf" class="outline-4">
<h4 id="org3c37bbf">简介</h4>
<div class="outline-text-4" id="text-org3c37bbf">
<p>
<code>stack</code> 是栈，与队列相反，栈只能在一端插入或删除，就像一个筒装薯片一样，你可以在开口处拿薯片或放入薯片，可以发现栈的元素是后进先出的。<br>
</p>

<p>
我们的递归函数底层使用了栈，有时写算法题时直接使用递归可能会爆内存，这时可以使用栈来模拟递归。<br>
</p>
</div>
</div>
<div id="outline-container-orga91ccc8" class="outline-4">
<h4 id="orga91ccc8">使用</h4>
<div class="outline-text-4" id="text-orga91ccc8">
<p>
<code>stack&lt;类型名&gt; 栈名</code> 与之前初始化一样的方法<br>
</p>

<p>
<code>stack</code> 的函数主要有：<br>
<code>back()</code> 获取尾部元素<br>
<code>push_back()</code> 向尾部推入一个元素<br>
<code>pop_back()</code> 从尾部弹出一个元素<br>
</p>

<p>
可以发现，使用 <code>deque</code> 可以模拟 <code>stack</code><br>
</p>
</div>
</div>
</div>
<div id="outline-container-orgd0fb5e7" class="outline-3">
<h3 id="orgd0fb5e7">set</h3>
<div class="outline-text-3" id="text-orgd0fb5e7">
</div>
<div id="outline-container-orgd04a227" class="outline-4">
<h4 id="orgd04a227">头文件</h4>
<div class="outline-text-4" id="text-orgd04a227">
<p>
<code>#include &lt;set&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-org7f40d0f" class="outline-4">
<h4 id="org7f40d0f">简介</h4>
<div class="outline-text-4" id="text-org7f40d0f">
<p>
<code>set</code> 是集合，和数学上的集合一样，每个元素只能出现一次，这对于统计有多少个不同的元素是很方便的。<br>
</p>

<p>
顺便说一句， <code>set</code> 的复杂度都 <code>O(logN)</code> 的，它的底层实现是红黑树<br>
</p>
</div>
</div>
<div id="outline-container-org339d3e1" class="outline-4">
<h4 id="org339d3e1">使用</h4>
<div class="outline-text-4" id="text-org339d3e1">
<p>
<code>set&lt;类型名&gt; 集合名</code> 创建一个 <code>set</code><br>
</p>

<p>
<code>set</code> 的函数有：<br>
<code>insert()</code> 插入一个元素<br>
<code>erase()</code> 删除元素<br>
<code>clear()</code> 清空集合<br>
<code>find()</code> 在集合内查找元素，并返回它在集合内的引用<br>
<code>count()</code> 统计元素在集合内的个数，它的返回值只能是1或0<br>
<code>empty()</code> 返回集合是否为空<br>
<code>size()</code> 集合的元素个数<br>
</p>
</div>
</div>
</div>
<div id="outline-container-org184e887" class="outline-3">
<h3 id="org184e887">map</h3>
<div class="outline-text-3" id="text-org184e887">
</div>
<div id="outline-container-org394cd0a" class="outline-4">
<h4 id="org394cd0a">头文件</h4>
<div class="outline-text-4" id="text-org394cd0a">
<p>
<code>#include &lt;map&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-orgdafb0c5" class="outline-4">
<h4 id="orgdafb0c5">简介</h4>
<div class="outline-text-4" id="text-orgdafb0c5">
<p>
<code>map</code> 的意思其实是映射，它可以保存 <code>key</code> 到 <code>value</code> 的映射，也就是键值对<br>
说人话，就像数组可以通过下标访问元素， <code>map</code> 也是通过 <code>key</code> 访问元素，不同于数组 <code>map</code> 的 <code>key</code> 可以是数字、字符、字符串等等<br>
一个 <code>key</code> 只能映射到一个 <code>value</code><br>
</p>

<p>
<code>map</code> 的复杂度也都是 <code>O(logN)</code><br>
</p>
</div>
</div>
<div id="outline-container-org22fea5b" class="outline-4">
<h4 id="org22fea5b">使用</h4>
<div class="outline-text-4" id="text-org22fea5b">
<p>
<code>map&lt;键类型, 值类型&gt; 映射名</code> 可以创建一个 <code>map</code> 需要标注好键和值的类型<br>
</p>

<p>
使用方法和数组类似 <code>map1[键]</code> 就可以返回对应键的值了<br>
</p>

<p>
比如 <code>map&lt;char, int&gt; m</code> 创建了名为 <code>m</code> 的映射，它可以把一个字符映射到一个整数数字上<br>
<code>m['a'] = 100</code> 就把100保存到a这个键内了<br>
<code>m['a']</code> 对这个表达式求值就返回100了<br>
</p>

<p>
<code>map</code> 的函数：<br>
<code>count()</code> 统计一个键的数量<br>
<code>find()</code> 返回对应键在映射内的指针<br>
<code>size()</code> 返回全部元素个数<br>
<code>empty()</code> 返回映射是否为空<br>
</p>
</div>
</div>
</div>
<div id="outline-container-orge4c2b97" class="outline-3">
<h3 id="orge4c2b97">sort</h3>
<div class="outline-text-3" id="text-orge4c2b97">
</div>
<div id="outline-container-orgb313176" class="outline-4">
<h4 id="orgb313176">头文件</h4>
<div class="outline-text-4" id="text-orgb313176">
<p>
<code>#include &lt;algorithm&gt;</code><br>
</p>

<p>
这个头文件内有许多算法的实现，比如等下要讲的排序<br>
</p>
</div>
</div>
<div id="outline-container-org6509035" class="outline-4">
<h4 id="org6509035">简介</h4>
<div class="outline-text-4" id="text-org6509035">
<p>
<code>sort</code> 是排列的意思，它可以对给定范围内的数据进行排序，传入一个比较函数就可以控制是从小到大还是从大到小排序了。<br>
</p>

<p>
<code>sort</code> 排列的复杂度是 <code>O(n*logN)</code><br>
</p>
</div>
</div>
<div id="outline-container-org0d6876e" class="outline-4">
<h4 id="org0d6876e">用法</h4>
<div class="outline-text-4" id="text-org0d6876e">
<p>
<code>sort(起始引用,未尾引用)</code> 就可以对这个范围内的数据排序了，需要注意未尾引用是最后一个元素的引用加1<br>
</p>

<p>
不需要指定被排序数据的类型， <code>sort</code> 会自动判断<br>
可以为第三个参数添加一个比较函数，让 <code>sort</code> 使用这个函数的规则排序<br>
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">algorithm</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">vector</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">bool</span> <span style="font-weight: bold;">cmp1</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span> <span style="font-weight: bold;">return</span> a &gt; b; <span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">vector</span><span style="color: #a626a4;">&lt;</span><span style="font-weight: bold;">int</span><span style="color: #a626a4;">&gt;</span> <span style="color: #383a42;">a</span> = <span style="color: #a626a4;">{</span><span style="color: #8a3b3c; font-weight: bold;">9</span>, <span style="color: #8a3b3c; font-weight: bold;">6</span>, <span style="color: #8a3b3c; font-weight: bold;">3</span>, <span style="color: #8a3b3c; font-weight: bold;">8</span>, <span style="color: #8a3b3c; font-weight: bold;">5</span>, <span style="color: #8a3b3c; font-weight: bold;">2</span>, <span style="color: #8a3b3c; font-weight: bold;">7</span>, <span style="color: #8a3b3c; font-weight: bold;">4</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">}</span>;
  sort<span style="color: #a626a4;">(</span>a.begin<span style="color: #556b2f;">()</span>, a.end<span style="color: #556b2f;">()</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; a.size<span style="color: #556b2f;">()</span>; i++<span style="color: #a626a4;">)</span>
    cout &lt;&lt; a<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span> &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
  cout &lt;&lt; endl;

  sort<span style="color: #a626a4;">(</span>a.begin<span style="color: #556b2f;">()</span>, a.end<span style="color: #556b2f;">()</span>, cmp1<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; a.size<span style="color: #556b2f;">()</span>; i++<span style="color: #a626a4;">)</span>
    cout &lt;&lt; a<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span> &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
  cout &lt;&lt; endl;

  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">b</span><span style="color: #a626a4;">[]</span> = <span style="color: #a626a4;">{</span><span style="color: #8a3b3c; font-weight: bold;">9</span>, <span style="color: #8a3b3c; font-weight: bold;">6</span>, <span style="color: #8a3b3c; font-weight: bold;">3</span>, <span style="color: #8a3b3c; font-weight: bold;">8</span>, <span style="color: #8a3b3c; font-weight: bold;">5</span>, <span style="color: #8a3b3c; font-weight: bold;">2</span>, <span style="color: #8a3b3c; font-weight: bold;">7</span>, <span style="color: #8a3b3c; font-weight: bold;">4</span>, <span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">}</span>;
  sort<span style="color: #a626a4;">(</span>b, b + <span style="color: #8a3b3c; font-weight: bold;">10</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">10</span>; i++<span style="color: #a626a4;">)</span>
    cout &lt;&lt; b<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span> &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
  cout &lt;&lt; endl;

  sort<span style="color: #a626a4;">(</span>b, b + <span style="color: #8a3b3c; font-weight: bold;">10</span>, cmp1<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">10</span>; i++<span style="color: #a626a4;">)</span>
    cout &lt;&lt; b<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span> &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
  cout &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org7438c15" class="outline-3">
<h3 id="org7438c15">next_permutation</h3>
<div class="outline-text-3" id="text-org7438c15">
</div>
<div id="outline-container-org082e0b4" class="outline-4">
<h4 id="org082e0b4">头文件</h4>
<div class="outline-text-4" id="text-org082e0b4">
<p>
<code>#include &lt;algorithm&gt;</code><br>
</p>
</div>
</div>
<div id="outline-container-org5e036ef" class="outline-4">
<h4 id="org5e036ef">简介</h4>
<div class="outline-text-4" id="text-org5e036ef">
<p>
<code>next_permutation</code> 可以生成一个范围内数据的下一个排列<br>
比如 <code>1 2 3</code> 的下一个排列就是 <code>1 3 2</code><br>
这个函数的作用是非常大的，以后做有些算法题时，如果不想用递归写 <code>dfs</code> 可以使用这个函数解决<br>
</p>

<p>
比如有一些人想接水，每个人接水的时间不同，我们想让所有人的等待时间之和最小，使用暴力的方法，把这些人的每种排列情况都算一遍就能得到答案了，当然这道题使用其它的方法更简单<br>
</p>
</div>
</div>
<div id="outline-container-org8fa7509" class="outline-4">
<h4 id="org8fa7509">使用方法</h4>
<div class="outline-text-4" id="text-org8fa7509">
<p>
<code>next_permutation(起始引用,未尾引用)</code> 会生成范围内的下一个排列，如果不能生成了就返回 <code>false</code><br>
</p>

<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">algorithm</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">all</span><span style="color: #a626a4;">[]</span> = <span style="color: #a626a4;">{</span><span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #8a3b3c; font-weight: bold;">2</span>, <span style="color: #8a3b3c; font-weight: bold;">3</span>, <span style="color: #8a3b3c; font-weight: bold;">4</span>, <span style="color: #8a3b3c; font-weight: bold;">5</span><span style="color: #a626a4;">}</span>;
  <span style="font-weight: bold;">do</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">5</span>; i++<span style="color: #556b2f;">)</span>
      cout &lt;&lt; all<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span> &lt;&lt; <span style="color: #8a3b3c;">" "</span>;
    cout &lt;&lt; endl;
  <span style="color: #a626a4;">}</span> <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span>next_permutation<span style="color: #556b2f;">(</span>all, all + <span style="color: #8a3b3c; font-weight: bold;">5</span><span style="color: #556b2f;">)</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-org239f4a1" class="outline-2">
<h2 id="org239f4a1">结语</h2>
<div class="outline-text-2" id="text-org239f4a1">
<p>
这篇文章只讲解了 <code>C/C++</code> 的一下部分内容，如果你对其它的部分也感兴趣的话，我推荐一本书 《C++ Prime Plus》<br>
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-tutorial.html">tutorial</a> <a href="https://lampze.github.io/tag-c/c++.html">C/C++</a> </div>]]></description>
  <category><![CDATA[tutorial]]></category>
  <category><![CDATA[C/C++]]></category>
  <link>https://lampze.github.io/c-cpp-tutorial.html</link>
  <pubDate>Tue, 17 Nov 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[论如何在Linux下直播显示弹幕]]></title>
  <description><![CDATA[

<div id="outline-container-org7843c67" class="outline-2">
<h2 id="org7843c67">前言</h2>
<div class="outline-text-2" id="text-org7843c67">
<p>
因为最近有b站直播的需求，但直播过程中查看弹幕非常麻烦，之前我只能用手机打开我的直播间查看。
</p>

<p>
但网上针对 <code>Linux</code> 的程序要么失效了要么非常麻烦，可以直接在 <code>obs</code> 上显示弹幕，但由于在 <code>Linux</code> 上的 <code>obs</code> 默认不能抓取 <code>web</code> 的内容，还需要自己打补丁，并且还只能支持比较低的版本。
</p>

<p>
所以我打算用b站的 <code>API</code> 自己写个程序出来，后来在网上发现别人已经把 <code>API</code> 封装好了，就是这个库<a href="https://github.com/simon300000/bilibili-live-ws">bilibili-live-ws</a>，剩下的就是显示问题了，我打算利用 <code>Linux</code> 的 <code>notifier</code> 功能，一般桌面都会响应这个请求的，如果没有有些终端也会响应的。平常桌面跳出的一些系统通知就是使用这个功能。同样在网上找到了封装好的库<a href="https://github.com/mikaelbr/node-notifier">node-notifier</a>。
</p>
</div>
</div>

<div id="outline-container-orgdf21f1a" class="outline-2">
<h2 id="orgdf21f1a">组装</h2>
<div class="outline-text-2" id="text-orgdf21f1a">
<p>
首先创建一个 <code>node</code> 工作目录，初始化好，然后安装上面的两个库。
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#25105;&#21916;&#27426;yarn&#65292;&#24403;&#28982;&#29616;&#22312;&#30340;npm&#22909;&#20687;&#20063;&#19981;&#38169;</span>
<span style="font-weight: bold;">mkdir</span> nodebilibili
<span style="font-weight: bold;">cd</span> nodebilibili
yarn init
yarn add node-notifier bilibili-live-ws
</pre>
</div>

<p>
因为也不复杂就新建一个 <code>index.js</code> 文件就好了， <code>API</code> 可以在这里查询<a href="https://github.com/lovelyyoshino/Bilibili-Live-API">Bilibili-Live-API</a>，最后把输出的部分改成使用 <code>node-notifier</code> 输出就行了，说实话我也不敢相信这么简单就完成了。
</p>

<div class="org-src-container">
<pre class="src src-js"><span style="color: #556b2f;">#!/usr/bin/env node</span>

<span style="font-weight: bold;">const</span> {
  LiveWS,
  LiveTCP,
  KeepLiveWS,
  KeepLiveTCP,
} = require(<span style="color: #8a3b3c;">"bilibili-live-ws"</span>);

<span style="font-weight: bold;">const</span> <span style="color: #383a42;">notifier</span> = require(<span style="color: #8a3b3c;">"node-notifier"</span>);

<span style="font-weight: bold;">let</span> <span style="color: #383a42;">roomid</span> = Number(process.argv[<span style="color: #8a3b3c; font-weight: bold;">2</span>]);

<span style="font-weight: bold;">const</span> <span style="color: #383a42;">live</span> = <span style="font-weight: bold;">new</span> <span style="font-weight: bold;">LiveWS</span>(roomid);

live.on(<span style="color: #8a3b3c;">"open"</span>, () =&gt; console.log(<span style="color: #8a3b3c;">"&#24050;&#32463;&#36830;&#25509;&#19978;&#30452;&#25773;&#38388;"</span> + roomid));

live.on(<span style="color: #8a3b3c;">"live"</span>, () =&gt; {
  live.on(<span style="color: #8a3b3c;">"heartbeat"</span>, (online) =&gt; {
    console.log(<span style="color: #8a3b3c;">"&#24403;&#21069;&#20154;&#27668;&#20540;&#20026;&#65306;"</span> + online);
  });

  live.on(<span style="color: #8a3b3c;">"msg"</span>, (data) =&gt; {
    <span style="font-weight: bold;">switch</span> (data.cmd) {
      <span style="font-weight: bold;">case</span> <span style="color: #8a3b3c;">"DANMU_MSG"</span>:
        userName = data.info[<span style="color: #8a3b3c; font-weight: bold;">2</span>][<span style="color: #8a3b3c; font-weight: bold;">1</span>];
        danmu = data.info[<span style="color: #8a3b3c; font-weight: bold;">1</span>];
        console.log(<span style="color: #8a3b3c;">`${userName}: ${danmu}`</span>);
        notifier.notify({
          <span style="color: #8a3b3c;">"app-name"</span>: <span style="color: #8a3b3c;">"nodebilibili"</span>,
          title: <span style="color: #8a3b3c;">"&#24377;&#24149;"</span>,
          message: <span style="color: #8a3b3c;">`${userName}: ${danmu}`</span>,
        });
        <span style="font-weight: bold;">break</span>;
      <span style="font-weight: bold;">case</span> <span style="color: #8a3b3c;">"SEND_GIFT"</span>:
        giftName = data.data.giftName;
        userName = data.data.uname;
        giftNum = data.data.num;
        userAction = data.data.action;
        <span style="font-weight: bold;">let</span> <span style="color: #383a42;">prtStr</span> = <span style="color: #8a3b3c;">`${userName} ${userAction} ${giftNum} &#20010; ${giftName}`</span>;
        console.log(prtStr);
        notifier.notify({
          <span style="color: #8a3b3c;">"app-name"</span>: <span style="color: #8a3b3c;">"nodebilibili"</span>,
          title: <span style="color: #8a3b3c;">"&#31036;&#29289;"</span>,
          message: prtStr,
        });
        <span style="font-weight: bold;">break</span>;
      <span style="font-weight: bold;">case</span> <span style="color: #8a3b3c;">"WELCOME"</span>:
        console.log(<span style="color: #8a3b3c;">`&#27426;&#36814; ${data.data.uname}`</span>);
        <span style="font-weight: bold;">break</span>;
      <span style="font-weight: bold;">default</span>:
      <span style="color: #556b2f;">//</span><span style="color: #556b2f;">console.log(data);</span>
    }
  });
});
</pre>
</div>

<p>
这个程序可以直接使用运行，不用加 <code>node</code> 前缀，输入一个参数，内容是显示的直播间号，直播间编号一般是直播间地址后面的数字，如果不正确的话按 <code>F12</code> 在控制台查看 <code>BilibiliLive</code> 变量，这个对象里的 <code>ROOMID</code> 就是真实房间号。
</p>
</div>
</div>

<div id="outline-container-orgdce7cc8" class="outline-2">
<h2 id="orgdce7cc8">后记</h2>
<div class="outline-text-2" id="text-orgdce7cc8">
<p>
我只写了自己需要的部分，如果有需要的地方就自己加嘛。
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-nodejs.html">nodejs</a> </div>]]></description>
  <category><![CDATA[nodejs]]></category>
  <link>https://lampze.github.io/nodebilibili.html</link>
  <pubDate>Wed, 19 Aug 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[R6900v2安装LEDE.org]]></title>
  <description><![CDATA[

<div id="outline-container-orge8fade0" class="outline-2">
<h2 id="orge8fade0">前言</h2>
<div class="outline-text-2" id="text-orge8fade0">
<p>
首先我先劝退一波想买这个路由器的同学，以下是理由。
</p>

<ol class="org-ol">
<li>支持的固件少并且不更新，不接受的同学只能自己编译固件</li>
<li>编译时有许多的坑，一个不小心路由器就变砖了</li>
<li>网件原厂的固件虽然稳定，但界面不好看还慢，功能也少</li>
</ol>

<p>
如果你能接受或者已经买了就继续往下看吧。
</p>

<p>
编译的固件选择了 <code>LEDE</code> ，因为作者是国人，在国内很多需求是相同的。
</p>

<p>
有些自己编译过的同学可能会发现，配置的时候找不到这个路由器，根据这个<a href="https://github.com/openwrt/openwrt/pull/2614#issuecomment-569452109">PR</a>里说的情况， <code>R6700v2</code> 、 <code>R6800</code> 、 <code>R6900v2</code> 、 <code>R7450</code> 这几个路由器的核心硬件是相同的，甚至它们的官方固件都有相同的 <code>md5</code> ，理论上来说在配置时选择这个几个路由器都行，我测试过确实是可行的，目前我选择了 <code>R6700v2</code> 。
</p>

<p>
最后编译时要注意刷机包的大小，大于30的话，刷完机路由器是开不了的。
</p>
</div>
</div>

<div id="outline-container-orgbe45b98" class="outline-2">
<h2 id="orgbe45b98">准备</h2>
<div class="outline-text-2" id="text-orgbe45b98">
<p>
请自行准备好以下的东西再进行刷机
</p>

<ol class="org-ol">
<li>可用的 <code>Linux</code> 系统</li>
<li>根据<a href="https://github.com/coolsnowwolf/lede">官方文档</a>准备好环境，没有科学上网很慢的</li>
<li><code>nmrpflash</code> 工具，用来救砖</li>
</ol>

<p>
请完全准备好后再进行刷机的尝试，如果路由器变砖了就很麻烦了。
</p>
</div>
</div>

<div id="outline-container-org7902440" class="outline-2">
<h2 id="org7902440">制作固件</h2>
<div class="outline-text-2" id="text-org7902440">
</div>
<div id="outline-container-org75029e0" class="outline-3">
<h3 id="org75029e0">准备</h3>
<div class="outline-text-3" id="text-org75029e0">
<p>
进入 <code>LEDE</code> 目录，编辑 <code>feeds.conf.default</code> 文件，取消 <code>helloworld</code> 所在行的注释，这样就能选择 <code>ssr</code> 了，以下是示例。
</p>

<pre class="example" id="orgf0d9383">
src-git packages https://github.com/coolsnowwolf/packages
src-git luci https://github.com/coolsnowwolf/luci
src-git routing https://git.openwrt.org/feed/routing.git
src-git telephony https://git.openwrt.org/feed/telephony.git
src-git freifunk https://github.com/freifunk/openwrt-packages.git
#src-git video https://github.com/openwrt/video.git
#src-git targets https://github.com/openwrt/targets.git
#src-git management https://github.com/openwrt-management/packages.git
#src-git oldpackages http://git.openwrt.org/packages.git
#src-link custom /usr/src/openwrt/custom-feed
src-git helloworld https://github.com/fw876/helloworld
</pre>

<p>
然后更新安装 <code>feed</code> ， <code>feed</code> 存放着各种软件源码。
</p>
<div class="org-src-container">
<pre class="src src-shell">./scripts/feeds update -a
./scripts/feeds install -a
</pre>
</div>
</div>
</div>

<div id="outline-container-orge76c08f" class="outline-3">
<h3 id="orge76c08f">make menuconfig</h3>
<div class="outline-text-3" id="text-orge76c08f">
<p>
然后就是配置 <code>LEDE</code> 了， 运行命令 <code>make menuconfig</code> 。我来展示一些必要选项。
</p>

<pre class="example" id="org12b4e99">
Target System (MediaTek Ralink MIPS)  ---&gt;
Subtarget (MT7621 based boards)  ---&gt;
Target Profile (NETGEAR R7200 v1 (NETGEAR R6700 v2))  ---&gt;
</pre>

<p>
使用方向键移动在这三项上面，按回车进入选择菜单，选择括号中间的选项，选择这三项一定要从上往下。其中第三项还可以选择 <code>R6800</code> ，原因我就不多说了。
</p>

<p>
选择了上面的内容就可进行下一步了，下面展示一些我的配置。
</p>

<pre class="example" id="orgd05bb83">
Extra packages  ---&gt;
  &lt;*&gt; ipv6helper................... IPv6 Helper and Dynamic Update he.net of ip
LuCI  ---&gt;
  3. Applications  ---&gt;
    &lt;*&gt; luci-app-qos..................... Quality of Service configuration module
    &lt;*&gt; luci-app-flowoffload....................... LuCI support for Flow Offload
    &lt;*&gt; luci-app-ssr-plus.......... SS/SSR/V2Ray/Trojan/Socks5/Tun LuCI interface
    [ ] Include Shadowsocks V2ray Plugin
    [*] Include V2ray
    [ ] Include Trojan
    [ ] Include Redsocks2
    [ ] Include Kcptun
    [ ] Include ShadowsocksR Server
    &lt;*&gt; luci-app-wifischedule...... Turns WiFi on and off according to a schedule
  4. Themes  ---&gt;
    &lt;*&gt; luci-theme-argon............................................. Argon Theme
Utilities  ---&gt;
  Editors  ---&gt;
    &lt;*&gt; vim-fuller........................ Vi IMproved - enhanced vi editor (Big)
</pre>
</div>
</div>

<div id="outline-container-orgbf07d24" class="outline-3">
<h3 id="orgbf07d24">编译</h3>
<div class="outline-text-3" id="text-orgbf07d24">
<p>
<code>make download V=s</code> 先下载要编译的源码
</p>

<p>
<code>make -j1</code> 编译，参数j后面是你的 <code>cpu</code> 的线程加一
</p>

<p>
如果没有正确结束，使用这个命令查错 <code>make -j1 V=99</code>
</p>

<p>
生成的固件在 <code>./bin/targets/ramips/mt7621</code>
</p>
</div>
</div>

<div id="outline-container-org6ec9eaa" class="outline-3">
<h3 id="org6ec9eaa">刷机</h3>
<div class="outline-text-3" id="text-org6ec9eaa">
</div>
<div id="outline-container-org686e22a" class="outline-4">
<h4 id="org686e22a">原生刷LEDE</h4>
<div class="outline-text-4" id="text-org686e22a">
<p>
直接在原生的管理界面点击升级固件，上传带有字段 <code>factory</code> 的固件即可。
</p>
</div>
</div>
<div id="outline-container-org2409286" class="outline-4">
<h4 id="org2409286">LEDE升级</h4>
<div class="outline-text-4" id="text-org2409286">
<p>
在固件升级页面使用带有字段 <code>sysupgrade</code> 的固件。
</p>
</div>
</div>
<div id="outline-container-org0460ba6" class="outline-4">
<h4 id="org0460ba6">救砖或LEDE刷回原生</h4>
<div class="outline-text-4" id="text-org0460ba6">
<p>
使用 <code>nmrpflash -L</code> 列出所有网卡，找到正确的网卡，如果不知道就一个个试。
</p>

<p>
然后使用 <code>nmrpflash -i &lt;网卡名&gt; -f &lt;固件名&gt;</code> 命令，执行命令的瞬间重启路由器，然后就可以看到固件正在上传，等待命令执行完毕后重启路由器就刷机完毕了。
</p>

<p>
建议在 <code>windows</code> 下使用这个工具，这个命令需要管理员权限。
</p>

<p>
注意！！！这个命令只能对网件的路由器使用。
</p>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-openwrt.html">OpenWrt</a> <a href="https://lampze.github.io/tag-lede.html">LEDE</a> <a href="https://lampze.github.io/tag-router.html">router</a> </div>]]></description>
  <category><![CDATA[OpenWrt]]></category>
  <category><![CDATA[LEDE]]></category>
  <category><![CDATA[router]]></category>
  <link>https://lampze.github.io/R6900v2-lede.html</link>
  <pubDate>Mon, 27 Jul 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[2020年gentoo安装分析]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgbbf193e">前言</a></li>
<li><a href="#orgc0d27a6">安装</a>
<ul>
<li><a href="#orgc932f62">准备</a>
<ul>
<li><a href="#org16a1678">配置选择</a></li>
<li><a href="#org4bfbea2">安装环境</a></li>
<li><a href="#org5441d51">安装准备</a></li>
</ul>
</li>
<li><a href="#orga1dc35c">安装</a>
<ul>
<li><a href="#orgae8cfb0">初始系统</a></li>
<li><a href="#org040e27b">chroot</a></li>
<li><a href="#orgbd82bb8">配置包管理</a></li>
<li><a href="#orgafdde12">内核</a></li>
<li><a href="#orgcfc631a">必备配置</a></li>
<li><a href="#orgefccea0">引导</a></li>
</ul>
</li>
<li><a href="#orga03c6cf">配置</a>
<ul>
<li><a href="#orgce1455e">地区配置</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgc8a98c7">后记</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgbbf193e" class="outline-2">
<h2 id="orgbbf193e">前言</h2>
<div class="outline-text-2" id="text-orgbbf193e">
<p>
我使用Gentoo也有一段时间了，之前还尝试了一下Funtoo最后还是换到了Gentoo下，正好把安装的过程记录一下。相比原来，现在的Gentoo变化也挺大的，没了一些坑，但又新增了一些坑。
</p>

<p>
新手安装配置Gentoo时最好先把教程文档都大致看一遍，最好把<a href="https://wiki.archlinux.org/index.php/Main_page">Arch</a>、<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64">Gentoo</a>、<a href="https://www.funtoo.org/Install/Introduction">Funtoo</a>的文档都浏览一下。<br>
建议最好看英文的，更新的最即时坑最少，毕竟你要安装的是一个滚动更新的系统，太老的教程是要出事的。
</p>

<p>
因为一些东西是变来变去的，所以我尽量把原理讲清楚，具体的命令最好参考我给出的文档。
</p>

<p>
在安装过程中如果提示找不到命令，请自行百度你的Linux发行版怎么安装这个命令。
</p>
</div>
</div>

<div id="outline-container-orgc0d27a6" class="outline-2">
<h2 id="orgc0d27a6">安装</h2>
<div class="outline-text-2" id="text-orgc0d27a6">
</div>
<div id="outline-container-orgc932f62" class="outline-3">
<h3 id="orgc932f62">准备</h3>
<div class="outline-text-3" id="text-orgc932f62">
</div>
<div id="outline-container-org16a1678" class="outline-4">
<h4 id="org16a1678">配置选择</h4>
<div class="outline-text-4" id="text-org16a1678">
<p>
Gentoo是把初始系统的所有文件打包起来，用户只需要把它解压到指定位置然后配置好内核和引导就可以正常使用了。
</p>

<p>
为了满足不同人的需要，这个初始环境有多种配置可以选择，配置的种类有cpu架构、 <code>stage</code> 、软件包配置等等。当然这些选项都可以后期自己配置更改，只不过官方为了方便用户先集成起来了。
</p>

<p>
cpu架构基本所有平台都有，我们一般人主要就选择x86的64或32位架构。其中 <code>amd64</code> 表示64位， <code>x86</code> 表示32位。
</p>

<p>
<code>stage</code> 就是系统配置的集成程度，想了解可以看<a href="https://wiki.gentoo.org/wiki/Stage_tarball">stage_tarball</a>。 <code>stage</code> 分为4个级别，数字越高表示系统配置程序越高，1和2基本想当于从零开始了，一般人就不要选了，而 <code>stage 4</code> 就相当于开箱即用了，官方推荐的是 <code>stage 3</code> 。
</p>

<p>
最后就是一些什么不要32位的软件、最小配置、使用 <code>systemd</code> 、注重系统安全...的选项了，这些就看个人。桌面用户就考虑一下 <code>systemd</code> 就行了，但我觉得都玩Gentoo了体验一下 <code>openrc</code> 也不错，其它的一般人玩不动。
</p>
</div>
</div>

<div id="outline-container-org4bfbea2" class="outline-4">
<h4 id="org4bfbea2">安装环境</h4>
<div class="outline-text-4" id="text-org4bfbea2">
<p>
因为是命令行安装的，所以要想安装Gentoo需要一个现成的Linux环境，如果你已经安装了一个Linux就可以直接使用它安装Gentoo，如果没有就下个 <code>ISO</code> 境像刻录到u盘。Gentoo官方有专门的最小安装环境，最好找个和将要安装的Gentoo相同配置的环境。
</p>

<p>
刻录 <code>ISO</code> 文件可以参照这个<a href="https://wiki.gentoo.org/wiki/FAQ#How_do_I_burn_an_ISO_file.3F">How do I burn an ISO file?</a>。反正Linux直接用 <code>dd</code> 就行了， win就用 <code>EasyCD</code> 。刻录好后重启进 <code>BIOS</code> 使用 u盘启动就进入安装环境了。
</p>

<p>
国内最好找个镜像下文件，比如<a href="https://mirrors.tuna.tsinghua.edu.cn/gentoo/releases/amd64/autobuilds/current-stage3-amd64/">清华大学镜像站</a>。
</p>
</div>
</div>

<div id="outline-container-org5441d51" class="outline-4">
<h4 id="org5441d51">安装准备</h4>
<div class="outline-text-4" id="text-org5441d51">
<p>
准备无非就是看看能不能联网，要安装的硬盘能不能找到。联网一般不用特别配置，如果没网就安装 <code>NetworkManager</code> ，还不行就看这个<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Networking">网络配置</a>。
</p>

<p>
查看硬盘就用 <code>lsblk</code> 或者 <code>fdisk -l</code> ，找到硬盘记住硬盘号，sda或者sdb什么的，如果记错的话，在后面的安装过程中你的数据就上天了。
</p>

<p>
现在要开始分区了，参考<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks">Preparing the disks</a>。一般人选择官方给出的分区配置就行了， <code>boot</code> 分区可以给大一点，内存够大的话 <code>swap</code> 分区可以不给，不想改的话直接翻到下面的分区命令，跟着文档按就分好区了。文档里有两种工具 <code>parted</code> 和 <code>fdisk</code> 随便选一个，介绍的都很详细，当然分区之前一定要确定好硬盘路径。
</p>

<p>
接下来就是选择文件系统， <code>boot</code> 分区使用 <code>ext2</code> 比较稳， <code>swap</code> 有固定的类型。用户自定义的就是 <code>root</code> 分区了，一般使用 <code>ext4</code> 就行了， 也可以选 <code>xfs</code> 。但如果想要更多特性的话可以选 <code>btrfs</code> 或 <code>zfs</code> ，有软raid、cow（写时复制）、动态分区大小之类的特性，当然配置更复杂，读写效率更低。当然用 <code>lvm</code> 工具 也可以实现一些特性。桌面用户就不要瞎凑合了。
</p>

<p>
使用 <code>mkfs</code> 格式化这些分区之后，再用 <code>mount</code> 挂载这些分区，先挂载 <code>root</code> 分区到 <code>/mnt/gentoo</code> 再把 <code>boot</code> 分区挂载到 <code>/mnt/gentoo/boot</code> ，不然后面安装引导会出事的。这样装备工作就完成了，接下来就是安装了。
</p>
</div>
</div>
</div>

<div id="outline-container-orga1dc35c" class="outline-3">
<h3 id="orga1dc35c">安装</h3>
<div class="outline-text-3" id="text-orga1dc35c">
</div>
<div id="outline-container-orgae8cfb0" class="outline-4">
<h4 id="orgae8cfb0">初始系统</h4>
<div class="outline-text-4" id="text-orgae8cfb0">
<p>
首先进入 <code>root</code> 分区挂载的目录，如果跟着官方教程走的话就是 <code>/mnt/gentoo</code> ，然后把下载的 <code>stage</code> 压缩包复制到这个目录。如果关心安全的话可以验证一下，下载页面有密钥的。然后直接解压 <code>stage</code> 就行了。
</p>
<div class="org-src-container">
<pre class="src src-shell">tar xpvf stage3-*.tar.xz --xattrs-include=<span style="color: #8a3b3c;">'*.*'</span> --numeric-owner
</pre>
</div>
</div>
</div>

<div id="outline-container-org040e27b" class="outline-4">
<h4 id="org040e27b">chroot</h4>
<div class="outline-text-4" id="text-org040e27b">
<p>
复制dns的配置文件，不然 <code>chroot</code> 后是没网的。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">cp</span> --dereference /etc/resolv.conf /mnt/gentoo/etc/
</pre>
</div>

<p>
然后还要 <code>mount</code> 一些分区，不然有些设备是用不了的，这些分区都是系统开机自动生成的，因为我们是 <code>chroot</code> 所以不会自动生成。
</p>
<div class="org-src-container">
<pre class="src src-shell">mount --types proc /proc /mnt/gentoo/proc
mount --rbind /sys /mnt/gentoo/sys
mount --make-rslave /mnt/gentoo/sys
mount --rbind /dev /mnt/gentoo/dev
mount --make-rslave /mnt/gentoo/dev
</pre>
</div>

<p>
仔细检查分区的挂载情况，然后直接 <code>chroot</code> 就进入安装的系统了，后面如果有地方配置不对，就从这一小节重新开始。
注意这三条命令不能一起复制到 <code>shell</code> 执行，因为 <code>chroot</code> 后就是新系统了。
</p>
<div class="org-src-container">
<pre class="src src-shell">chroot /mnt/gentoo /bin/bash
<span style="font-weight: bold;">source</span> /etc/profile
<span style="font-weight: bold;">export</span> <span style="color: #383a42;">PS1</span>=<span style="color: #8a3b3c;">"(chroot) </span><span style="color: #383a42;">$</span><span style="color: #383a42;">{PS1}</span><span style="color: #8a3b3c;">"</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgbd82bb8" class="outline-4">
<h4 id="orgbd82bb8">配置包管理</h4>
<div class="outline-text-4" id="text-orgbd82bb8">
<p>
因为Gentoo安装软件是在本机编译再安装的，所以可以自定义编译时的优化配置，比如可以专门针对你的cpu进行优化什么的，我们只需要更改几个选项就行了。
</p>

<p>
修改 <code>/etc/portage/make.conf</code> 文件，也可以不改，但后面安装软件时会比较慢，这个文件简单来说就是 <code>make</code> 时的参数配置，还没 <code>chroot</code> 的加上挂载目录的前缀。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#21518;&#38754;&#25968;&#23383;&#25913;&#25104;&#20320;cpu&#30340;&#32447;&#31243;&#25968;&#21152;1&#65292;&#34920;&#31034;&#24182;&#34892;&#32534;&#35793;&#25968;</span>
<span style="color: #383a42;">MAKEOPTS</span>=<span style="color: #8a3b3c;">"-j5"</span>
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#36825;&#20010;&#23601;&#26159;&#26356;&#26032;&#26102;&#30340;&#38236;&#20687;&#22320;&#22336;</span>
<span style="color: #383a42;">GENTOO_MIRRORS</span>=<span style="color: #8a3b3c;">"https://mirrors.neusoft.edu.cn/gentoo/"</span>
</pre>
</div>

<p>
Gentoo的包管理有个叫 <code>portage</code> 的东西，管理所有软件包的安装文件，存放的文件叫 <code>ebuild</code> ，作用是表示软件怎么下载、编译、安装等等。 <code>portage</code> 默认没有配置 <code>repos</code> ，所以我们要先加入官方的 <code>repos</code> 。官方有默认的配置文件，复制就行了，默认是使用 <code>rsync</code> 同步的，后期可以改成 <code>git</code> 的形式同步。下面的路径自己注意，指向安装的系统。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">mkdir</span> --parents /etc/portage/repos.conf
<span style="font-weight: bold;">cp</span> /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf

<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#19979;&#36733;portage&#26641;</span>
emerge-webrsync
</pre>
</div>

<p>
然后选择一个 <code>profile</code> ，它对一些软件包做了配置，因为有一些配置是通用的，选择和自己使用方式贴近的就行了。比如桌面用户就选择带 <code>desktop</code> 的，懂点英文的同学应该可以看懂，不懂的跟着文档选择就行了。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#26597;&#30475;&#20840;&#37096;profile</span>
eselect profile list

<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#36873;&#25321;profile&#20026;x</span>
eselect profile set X
</pre>
</div>

<p>
编译过大型软件的同学应该清楚，编译时有很多选项的，Gentoo就把这些选项做成了 <code>USE</code> 标记，只需要设置 <code>USE</code> 变量，编译时就能自动选择需要的功能，比如我想要软件支持声音就在 <code>USE</code> 里加入 <code>audio</code> 字段。如果字段前面有减号，表示去掉这个功能。在 <code>make.conf</code> 设置的 <code>USE</code> 变量是全局生效的， <code>/etc/portage/package.use</code> 可以针对单独软件设置 <code>USE</code> 。
</p>
</div>
</div>

<div id="outline-container-orgafdde12" class="outline-4">
<h4 id="orgafdde12">内核</h4>
<div class="outline-text-4" id="text-orgafdde12">
<p>
内核是安装Gentoo最难的地方了，不管怎么样首先要把内核的源码安装好。
</p>
<div class="org-src-container">
<pre class="src src-shell">emerge --ask sys-kernel/gentoo-sources
</pre>
</div>

<p>
编译内核的时候可以去配置其它的东西，当然引导必须内核安装好后再配置。
</p>

<p>
因为内核编译需要配置，一般有三种方法
</p>
</div>
<ul class="org-ul">
<li><a id="org8fb17ff"></a>手动配置<br>
<div class="outline-text-5" id="text-org8fb17ff">
<p>
进入内核源码的目录，然后参照<a href="http://www.jinbuguo.com/kernel/longterm-linux-kernel-options.html">Linux-4.4-x86_64 内核配置选项简介</a>一个一个选项进行配置。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#36825;&#26159;&#20010;&#36719;&#38142;&#25509;&#65292;&#21487;&#20197;&#20351;&#29992;eselect kernel&#31649;&#29702;</span>
<span style="font-weight: bold;">cd</span> /usr/src/linux
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#37197;&#32622;&#20869;&#26680;&#65292;&#25105;&#27604;&#36739;&#21916;&#27426; </span><span style="color: #556b2f; font-weight: bold;">make</span><span style="color: #556b2f;"> nconfig</span>
<span style="font-weight: bold;">make</span> menuconfig
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">-j&#21518;&#38754;&#36319;&#20320;&#30340;cpu&#32447;&#31243;&#25968;&#21152;1</span>
<span style="font-weight: bold;">make</span> -j5
<span style="font-weight: bold;">make</span> modules_install
<span style="font-weight: bold;">make</span> intall
</pre>
</div>
</div>
</li>
<li><a id="orgb210cee"></a>现有配置<br>
<div class="outline-text-5" id="text-orgb210cee">
<p>
一般的Linux都有个 <code>/proc/config.gz</code> 文件，保存着内核的配置，使用 <code>zcat</code> 命令可以读取。所以可以直接使用这个配置，当然你也可以网上下载不错的配置。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="font-weight: bold;">cd</span> /usr/src/linux
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">.config &#23601;&#26159;&#32534;&#35793;&#26102;&#20351;&#29992;&#30340;&#37197;&#32622;&#25991;&#20214;</span>
zcat /proc/config.gz &gt; .config
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#36319;&#24403;&#21069;&#20869;&#26680;&#21516;&#27493;&#19968;&#19979;&#65292;&#27605;&#31455;&#21442;&#25968;&#32463;&#24120;&#21464;&#21160;</span>
<span style="font-weight: bold;">make</span> syncconfig
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">-j&#21518;&#38754;&#36319;&#20320;&#30340;cpu&#32447;&#31243;&#25968;&#21152;1</span>
<span style="font-weight: bold;">make</span> -j5
<span style="font-weight: bold;">make</span> modules_install
<span style="font-weight: bold;">make</span> intall
</pre>
</div>
</div>
</li>
<li><a id="org9c23737"></a>genkernel<br>
<div class="outline-text-5" id="text-org9c23737">
<p>
使用这个命令可以直接编译内核，会把所有的选项都编译一遍，记得先更新 <code>/etc/fstab</code> ，缺点就是编译时间太长了。
</p>
<div class="org-src-container">
<pre class="src src-shell">emerge --ask sys-kernel/genkernel
genkernel all
</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-orgcfc631a" class="outline-4">
<h4 id="orgcfc631a">必备配置</h4>
<div class="outline-text-4" id="text-orgcfc631a">
<p>
开机必需的配置，比如自动挂载、网络、密码什么的
</p>
</div>
<ul class="org-ul">
<li><a id="org77c5d7a"></a>fstab<br>
<div class="outline-text-5" id="text-org77c5d7a">
<p>
这个是启动系统前自动挂载的分区，文件是 <code>/etc/fstab</code> 。使用 <code>lsblk</code> 看分区的情况，根据官方的例子修改一下就行了。
</p>
<pre class="example" id="orgdeb2f0b">
# 分区地址  挂载位置     类型    参数
/dev/sda2   /boot        ext2    defaults,noatime     0 2
/dev/sda3   none         swap    sw                   0 0
/dev/sda4   /            ext4    noatime              0 1

# 这个可以不要
/dev/cdrom  /mnt/cdrom   auto    noauto,user          0 0
</pre>
</div>
</li>

<li><a id="org979e15f"></a>网络<br>
<div class="outline-text-5" id="text-org979e15f">
<p>
要我说直接 <code>emerge networkmanager</code> 就行了，官方其它的配置都是一些可有可无的东西。
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#24320;&#26426;&#33258;&#21160;&#25171;&#24320; NetworkManager</span>
rc-update add NetworkManager default
</pre>
</div>
</div>
</li>

<li><a id="orgafad14a"></a>设置密码<br>
<div class="outline-text-5" id="text-orgafad14a">
<p>
使用 <code>passwd</code> 设置 <code>root</code> 用户密码。
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-orgefccea0" class="outline-4">
<h4 id="orgefccea0">引导</h4>
<div class="outline-text-4" id="text-orgefccea0">
<p>
一般都用 <code>grub</code> 来引导的，现在主板有两种 <code>BIOS</code> 和 <code>UEFI</code> ，比较新的主板都是 <code>UEFI</code> 的形式了，特点是界面非常漂亮。 <br>
自己根据情况在<a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Bootloader">配置引导</a>里找相应的配置方法，我主要列出 <code>BIOS</code> 的配置过程。
</p>
<div class="org-src-container">
<pre class="src src-shell">emerge --ask --verbose sys-boot/grub:2
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#23433;&#35013;&#24341;&#23548;&#21040;&#30828;&#30424;&#19978;&#65292;&#25214;&#21040;&#33258;&#24049;&#30340;&#30828;&#30424;&#20301;&#32622;&#65292;&#21518;&#38754;&#19981;&#35201;&#24102;&#25968;&#23383;</span>
grub-install /dev/sda
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#36825;&#20010;&#21253;&#21487;&#20197;&#33258;&#21160;&#26816;&#27979;&#25152;&#26377;&#30828;&#30424;&#19978;&#30340;&#31995;&#32479;&#24182;&#37197;&#32622;</span>
emerge os-prober
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#29983;&#25104;&#24341;&#23548;&#25991;&#20214;</span>
grub-mkconfig -o /boot/grub/grub.cfg
</pre>
</div>

<p>
以上全部弄好后就可以重启了，在 <code>BIOS</code> 里设置硬盘启动顺序，如果没有引导菜单，自己重新 <code>chroot</code> 查找原因。
</p>
</div>
</div>
</div>

<div id="outline-container-orga03c6cf" class="outline-3">
<h3 id="orga03c6cf">配置</h3>
<div class="outline-text-3" id="text-orga03c6cf">
</div>
<div id="outline-container-orgce1455e" class="outline-4">
<h4 id="orgce1455e">地区配置</h4>
<div class="outline-text-4" id="text-orgce1455e">
<p>
设置时区
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#35774;&#32622;&#26102;&#21306;&#20026;&#19978;&#28023;&#65292;&#21482;&#35201;&#26159;&#22312;&#20013;&#22269;&#23601;&#36825;&#26679;&#35774;&#32622;</span>
<span style="font-weight: bold;">echo</span> <span style="color: #8a3b3c;">"Asia/Shanghai"</span> &gt; /etc/timezone
emerge --config sys-libs/timezone-data
</pre>
</div>

<p>
设置语言，编辑 <code>/etc/locale.gen</code>
</p>
<pre class="example" id="org2ce904c">
en_US.UTF-8 UTF-8
zh_CN.UTF_8 UTF-8
C.UTF8 UTF-8
</pre>

<div class="org-src-container">
<pre class="src src-shell">locale-gen
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#26597;&#30475;locale&#36873;&#39033;</span>
eselect locale list
<span style="color: #556b2f;"># </span><span style="color: #556b2f;">&#36873;&#25321;&#20013;&#25991;&#25110;&#32773;&#33521;&#25991;</span>
eselect locale set x
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc8a98c7" class="outline-2">
<h2 id="orgc8a98c7">后记</h2>
<div class="outline-text-2" id="text-orgc8a98c7">
<p>
只列举了一些必要的配置，其它应用的配置在其它 <code>blog</code> 里展示。
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-linux.html">Linux</a> <a href="https://lampze.github.io/tag-gentoo.html">Gentoo</a> <a href="https://lampze.github.io/tag-guide.html">Guide</a> </div>]]></description>
  <category><![CDATA[Linux]]></category>
  <category><![CDATA[Gentoo]]></category>
  <category><![CDATA[Guide]]></category>
  <link>https://lampze.github.io/2020-gentoo-install.html</link>
  <pubDate>Tue, 30 Jun 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[krunner工作目录在根目录的问题]]></title>
  <description><![CDATA[

<div id="outline-container-org0a4be3b" class="outline-2">
<h2 id="org0a4be3b">前言</h2>
<div class="outline-text-2" id="text-org0a4be3b">
<p>
不知道有没有人在用 <code>plasma</code> 时发现和我一样的问题，有时 <code>Alt + Space</code> 打开 <code>konsole</code> 有时是 <code>root</code> 目录，有时是 <code>HOME</code> 目录。终端还好说直接 <code>cd</code> 就能跳转到 <code>HOME</code> 目录，但用 <code>emacs</code> 时就比较难受了。
</p>

<p>
在更新系统，切换版本等各种手段都用尽后我终于定位到 <code>BUG</code> 并且有比较方便的方法解决这个问题了。
</p>
</div>
</div>

<div id="outline-container-orgfff6879" class="outline-2">
<h2 id="orgfff6879">问题与解决</h2>
<div class="outline-text-2" id="text-orgfff6879">
<p>
我发现在桌面直接输入命令打开应用时会出现导致之后所以命令都是在 <code>root</code> 目录打开的，但使用 <code>Alt + Space</code> 命令打开 <code>krunner</code> 就不会有这个问题。
</p>

<p>
所以只需要改变一个用户习惯，一开机就按下快捷键就解决了。但根本问题还是没有解决，但继续查下去估计就要翻源码了，想探索的同学就继续吧，我给你加油。
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-plasma.html">plasma</a> <a href="https://lampze.github.io/tag-krunner.html">krunner</a> <a href="https://lampze.github.io/tag-linux.html">Linux</a> </div>]]></description>
  <category><![CDATA[plasma]]></category>
  <category><![CDATA[krunner]]></category>
  <category><![CDATA[Linux]]></category>
  <link>https://lampze.github.io/krunner-cwd.html</link>
  <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[谈谈Funtoo]]></title>
  <description><![CDATA[

<div id="outline-container-orge4e2e49" class="outline-2">
<h2 id="orge4e2e49">前言</h2>
<div class="outline-text-2" id="text-orge4e2e49">
<p>
先来说说我用过的 Linux 发行版吧，在初学 Linux 时我跟着教程用的 Centos，当时还在用虚拟机，因为 centos 不适合日常使用，所以我又尝试了 Ubuntu。慢慢的又听说了 Arch 的好玩之处，觉得对自己学习 Linux 有用，就一步一步的跟着 Arch 的 wiki 用命令行安装到电脑上了。好像是尝试了三四遍才把 Arch 安装好，配置好 Arch 后我也算是正式入门 Linux 了。随后就是在摸爬滚打中慢慢的学一些操作了，平时也在论坛里学习一些额外的知识，众所周知论坛 Arch 的地方一定有人说 gentoo，这也为我再次换系统埋下了种子。
</p>

<p>
在我的 Arch 日常滚挂了之后，我突然觉得 Arch 的包更新的太激进了，所以在看一个星期的教程后我正式转向 gentoo 了。其实安装 gentoo 和 Arch 的过程都差不了太多，只是 gentoo 的所有软件都要在本地编译，甚至连内核都要编译，这样有问题的包就不可能安装好，就不用担心包的问题，安心配置就好了。
</p>

<p>
安装 gentoo 最难弄的就是那个内核了，首先配置的内核是根据文档慢慢配置的，很多参数都不懂，安装一些软件时还要重新检查一遍内核，但大体都能用。后来在网上找到了一个内核参数的中文指南：<a href="http://www.jinbuguo.com/kernel/longterm-linux-kernel-options.html">Linux-4.4-x86_64 内核配置选项简介</a>。对于现在的内核来说有点过时，但大部分还是能用的。gentoo 还有一个好玩的地方就是 USE 系统，因为软件编译时可以选择各种选项，自己编译过的同学应该知道，所以 gentoo 的包管理有一个 USE 参数可以指定软件的各种功能编不编译，这样就可以精减一些没用的功能，或者防止 bug。
</p>

<p>
说实话 gentoo 真的比 Arch 稳定很多，但在论坛里玩的时候又听说了一个 Funtoo，是以前 gentoo 的创始人新做的一个系统，会同步更新 gentoo 的包，并且加入了一些新特性，我这样的人当然要准备玩一下了。
</p>
</div>
</div>

<div id="outline-container-orgec118b2" class="outline-2">
<h2 id="orgec118b2">体验</h2>
<div class="outline-text-2" id="text-orgec118b2">
<p>
首先 Funtoo 的系统基本都已经配置好了，用户只需要选择一些 flavor 和 mixin 就能个性化一些配置，比如桌面、显卡驱动之类的。Funtoo 的 portage 全部采用 git 来同步的，gentoo 则是使用 rsync，git 当然又快又稳定了。
</p>

<p>
Funtoo 自带一个内核，而用户也能自定义内核，但 Funtoo 又多了一个新的操作，给内核打一个 USE 标签就可以自动安装了，甚至还有 debian 的内核，对于新手更加友好了。
</p>

<p>
Funtoo 的 grub 配置也被重新设置了，使用 Funtoo 的配置文件，只需要指明哪里有系统就可以自动生成 grub 的配置文件，还可以加入一些启动参数，比 os-porber 更加灵活一些。
</p>
</div>
</div>

<div id="outline-container-orgc3ae3d9" class="outline-2">
<h2 id="orgc3ae3d9">后记</h2>
<div class="outline-text-2" id="text-orgc3ae3d9">
<p>
在体验完 Funtoo 了之后我还是决定回到 gentoo 来，因为 Funtoo 的一些包比 gentoo 的落后，虽然可以加入一些 overlay，但有些地方是不兼容的。虽然 Funtoo 的一些地方比 gentoo 更好，但 Funtoo 的使用者太少了，后来我也发现了一些东西是可以在 gentoo 上实现的。最后我把 gentoo 又重新安装了一遍。
</p>

<p>
后面会更新一个 gentoo 的安装避坑指南。
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-linux.html">Linux</a> <a href="https://lampze.github.io/tag-funtoo.html">Funtoo</a> </div>]]></description>
  <category><![CDATA[Linux]]></category>
  <category><![CDATA[Funtoo]]></category>
  <link>https://lampze.github.io/about-funtoo.html</link>
  <pubDate>Fri, 12 Jun 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[2020年蓝桥杯省模拟赛题解]]></title>
  <description><![CDATA[

<div id="outline-container-org5fb7153" class="outline-2">
<h2 id="org5fb7153">题解</h2>
<div class="outline-text-2" id="text-org5fb7153">
</div>
<div id="outline-container-orgfebb1f6" class="outline-3">
<h3 id="orgfebb1f6">第一题</h3>
<div class="outline-text-3" id="text-orgfebb1f6">
</div>
<div id="outline-container-org1214736" class="outline-4">
<h4 id="org1214736">题目</h4>
<div class="outline-text-4" id="text-org1214736">
<p>
在计算机存储中，12.5MB 是多少字节？
</p>
</div>
</div>
<div id="outline-container-org5854efe" class="outline-4">
<h4 id="org5854efe">解析</h4>
<div class="outline-text-4" id="text-org5854efe">
<p>
1MB=1024KB，1KB=1024B
</p>
</div>
</div>
<div id="outline-container-org70111e3" class="outline-4">
<h4 id="org70111e3">答案</h4>
<div class="outline-text-4" id="text-org70111e3">
<p>
13107200
</p>
</div>
</div>
</div>

<div id="outline-container-org7374fe4" class="outline-3">
<h3 id="org7374fe4">第二题</h3>
<div class="outline-text-3" id="text-org7374fe4">
</div>
<div id="outline-container-orgce5af3d" class="outline-4">
<h4 id="orgce5af3d">题目</h4>
<div class="outline-text-4" id="text-orgce5af3d">
<p>
由 1 对括号，可以组成一种合法括号序列：()。
</p>

<p>
由 2 对括号，可以组成两种合法括号序列：()()、(())。
</p>

<p>
由 4 对括号组成的合法括号序列一共有多少种？
</p>
</div>
</div>
<div id="outline-container-org68e5cf0" class="outline-4">
<h4 id="org68e5cf0">解析</h4>
<div class="outline-text-4" id="text-org68e5cf0">
<ul class="org-ul">
<li>直接查找卡特兰数</li>
<li>用栈模拟，左括号相当于入栈，右括号相当于出栈，这样将题目转换成了统计出入栈序列总数了。</li>
</ul>
</div>
</div>
<div id="outline-container-org55f14b1" class="outline-4">
<h4 id="org55f14b1">答案</h4>
<div class="outline-text-4" id="text-org55f14b1">
<p>
14
</p>
</div>
</div>
</div>

<div id="outline-container-org975c1e9" class="outline-3">
<h3 id="org975c1e9">第三题</h3>
<div class="outline-text-3" id="text-org975c1e9">
</div>
<div id="outline-container-org5003cdc" class="outline-4">
<h4 id="org5003cdc">题目</h4>
<div class="outline-text-4" id="text-org5003cdc">
<p>
将 LANQIAO 中的字母重新排列，可以得到不同的单词，LANQIAO、AAILNOQ 等，注意这 7 个字母都要被用上，单词不一定有具体的英文意义。请问，总共能排列如多少个不同的单词。
</p>
</div>
</div>
<div id="outline-container-org1130367" class="outline-4">
<h4 id="org1130367">解析</h4>
<div class="outline-text-4" id="text-org1130367">
<ul class="org-ul">
<li>有两个字母相同，其余都是不同字母，所以可以用组合数求出： \(\tbinom{7}{2}\tbinom{5}{1}\tbinom{4}{1}\tbinom{3}{1}\tbinom{2}{1}\tbinom{1}{1}\)</li>
<li>头铁的可以写全排序，然后去掉重复的。</li>
</ul>
</div>
</div>
<div id="outline-container-orgb24fd06" class="outline-4">
<h4 id="orgb24fd06">答案</h4>
<div class="outline-text-4" id="text-orgb24fd06">
<p>
2520
</p>
</div>
</div>
</div>

<div id="outline-container-orge49c842" class="outline-3">
<h3 id="orge49c842">第四题</h3>
<div class="outline-text-3" id="text-orge49c842">
</div>
<div id="outline-container-org8c386d9" class="outline-4">
<h4 id="org8c386d9">题目</h4>
<div class="outline-text-4" id="text-org8c386d9">
<p>
一个包含有 2019 个结点的无向连通图，最少包含多少条边？
</p>
</div>
</div>
<div id="outline-container-org1ed3cd2" class="outline-4">
<h4 id="org1ed3cd2">解析</h4>
<div class="outline-text-4" id="text-org1ed3cd2">
<p>
随便画一下两个三个结点的情况就明白了
</p>
</div>
</div>

<div id="outline-container-org49caaad" class="outline-4">
<h4 id="org49caaad">答案</h4>
<div class="outline-text-4" id="text-org49caaad">
<p>
2018
</p>
</div>
</div>
</div>

<div id="outline-container-org59fde9a" class="outline-3">
<h3 id="org59fde9a">第五题</h3>
<div class="outline-text-3" id="text-org59fde9a">
</div>
<div id="outline-container-org6c9e1c7" class="outline-4">
<h4 id="org6c9e1c7">题目</h4>
<div class="outline-text-4" id="text-org6c9e1c7">
<pre class="example" id="org05e0901">
问题描述
　　给定三个整数 a, b, c，如果一个整数既不是 a 的整数倍也不是 b 的整数倍还不是 c 的整数倍，则这个数称为反倍数。
　　请问在 1 至 n 中有多少个反倍数。
输入格式
　　输入的第一行包含一个整数 n。
　　第二行包含三个整数 a, b, c，相邻两个数之间用一个空格分隔。
输出格式
　　输出一行包含一个整数，表示答案。
样例输入
30
2 3 6
样例输出
10
样例说明
　　以下这些数满足要求：1, 5, 7, 11, 13, 17, 19, 23, 25, 29。
评测用例规模与约定
　　对于 40% 的评测用例，1 &lt;= n &lt;= 10000。
　　对于 80% 的评测用例，1 &lt;= n &lt;= 100000。
　　对于所有评测用例，1 &lt;= n &lt;= 1000000，1 &lt;= a &lt;= n，1 &lt;= b &lt;= n，1 &lt;= c &lt;= n。
</pre>
</div>
</div>
<div id="outline-container-org6f8a4bf" class="outline-4">
<h4 id="org6f8a4bf">解析</h4>
<div class="outline-text-4" id="text-org6f8a4bf">
<p>
直接枚举 1 至 n 所有数，然后统计就行了。
</p>
</div>
</div>
<div id="outline-container-org0475cc5" class="outline-4">
<h4 id="org0475cc5">答案</h4>
<div class="outline-text-4" id="text-org0475cc5">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">long</span> <span style="color: #383a42;">n</span>;
  cin &gt;&gt; n;
  <span style="font-weight: bold;">long</span> <span style="color: #383a42;">a</span>, <span style="color: #383a42;">b</span>, <span style="color: #383a42;">c</span>;
  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
  <span style="font-weight: bold;">long</span> <span style="color: #383a42;">cou</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">long</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= n; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>i % a &amp;&amp; i % b &amp;&amp; i % c<span style="color: #556b2f;">)</span>
      cou++;
  <span style="color: #a626a4;">}</span>
  cout &lt;&lt; cou &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org6e69e5c" class="outline-3">
<h3 id="org6e69e5c">第六题</h3>
<div class="outline-text-3" id="text-org6e69e5c">
</div>
<div id="outline-container-org10eff62" class="outline-4">
<h4 id="org10eff62">题目</h4>
<div class="outline-text-4" id="text-org10eff62">
<pre class="example" id="orgca127c7">
问题描述
　　给定一个单词，请使用凯撒密码将这个单词加密。
　　凯撒密码是一种替换加密的技术，单词中的所有字母都在字母表上向后偏移3位后被替换成密文。即a变为d，b变为e，...，w变为z，x变为a，y变为b，z变为c。
　　例如，lanqiao会变成odqtldr。
输入格式
　　输入一行，包含一个单词，单词中只包含小写英文字母。
输出格式
　　输出一行，表示加密后的密文。
样例输入
lanqiao
样例输出
odqtldr
评测用例规模与约定
　　对于所有评测用例，单词中的字母个数不超过100。
</pre>
</div>
</div>
<div id="outline-container-org4b0238f" class="outline-4">
<h4 id="org4b0238f">解析</h4>
<div class="outline-text-4" id="text-org4b0238f">
<p>
记录字符相对于 a 的偏移，然后加 3 并对 26 取余，这样就不会超过字符 z
</p>
</div>
</div>
<div id="outline-container-orgd4d12b9" class="outline-4">
<h4 id="orgd4d12b9">答案</h4>
<div class="outline-text-4" id="text-orgd4d12b9">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">char</span> <span style="font-weight: bold;">se</span><span style="color: #014980;">(</span><span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">p</span> = c - <span style="color: #8a3b3c;">'a'</span>;
  p = <span style="color: #a626a4;">(</span>p + <span style="color: #8a3b3c; font-weight: bold;">3</span><span style="color: #a626a4;">)</span> % <span style="color: #8a3b3c; font-weight: bold;">26</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c;">'a'</span> + p;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">char</span> <span style="color: #383a42;">c</span>;
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span>cin &gt;&gt; c<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    cout &lt;&lt; se<span style="color: #556b2f;">(</span>c<span style="color: #556b2f;">)</span>;
  <span style="color: #a626a4;">}</span>
  cout &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgcaabded" class="outline-3">
<h3 id="orgcaabded">第七题</h3>
<div class="outline-text-3" id="text-orgcaabded">
</div>
<div id="outline-container-org2c33622" class="outline-4">
<h4 id="org2c33622">题目</h4>
<div class="outline-text-4" id="text-org2c33622">
<pre class="example" id="orga340b4d">
问题描述
　　如果一个序列的奇数项都比前一项大，偶数项都比前一项小，则称为一个摆动序列。即 a[2i]&lt;a[2i-1], a[2i+1]&gt;a[2i]。
　　小明想知道，长度为 m，每个数都是 1 到 n 之间的正整数的摆动序列一共有多少个。
输入格式
　　输入一行包含两个整数 m，n。
输出格式
　　输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。
样例输入
3 4
样例输出
14
样例说明
　　以下是符合要求的摆动序列：
2 1 2
2 1 3
2 1 4
3 1 2
3 1 3
3 1 4
3 2 3
3 2 4
4 1 2
4 1 3
4 1 4
4 2 3
4 2 4
4 3 4
评测用例规模与约定
　　对于 20% 的评测用例，1 &lt;= n, m &lt;= 5；
　　对于 50% 的评测用例，1 &lt;= n, m &lt;= 10；
　　对于 80% 的评测用例，1 &lt;= n, m &lt;= 100；
　　对于所有评测用例，1 &lt;= n, m &lt;= 1000。
</pre>
</div>
</div>
<div id="outline-container-org4465eff" class="outline-4">
<h4 id="org4465eff">解析</h4>
<div class="outline-text-4" id="text-org4465eff">
<p>
最朴素的做法就是用 <code>dfs</code> 搜索，但 n m 的范围太大了，会超时。
</p>

<p>
所以我们就要用 dp 来做，首先确定公式的含义。
</p>

<p>
我们定义 <code>dp[i][j]</code> 表示第 i 项上放置比 j 大或小的数字的方案数，如何是偶数项就是比 j 小，奇数项就是比 j 大。
</p>

<p>
然后预处理初始条件，第一项的情况是固定的， <code>dp[1][j]</code> 肯定是 <code>n - j + 1</code> 因为比 j 大的数只有这么多。
</p>

<p>
接下来就是遍历每一行了。
</p>

<p>
奇数项的公式为 dp[i][j] = dp[i - 1][j - 1] + dp[i][j + 1] ，找到等于 j 的情况数和大于 j 的情况数然后加起来， <code>dp[i - 1][j - 1]</code> 表示前一项所有小于 <code>j - 1</code> 的情况数， <code>dp[i][j + 1]</code> 表示当前项所有大于 <code>j</code> 的情况数。
</p>

<p>
偶数项的公式为 dp[i][j] = dp[i-1][j+1] + dp[i][j-1] ，具体思路和上面一样，只不过方向换了。
</p>

<p>
最后注意遍历顺序就行了。
</p>
</div>
</div>
<div id="outline-container-org75ff4e6" class="outline-4">
<h4 id="org75ff4e6">答案</h4>
<div class="outline-text-4" id="text-org75ff4e6">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;
<span style="font-weight: bold;">int</span> <span style="color: #383a42;">dp</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">1004</span><span style="color: #014980;">][</span><span style="color: #8a3b3c; font-weight: bold;">1004</span><span style="color: #014980;">]</span>;
<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
    <span style="font-weight: bold;">int</span> <span style="color: #383a42;">m</span>,<span style="color: #383a42;">n</span>;
    cin&gt;&gt;m&gt;&gt;n;

    <span style="font-weight: bold;">for</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt;= n; i++<span style="color: #a626a4;">)</span>
        dp<span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">][</span>i<span style="color: #a626a4;">]</span> = n - i + <span style="color: #8a3b3c; font-weight: bold;">1</span>;

    <span style="font-weight: bold;">for</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">2</span>; i &lt;= m; i++<span style="color: #a626a4;">)</span>
        <span style="font-weight: bold;">if</span><span style="color: #a626a4;">(</span>i % <span style="color: #8a3b3c; font-weight: bold;">2</span><span style="color: #a626a4;">)</span>
            <span style="font-weight: bold;">for</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = n; j &gt;= <span style="color: #8a3b3c; font-weight: bold;">1</span>; j--<span style="color: #a626a4;">)</span>
                dp<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span> = <span style="color: #a626a4;">(</span>dp<span style="color: #556b2f;">[</span>i-<span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">][</span>j-<span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span> + dp<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">][</span>j+<span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> % <span style="color: #8a3b3c; font-weight: bold;">10000</span>;
        <span style="font-weight: bold;">else</span>
            <span style="font-weight: bold;">for</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; j &lt;= n; j++<span style="color: #a626a4;">)</span>
                dp<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span> = <span style="color: #a626a4;">(</span>dp<span style="color: #556b2f;">[</span>i-<span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">][</span>j+<span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span> + dp<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">][</span>j-<span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> % <span style="color: #8a3b3c; font-weight: bold;">10000</span>;

    cout &lt;&lt; <span style="color: #a626a4;">(</span>m % <span style="color: #8a3b3c; font-weight: bold;">2</span> ? dp<span style="color: #556b2f;">[</span>m<span style="color: #556b2f;">][</span><span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #556b2f;">]</span> : dp<span style="color: #556b2f;">[</span>m<span style="color: #556b2f;">][</span>n<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span> &lt;&lt; endl;
    <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org567da12" class="outline-3">
<h3 id="org567da12">第八题</h3>
<div class="outline-text-3" id="text-org567da12">
</div>
<div id="outline-container-org53b6c1e" class="outline-4">
<h4 id="org53b6c1e">题目</h4>
<div class="outline-text-4" id="text-org53b6c1e">
<pre class="example" id="orgb237926">
问题描述
　　对于一个 n 行 m 列的表格，我们可以使用螺旋的方式给表格依次填上正整数，我们称填好的表格为一个螺旋矩阵。
　　例如，一个 4 行 5 列的螺旋矩阵如下：
1 2 3 4 5
14 15 16 17 6
13 20 19 18 7
12 11 10 9 8
输入格式
　　输入的第一行包含两个整数 n, m，分别表示螺旋矩阵的行数和列数。
　　第二行包含两个整数 r, c，表示要求的行号和列号。
输出格式
　　输出一个整数，表示螺旋矩阵中第 r 行第 c 列的元素的值。
样例输入
4 5
2 2
样例输出
15
评测用例规模与约定
　　对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。
　　对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。
　　对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= r &lt;= n，1 &lt;= c &lt;= m。
</pre>
</div>
</div>
<div id="outline-container-orga50b0e4" class="outline-4">
<h4 id="orga50b0e4">解析</h4>
<div class="outline-text-4" id="text-orga50b0e4">
<p>
最简单的方法就是把整个螺旋矩阵画出来，然后输出特定位置的数。
</p>
</div>
</div>
<div id="outline-container-org62aab30" class="outline-4">
<h4 id="org62aab30">答案</h4>
<div class="outline-text-4" id="text-org62aab30">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>, <span style="color: #383a42;">m</span>;
  cin &gt;&gt; n &gt;&gt; m;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">r</span>, <span style="color: #383a42;">c</span>;
  cin &gt;&gt; r &gt;&gt; c;
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">all</span><span style="color: #a626a4;">[</span>n<span style="color: #a626a4;">][</span>m<span style="color: #a626a4;">]</span>, <span style="color: #383a42;">tot</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>, <span style="color: #383a42;">x</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #383a42;">y</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; m; j++<span style="color: #a626a4;">)</span>
      all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">][</span>j<span style="color: #a626a4;">]</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  all<span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">][</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">]</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>;
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span>tot != n * m<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">while</span> <span style="color: #556b2f;">(</span>y + <span style="color: #8a3b3c; font-weight: bold;">1</span> &lt; m &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all<span style="color: #b751b6;">[</span>x<span style="color: #b751b6;">][</span>y + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>
      all<span style="color: #556b2f;">[</span>x<span style="color: #556b2f;">][</span>++y<span style="color: #556b2f;">]</span> = ++tot;
    <span style="font-weight: bold;">while</span> <span style="color: #556b2f;">(</span>x + <span style="color: #8a3b3c; font-weight: bold;">1</span> &lt; n &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all<span style="color: #b751b6;">[</span>x + <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #b751b6;">][</span>y<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>
      all<span style="color: #556b2f;">[</span>++x<span style="color: #556b2f;">][</span>y<span style="color: #556b2f;">]</span> = ++tot;
    <span style="font-weight: bold;">while</span> <span style="color: #556b2f;">(</span>y - <span style="color: #8a3b3c; font-weight: bold;">1</span> &gt;= <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all<span style="color: #b751b6;">[</span>x<span style="color: #b751b6;">][</span>y - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>
      all<span style="color: #556b2f;">[</span>x<span style="color: #556b2f;">][</span>--y<span style="color: #556b2f;">]</span> = ++tot;
    <span style="font-weight: bold;">while</span> <span style="color: #556b2f;">(</span>x - <span style="color: #8a3b3c; font-weight: bold;">1</span> &gt;= <span style="color: #8a3b3c; font-weight: bold;">0</span> &amp;&amp; <span style="color: #383a42; font-weight: bold;">!</span>all<span style="color: #b751b6;">[</span>x - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #b751b6;">][</span>y<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>
      all<span style="color: #556b2f;">[</span>--x<span style="color: #556b2f;">][</span>y<span style="color: #556b2f;">]</span> = ++tot;
  <span style="color: #a626a4;">}</span>
  cout &lt;&lt; all<span style="color: #a626a4;">[</span>r - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">][</span>c - <span style="color: #8a3b3c; font-weight: bold;">1</span><span style="color: #a626a4;">]</span> &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgcc92523" class="outline-3">
<h3 id="orgcc92523">第九题</h3>
<div class="outline-text-3" id="text-orgcc92523">
</div>
<div id="outline-container-orga0ca9c0" class="outline-4">
<h4 id="orga0ca9c0">题目</h4>
<div class="outline-text-4" id="text-orga0ca9c0">
<pre class="example" id="orgf974125">
问题描述
　　2015年，全中国实现了户户通电。作为一名电力建设者，小明正在帮助一带一路上的国家通电。
　　这一次，小明要帮助 n 个村庄通电，其中 1 号村庄正好可以建立一个发电站，所发的电足够所有村庄使用。
　　现在，这 n 个村庄之间都没有电线相连，小明主要要做的是架设电线连接这些村庄，使得所有村庄都直接或间接的与发电站相通。
　　小明测量了所有村庄的位置（坐标）和高度，如果要连接两个村庄，小明需要花费两个村庄之间的坐标距离加上高度差的平方，形式化描述为坐标为 (x_1, y_1) 高度为 h_1 的村庄与坐标为 (x_2, y_2) 高度为 h_2 的村庄之间连接的费用为
　　sqrt((x_1-x_2)*(x_1-x_2)+(y_1-y_2)*(y_1-y_2))+(h_1-h_2)*(h_1-h_2)。
　　在上式中 sqrt 表示取括号内的平方根。请注意括号的位置，高度的计算方式与横纵坐标的计算方式不同。
　　由于经费有限，请帮助小明计算他至少要花费多少费用才能使这 n 个村庄都通电。
输入格式
　　输入的第一行包含一个整数 n ，表示村庄的数量。
　　接下来 n 行，每个三个整数 x, y, h，分别表示一个村庄的横、纵坐标和高度，其中第一个村庄可以建立发电站。
输出格式
　　输出一行，包含一个实数，四舍五入保留 2 位小数，表示答案。
样例输入
4
1 1 3
9 9 7
8 8 6
4 5 4
样例输出
17.41
评测用例规模与约定
　　对于 30% 的评测用例，1 &lt;= n &lt;= 10；
　　对于 60% 的评测用例，1 &lt;= n &lt;= 100；
　　对于所有评测用例，1 &lt;= n &lt;= 1000，0 &lt;= x, y, h &lt;= 10000。
</pre>
</div>
</div>
<div id="outline-container-orgfe1a705" class="outline-4">
<h4 id="orgfe1a705">解析</h4>
<div class="outline-text-4" id="text-orgfe1a705">
<p>
可以抽象成有 n 个全相连结点的图，边是拉电线的费用，然后找最小生成树就好了。
</p>
</div>
</div>
<div id="outline-container-org2f25b39" class="outline-4">
<h4 id="org2f25b39">答案</h4>
<div class="outline-text-4" id="text-org2f25b39">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">queue</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">cmath</span><span style="color: #014980;">&gt;</span>
<span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">cstdio</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">poi</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span>, <span style="color: #383a42;">y</span>, <span style="color: #383a42;">h</span>;
<span style="color: #014980;">}</span>;

<span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">roa</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">to</span>;
  <span style="font-weight: bold;">float</span> <span style="color: #383a42;">len</span>;
  <span style="font-weight: bold;">bool</span> <span style="font-weight: bold;">operator</span><span style="font-weight: bold;">&lt;</span><span style="color: #a626a4;">(</span><span style="font-weight: bold;">const</span> <span style="font-weight: bold;">roa</span>&amp; <span style="color: #383a42;">a</span><span style="color: #a626a4;">)</span> <span style="font-weight: bold;">const</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">return</span> len &gt; a.len;
  <span style="color: #a626a4;">}</span>
<span style="color: #014980;">}</span>;

<span style="font-weight: bold;">float</span> <span style="font-weight: bold;">calc</span><span style="color: #014980;">(</span><span style="font-weight: bold;">poi</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">poi</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span> = a.x - b.x, <span style="color: #383a42;">y</span> = a.y - b.y,<span style="color: #383a42;">h</span> = a.h - b.h;
  <span style="font-weight: bold;">return</span> sqrt<span style="color: #a626a4;">(</span>x * x + y * y<span style="color: #a626a4;">)</span> + h * h;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="color: #383a42;">check</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">1001</span><span style="color: #014980;">]</span>;

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>;
  cin &gt;&gt; n;
  <span style="font-weight: bold;">poi</span> <span style="color: #383a42;">all</span><span style="color: #a626a4;">[</span>n<span style="color: #a626a4;">]</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    cin &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>.x &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>.y &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>.h;

  <span style="color: #556b2f;">//</span><span style="color: #556b2f;">for (int i = 0; i &lt; n; i++) {</span>
  <span style="color: #556b2f;">//  </span><span style="color: #556b2f;">for (int j = 0; j &lt; n; j++)</span>
  <span style="color: #556b2f;">//    </span><span style="color: #556b2f;">cout &lt;&lt; calc(all[i], all[j]) &lt;&lt; " ";</span>
  <span style="color: #556b2f;">//  </span><span style="color: #556b2f;">cout &lt;&lt; endl;</span>
  <span style="color: #556b2f;">//</span><span style="color: #556b2f;">}</span>

  <span style="font-weight: bold;">priority_queue</span><span style="color: #a626a4;">&lt;</span><span style="font-weight: bold;">roa</span><span style="color: #a626a4;">&gt;</span> <span style="color: #383a42;">q</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>; i &lt; n; i++<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">roa</span> *<span style="color: #383a42;">a</span> = <span style="font-weight: bold;">new</span> <span style="font-weight: bold;">roa</span>;
    a-&gt;to = i;
    a-&gt;len = calc<span style="color: #556b2f;">(</span>all<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">]</span>, all<span style="color: #b751b6;">[</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>;
    q.push<span style="color: #556b2f;">(</span>*a<span style="color: #556b2f;">)</span>;
  <span style="color: #a626a4;">}</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">cou</span> = <span style="color: #8a3b3c; font-weight: bold;">1</span>;
  <span style="font-weight: bold;">float</span> <span style="color: #383a42;">sum</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;
  check<span style="color: #a626a4;">[</span><span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">]</span> = <span style="color: #383a42;">true</span>;
  <span style="font-weight: bold;">while</span> <span style="color: #a626a4;">(</span><span style="color: #383a42; font-weight: bold;">!</span>q.empty<span style="color: #556b2f;">()</span> &amp;&amp; cou &lt; n<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">roa</span> <span style="color: #383a42;">a</span> = q.top<span style="color: #556b2f;">()</span>;
    q.pop<span style="color: #556b2f;">()</span>;
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>check<span style="color: #b751b6;">[</span>a.to<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span>
      <span style="font-weight: bold;">continue</span>;
    sum += a.len;
    cou++;
    check<span style="color: #556b2f;">[</span>a.to<span style="color: #556b2f;">]</span> = <span style="color: #383a42;">true</span>;
    <span style="font-weight: bold;">for</span> <span style="color: #556b2f;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #556b2f;">)</span>
      <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span><span style="color: #383a42; font-weight: bold;">!</span>check<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span> <span style="color: #556b2f;">{</span>
        <span style="font-weight: bold;">roa</span> *<span style="color: #383a42;">nex</span> = <span style="font-weight: bold;">new</span> <span style="font-weight: bold;">roa</span>;
        nex-&gt;to = i;
        nex-&gt;len = calc<span style="color: #b751b6;">(</span>all<span style="color: #014980;">[</span>i<span style="color: #014980;">]</span>, all<span style="color: #014980;">[</span>a.to<span style="color: #014980;">]</span><span style="color: #b751b6;">)</span>;
        q.push<span style="color: #b751b6;">(</span>*nex<span style="color: #b751b6;">)</span>;
      <span style="color: #556b2f;">}</span>
  <span style="color: #a626a4;">}</span>
  printf<span style="color: #a626a4;">(</span><span style="color: #8a3b3c;">"%.2f\n"</span>,round<span style="color: #556b2f;">(</span>sum * <span style="color: #8a3b3c; font-weight: bold;">100</span><span style="color: #556b2f;">)</span> / <span style="color: #8a3b3c; font-weight: bold;">100</span><span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org30b5769" class="outline-3">
<h3 id="org30b5769">第十题</h3>
<div class="outline-text-3" id="text-org30b5769">
</div>
<div id="outline-container-orgf6010a6" class="outline-4">
<h4 id="orgf6010a6">题目</h4>
<div class="outline-text-4" id="text-orgf6010a6">
<pre class="example" id="orgffe14a8">
问题描述
　　小明和朋友们一起去郊外植树，他们带了一些在自己实验室精心研究出的小树苗。
　　小明和朋友们一共有 n 个人，他们经过精心挑选，在一块空地上每个人挑选了一个适合植树的位置，总共 n 个。他们准备把自己带的树苗都植下去。
　　然而，他们遇到了一个困难：有的树苗比较大，而有的位置挨太近，导致两棵树植下去后会撞在一起。
　　他们将树看成一个圆，圆心在他们找的位置上。如果两棵树对应的圆相交，这两棵树就不适合同时植下（相切不受影响），称为两棵树冲突。
　　小明和朋友们决定先合计合计，只将其中的一部分树植下去，保证没有互相冲突的树。他们同时希望这些树所能覆盖的面积和（圆面积和）最大。
输入格式
　　输入的第一行包含一个整数 n ，表示人数，即准备植树的位置数。
　　接下来 n 行，每行三个整数 x, y, r，表示一棵树在空地上的横、纵坐标和半径。
输出格式
　　输出一行包含一个整数，表示在不冲突下可以植树的面积和。由于每棵树的面积都是圆周率的整数倍，请输出答案除以圆周率后的值（应当是一个整数）。
样例输入
6
1 1 2
1 4 2
1 7 2
4 1 2
4 4 2
4 7 2
样例输出
12
评测用例规模与约定
　　对于 30% 的评测用例，1 &lt;= n &lt;= 10；
　　对于 60% 的评测用例，1 &lt;= n &lt;= 20；
　　对于所有评测用例，1 &lt;= n &lt;= 30，0 &lt;= x, y &lt;= 1000，1 &lt;= r &lt;= 1000。
</pre>
</div>
</div>
<div id="outline-container-orgca414cb" class="outline-4">
<h4 id="orgca414cb">解析</h4>
<div class="outline-text-4" id="text-orgca414cb">
<p>
只想出了 <code>dfs</code> 搜索的方法，最高有 30 层，每层最多有两个分支，所以最高会有 <code>2^30</code> 次操作，但大部分都会被剪掉，不知道能不能过全部用例。
</p>

<p>
简单来说就是每次有两种操作，种或者不种，不种是每次都可以选的，种的话就要和之前种下的树检测一下有没有冲突，记录好树的状态并写好回溯就行了。
</p>
</div>
</div>
<div id="outline-container-org1dc34d2" class="outline-4">
<h4 id="org1dc34d2">答案</h4>
<div class="outline-text-4" id="text-org1dc34d2">
<div class="org-src-container">
<pre class="src src-c++"><span style="color: #383a42; font-weight: bold;">#include</span> <span style="color: #014980;">&lt;</span><span style="color: #8a3b3c;">iostream</span><span style="color: #014980;">&gt;</span>

<span style="font-weight: bold;">using</span> <span style="font-weight: bold;">namespace</span> <span style="color: #383a42;">std</span>;

<span style="font-weight: bold;">int</span> <span style="color: #383a42;">n</span>;

<span style="font-weight: bold;">struct</span> <span style="font-weight: bold;">tree</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">x</span>, <span style="color: #383a42;">y</span>, <span style="color: #383a42;">r</span>;
<span style="color: #014980;">}</span>;

<span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">m</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>;

<span style="font-weight: bold;">tree</span> <span style="color: #383a42;">all</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">31</span><span style="color: #014980;">]</span>;
<span style="font-weight: bold;">bool</span> <span style="color: #383a42;">check</span><span style="color: #014980;">[</span><span style="color: #8a3b3c; font-weight: bold;">31</span><span style="color: #014980;">]</span>;

<span style="font-weight: bold;">bool</span> <span style="font-weight: bold;">ch</span><span style="color: #014980;">(</span><span style="font-weight: bold;">tree</span> <span style="color: #383a42;">a</span>, <span style="font-weight: bold;">tree</span> <span style="color: #383a42;">b</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">int</span> <span style="color: #383a42;">r</span> = a.r + b.r, <span style="color: #383a42;">x</span> = a.x - b.x, <span style="color: #383a42;">y</span> = a.y - b.y;
  <span style="font-weight: bold;">return</span> r * r &gt; x * x + y * y;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">void</span> <span style="font-weight: bold;">dfs</span><span style="color: #014980;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">now</span>, <span style="font-weight: bold;">long</span> <span style="font-weight: bold;">long</span> <span style="color: #383a42;">sum</span><span style="color: #014980;">)</span> <span style="color: #014980;">{</span>
  <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>now &gt;= n<span style="color: #a626a4;">)</span> <span style="color: #a626a4;">{</span>
    <span style="font-weight: bold;">if</span> <span style="color: #556b2f;">(</span>sum &gt; m<span style="color: #556b2f;">)</span>
      m = sum;
    <span style="font-weight: bold;">return</span>;
  <span style="color: #a626a4;">}</span>
  dfs<span style="color: #a626a4;">(</span>now + <span style="color: #8a3b3c; font-weight: bold;">1</span>, sum<span style="color: #a626a4;">)</span>;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>check<span style="color: #556b2f;">[</span>i<span style="color: #556b2f;">]</span><span style="color: #a626a4;">)</span>
      <span style="font-weight: bold;">if</span> <span style="color: #a626a4;">(</span>ch<span style="color: #556b2f;">(</span>all<span style="color: #b751b6;">[</span>i<span style="color: #b751b6;">]</span>, all<span style="color: #b751b6;">[</span>now<span style="color: #b751b6;">]</span><span style="color: #556b2f;">)</span><span style="color: #a626a4;">)</span>
        <span style="font-weight: bold;">return</span>;
  check<span style="color: #a626a4;">[</span>now<span style="color: #a626a4;">]</span> = <span style="color: #383a42;">true</span>;
  dfs<span style="color: #a626a4;">(</span>now + <span style="color: #8a3b3c; font-weight: bold;">1</span>, sum + all<span style="color: #556b2f;">[</span>now<span style="color: #556b2f;">]</span>.r * all<span style="color: #556b2f;">[</span>now<span style="color: #556b2f;">]</span>.r<span style="color: #a626a4;">)</span>;
  check<span style="color: #a626a4;">[</span>now<span style="color: #a626a4;">]</span> = <span style="color: #383a42;">false</span>;
<span style="color: #014980;">}</span>

<span style="font-weight: bold;">int</span> <span style="font-weight: bold;">main</span><span style="color: #014980;">()</span> <span style="color: #014980;">{</span>
  cin &gt;&gt; n;
  <span style="font-weight: bold;">for</span> <span style="color: #a626a4;">(</span><span style="font-weight: bold;">int</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; n; i++<span style="color: #a626a4;">)</span>
    cin &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>.x &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>.y &gt;&gt; all<span style="color: #a626a4;">[</span>i<span style="color: #a626a4;">]</span>.r;
  dfs<span style="color: #a626a4;">(</span><span style="color: #8a3b3c; font-weight: bold;">0</span>, <span style="color: #8a3b3c; font-weight: bold;">0</span><span style="color: #a626a4;">)</span>;
  cout &lt;&lt; m &lt;&lt; endl;
  <span style="font-weight: bold;">return</span> <span style="color: #8a3b3c; font-weight: bold;">0</span>;
<span style="color: #014980;">}</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-蓝桥杯.html">蓝桥杯</a> <a href="https://lampze.github.io/tag-算法.html">算法</a> <a href="https://lampze.github.io/tag-题解.html">题解</a> </div>]]></description>
  <category><![CDATA[蓝桥杯]]></category>
  <category><![CDATA[算法]]></category>
  <category><![CDATA[题解]]></category>
  <link>https://lampze.github.io/2020-lanqiao-Provincial-Simulation.html</link>
  <pubDate>Mon, 20 Apr 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[华夏学院抢课分析]]></title>
  <description><![CDATA[

<div id="outline-container-orge210859" class="outline-2">
<h2 id="orge210859">前言</h2>
<div class="outline-text-2" id="text-orge210859">
<p>
因为我上次抢课时认真的掐准时间时间进去抢，然后发现所有的课都秒没了，
所以一怒之下就写了个脚本来帮我抢课。这次一试，果然选上了我想要的课。
</p>

<p>
其实以前选课时都是无所谓的，只要修满 10 学分就行，但最近学校要求我们三种类型的课程必须
每个都要修满 2 学分，所以有一种类型的课就变得特别难抢。
这次抢课正常抢的同学都说没有选上那种类型的，
看来早就有人写了这种脚本了。
</p>

<p>
本教程只讨论原理，不教如何使用，请自行钻研，下面我就来分析一下这个脚本怎么写的。
</p>
</div>
</div>

<div id="outline-container-org2f1a8c5" class="outline-2">
<h2 id="org2f1a8c5">API</h2>
<div class="outline-text-2" id="text-org2f1a8c5">
<p>
我使用的方法是直接获取页面上的 <code>DOM</code> 然后使用 <code>DOM</code> 的 <code>click</code> 函数，比直接用后
端的接口肯定要慢许多，但我也不想把整个网页的代码看一遍，而且使用这种技术的人应该
也不多，我认为只要在 1 秒内完成就差不多了。
</p>

<p>
接下来我就趁着选课系统还未关闭开始记录下那些 <code>DOM</code> 的获取方法。
</p>

<p>
以后学校更新系统的话下面的东西可能要改，当然我是不会更新的。
</p>

<div class="org-src-container">
<pre class="src src-js">$(<span style="color: #8a3b3c;">".search-filter button"</span>)[<span style="color: #8a3b3c; font-weight: bold;">0</span>].click();     <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21015;&#20986;&#25152;&#26377;&#35838;&#31243;</span>
$(<span style="color: #8a3b3c;">"#contentBox .panel-title"</span>);             <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25152;&#26377;&#35838;&#31243;&#30340;&#26631;&#39064;</span>
$(<span style="color: #8a3b3c;">"#contentBox .panel-title"</span>)[<span style="color: #8a3b3c; font-weight: bold;">0</span>].click();  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#26174;&#31034;&#35838;&#31243;</span>
$(<span style="color: #8a3b3c;">"#contentBox .panel td.an button"</span>);      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#35838;&#31243;&#30340;&#30830;&#35748;&#25353;&#38062;</span>
loadCoursesByPaged();                      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21152;&#36733;&#21097;&#20313;&#30340;&#35838;&#31243;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgef7b505" class="outline-2">
<h2 id="orgef7b505">代码</h2>
<div class="outline-text-2" id="text-orgef7b505">
<p>
然后就可以开始写代码了，
我只实现了基本的抢课功能，没有写定时，如果没开放系统可能会把网页卡住，想改的自己改。
学校的系统是用 <code>Bootstrap</code> 和 <code>jQuery</code> 写的，不用自己导入了。
</p>

<div class="org-src-container">
<pre class="src src-js"><span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#30495;&#23454;&#33719;&#21462;dom&#65292;&#22240;&#20026;&#21487;&#33021;&#32593;&#39029;&#27809;&#26377;&#28210;&#26579;&#23436;&#65292;dom&#27809;&#27491;&#24120;&#29983;&#25104;</span>
<span style="font-weight: bold;">function</span> <span style="font-weight: bold;">getDom</span>(<span style="color: #383a42;">name</span>) {
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25105;&#27809;&#26377;&#21152;&#33410;&#27969;&#65292;&#24819;&#24324;&#30340;&#35805;&#33258;&#24049;&#20889;</span>
  time = <span style="color: #8a3b3c; font-weight: bold;">10000</span>;
  <span style="font-weight: bold;">while</span> (!$(name).length &amp;&amp; time--);
  <span style="font-weight: bold;">return</span> $(name);
}

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">the world</span>
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20026;&#20102;&#26041;&#20415;&#20889;&#20102;&#20010;&#30561;&#30496;&#20989;&#25968;&#65292;&#21482;&#33021;&#22312;&#21516;&#27493;&#20989;&#25968;&#37324;&#29992;&#65292;&#35745;&#37327;&#21333;&#20301;&#26159;&#27627;&#31186;</span>
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#19981;&#24310;&#26102;&#30340;&#35805;&#65292;&#27979;&#35797;&#26102;&#24635;&#26377;&#20123;</span><span style="color: #e45649; font-weight: bold;">BUG</span><span style="color: #556b2f;">&#65292;&#30475;&#20320;&#33258;&#24049;&#20102;</span>
<span style="font-weight: bold;">function</span> <span style="font-weight: bold;">sleep</span>(<span style="color: #383a42;">time</span>) {
  <span style="font-weight: bold;">return</span> <span style="font-weight: bold;">new</span> <span style="font-weight: bold;">Promise</span>(resolve =&gt; setTimeout(resolve, time));
}

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#35843;&#29992;&#36825;&#20010;&#20989;&#25968;&#23601;&#30452;&#25509;&#25250;&#35838;&#20102;&#27604;&#22914;: getClass('&#25209;&#21028;', 10)</span>
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">want&#26159;&#19968;&#20010;&#25968;&#32452;&#65292;&#20869;&#23481;&#26159;&#35201;&#24819;&#35201;&#25250;&#30340;&#35838;&#30340;&#20851;&#38190;&#23383;</span>
<span style="color: #556b2f;">// </span><span style="color: #556b2f;">sleepTime&#26159;&#27599;&#27425;&#24310;&#26102;&#30340;&#26102;&#38388;&#65292;&#20027;&#35201;&#26159;&#25285;&#24515;&#27809;dom&#27809;&#29983;&#25104;&#30340;&#38382;&#39064;</span>
<span style="font-weight: bold;">async</span> <span style="font-weight: bold;">function</span> getClass(<span style="color: #383a42;">want</span>, <span style="color: #383a42;">sleepTime</span>) {
  <span style="font-weight: bold;">await</span> sleep(sleepTime);
  getDom(<span style="color: #8a3b3c;">".search-filter button"</span>)[<span style="color: #8a3b3c; font-weight: bold;">0</span>].click(); <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#21015;&#20986;&#25152;&#26377;&#35838;&#31243;</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#30452;&#25509;&#21152;&#36733;10&#27425;&#65292;&#24212;&#35813;&#27809;&#26377;&#37027;&#20040;&#22810;&#35838;&#35753;&#20320;&#36873;&#30340;</span>
  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold;">var</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; <span style="color: #8a3b3c; font-weight: bold;">10</span>; i++) {
    <span style="font-weight: bold;">await</span> sleep(sleepTime);
    loadCoursesByPaged();
  }
  <span style="font-weight: bold;">var</span> <span style="color: #383a42;">panelTitle</span> = getDom(<span style="color: #8a3b3c;">"#contentBox .panel-title"</span>); <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#33719;&#21462;&#25152;&#26377;&#35838;&#31243;&#26631;&#39064;&#30340;Dom</span>

  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#35838;&#31243;</span>
  <span style="font-weight: bold;">for</span> (<span style="font-weight: bold;">var</span> <span style="color: #383a42;">i</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; i &lt; panelTitle.length; i++) {
    <span style="font-weight: bold;">var</span> <span style="color: #383a42;">thisTitle</span> = panelTitle[i].innerText;

    <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36941;&#21382;&#20851;&#38190;&#23383;&#65292;&#36873;&#25321;&#35201;&#36873;&#30340;&#35838;</span>
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold;">var</span> <span style="color: #383a42;">j</span> = <span style="color: #8a3b3c; font-weight: bold;">0</span>; j &lt; want.length; j++)
      <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#26597;&#25214;&#26159;&#21542;&#22312;&#26631;&#39064;&#20869;</span>
      <span style="font-weight: bold;">if</span> (~thisTitle.indexOf(want[j])) {
        <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#25214;&#21040;&#20102;</span>
        console.log(thisTitle);

        <span style="font-weight: bold;">await</span> sleep(sleepTime);
        panelTitle[i].click(); <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#26174;&#31034;&#35838;&#31243;&#65292;&#21487;&#33021;&#21487;&#20197;&#19981;&#29992;&#23637;&#24320;&#65292;&#20294;&#25105;&#20026;&#20102;&#20445;&#38505;</span>

        <span style="font-weight: bold;">await</span> sleep(sleepTime);
        <span style="font-weight: bold;">var</span> <span style="color: #383a42;">selectDom</span> = getDom(<span style="color: #8a3b3c;">"#contentBox .panel td.an button"</span>)[i];
        <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36991;&#20813;&#36864;&#36873;</span>
        <span style="font-weight: bold;">if</span> (selectDom.innerText == <span style="color: #8a3b3c;">"&#36873;&#35838;"</span>) {
          selectDom.click(); <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36873;&#25321;&#35838;&#31243;</span>

          <span style="font-weight: bold;">await</span> sleep(sleepTime);
          getDom(<span style="color: #8a3b3c;">"#btn_confirm"</span>).click(); <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#30830;&#35748;&#36873;&#25321;</span>
        }
      }
  }
}
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-前端.html">前端</a> </div>]]></description>
  <category><![CDATA[前端]]></category>
  <link>https://lampze.github.io/hx-auto-select-class.html</link>
  <pubDate>Tue, 31 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[记2020年3月25日核酸检测]]></title>
  <description><![CDATA[
<div id="outline-container-org58604d5" class="outline-2">
<h2 id="org58604d5">前言</h2>
<div class="outline-text-2" id="text-org58604d5">
<p>
我爸一直想回老家，但社区不放行，必须要我们做两次核酸检测才放，3月 25 号刚通公交，
正好今天让我们去做检测。
</p>
</div>
</div>

<div id="outline-container-org4966dcd" class="outline-2">
<h2 id="org4966dcd">过程</h2>
<div class="outline-text-2" id="text-org4966dcd">
</div>
<div id="outline-container-org557b5d0" class="outline-3">
<h3 id="org557b5d0">出小区</h3>
<div class="outline-text-3" id="text-org557b5d0">
<p>
先要登记，填写一个出行表才能出小区。外出必须要在两个小时内回来，不然三天都不能出
行。
</p>
</div>
</div>

<div id="outline-container-org4a32b47" class="outline-3">
<h3 id="org4a32b47">坐公交车去医院</h3>
<div class="outline-text-3" id="text-org4a32b47">
<p>
公交车半个小时才一辆，上车需要准备 复工证明、健康码、小区通行证明。上下车时需要
扫码登记。
</p>
</div>
</div>

<div id="outline-container-orgb40fa53" class="outline-3">
<h3 id="orgb40fa53">核酸检测</h3>
<div class="outline-text-3" id="text-orgb40fa53">
<p>
核酸检测是在医院在广场上进行的，避免交叉感染，护士们都做了全身防护。做之前先要核对信息，
然后给一个小瓶，登记册和瓶子上各贴一个条形码。然后在远处一个凳子上坐好，护士用一
个棉签在我在口腔内滑过一圈，然后把棉签放入瓶子内就可以离开了。
</p>

<p>
护士说检测的结果可以在网上查询。
</p>
</div>
</div>

<div id="outline-container-org1751d90" class="outline-3">
<h3 id="org1751d90">坐公交车回小区</h3>
<div class="outline-text-3" id="text-org1751d90">
<p>
过程上面一致，但有一伙人因为证件的问题扯了将近 10 分钟，最后司机叫了领导过来才走的。
</p>

<p>
可能一开始是别人送他们过来的，后来那个人走了，而其它人的证件不全，所以不能上车。
</p>
</div>
</div>

<div id="outline-container-org8cfabda" class="outline-3">
<h3 id="org8cfabda">回小区</h3>
<div class="outline-text-3" id="text-org8cfabda">
<p>
回去只需要把小区通行证明交回就可以了。
</p>
</div>
</div>
</div>

<div id="outline-container-org4b8da73" class="outline-2">
<h2 id="org4b8da73">后记</h2>
<div class="outline-text-2" id="text-org4b8da73">
<p>
武汉大概率在 4 月 8 号解封，想提前离汉要做再次核酸检测。我感觉等这再次做完，离 4 月 8 号也
不远了，也就早点回老家过清明了。
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-日常.html">日常</a> </div>]]></description>
  <category><![CDATA[日常]]></category>
  <link>https://lampze.github.io/2020-3-25-detect.html</link>
  <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[obs直播配置]]></title>
  <description><![CDATA[
<div id="outline-container-org167ac96" class="outline-2">
<h2 id="org167ac96">obs 配置</h2>
<div class="outline-text-2" id="text-org167ac96">
<p>
没什么好说的，把推流地址写好，串流的输出主要调比特率，根据自己家的上行网速来填，
最好比最大上行低一点，不然直播的延迟很大。配置好 n 卡的尽量用硬件编码。
</p>
</div>
</div>
<div id="outline-container-org2ed1518" class="outline-2">
<h2 id="org2ed1518">音频输入配置</h2>
<div class="outline-text-2" id="text-org2ed1518">
<p>
主要是配置麦的滤镜，下面是我配置的滤镜，基本都是默认设置，不要随意更改顺序
</p>
<ol class="org-ol">
<li>压缩器
<ul class="org-ul">
<li>避免来源：桌面音频</li>
</ul></li>
<li>噪声抑制
<ul class="org-ul">
<li>抑制程序：-30 dB</li>
</ul></li>
<li>扩展效果</li>
<li>噪声抑制
<ul class="org-ul">
<li>抑制程度：-30 dB</li>
</ul></li>
<li>限幅</li>
</ol>
</div>
</div>
<div id="outline-container-org062fdad" class="outline-2">
<h2 id="org062fdad">弹幕配置</h2>
<div class="outline-text-2" id="text-org062fdad">
<p>
一般是用 obs 的浏览器场景的，但 Linux 下没有这个，非要用的话倒是有插件，但只适用
于比较低版本的 obs，所以我打算利用系统通知结合网页的爬虫直接显示弹幕。
</p>

<p>
爬虫已经有人写过了，我就直接拿来用了。
</p>

<p>
<b>以下代码可能已经不可用，后续会另开一篇文章</b>
</p>
<div class="org-src-container">
<pre class="src src-go"><span style="font-weight: bold;">package</span> main

<span style="font-weight: bold;">import</span> (
  <span style="color: #8a3b3c;">"fmt"</span>
  <span style="color: #8a3b3c;">"github.com/lyyyuna/gobilibili"</span>  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#29228;&#34411;&#30340;&#24211;&#65292;&#20027;&#39029;&#26377;&#29992;&#27861;</span>
  <span style="color: #8a3b3c;">"github.com/martinlindhe/notify"</span> <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20135;&#29983;&#31995;&#32479;&#36890;&#30693;&#30340;&#24211;</span>
  <span style="color: #8a3b3c;">"log"</span>
  <span style="color: #8a3b3c;">"time"</span>
)

<span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#38543;&#20415;&#20889;&#20102;&#20010;&#26041;&#20415;&#35843;&#29992;&#31995;&#32479;&#36890;&#30693;&#30340;&#20989;&#25968;</span>
<span style="font-weight: bold;">func</span> <span style="font-weight: bold;">prt</span>(<span style="color: #383a42;">u</span> <span style="font-weight: bold;">string</span>, <span style="color: #383a42;">s</span> <span style="font-weight: bold;">string</span>) {
  notify.<span style="font-weight: bold;">Notify</span>(<span style="color: #8a3b3c;">"gobilibili"</span>, u, s, <span style="color: #8a3b3c;">"./"</span>)
}

<span style="font-weight: bold;">func</span> <span style="font-weight: bold;">main</span>() {
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#20855;&#20307;&#30340;&#29992;&#27861;&#35831;&#30475;&#29228;&#34411;&#30340;github</span>
  <span style="color: #383a42;">bili</span> := gobilibili.<span style="font-weight: bold;">NewBiliBiliClient</span>()
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">bili.RegHandleFunc(gobilibili.CmdAll, gobilibili.DefaultHandler)</span>
  <span style="color: #556b2f;">// </span><span style="color: #556b2f;">bili.RegHandleFunc(gobilibili.CmdAll, gobilibili.DebugHandler)</span>
  bili.<span style="font-weight: bold;">RegHandleFunc</span>(gobilibili.CmdDanmuMsg, <span style="font-weight: bold;">func</span>(<span style="color: #383a42;">c</span> *<span style="font-weight: bold;">gobilibili.Context</span>) <span style="font-weight: bold;">bool</span> {
    <span style="color: #383a42;">dinfo</span> := c.<span style="font-weight: bold;">GetDanmuInfo</span>()
    <span style="font-weight: bold;">if</span> dinfo.Uname != <span style="color: #8a3b3c;">""</span> {
      <span style="font-weight: bold;">prt</span>(dinfo.Uname+<span style="color: #8a3b3c;">"&#35828;&#65306;"</span>, dinfo.Text)
      log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]%s(%d) &#35828;: %s\r\n"</span>, c.RoomID, dinfo.Uname, dinfo.UID, dinfo.Text)
    } <span style="font-weight: bold;">else</span> {
      <span style="font-weight: bold;">prt</span>(fmt.<span style="font-weight: bold;">Sprintf</span>(<span style="color: #8a3b3c;">"[%d]&#35828;&#65306;"</span>, dinfo.UID), dinfo.Text)
      log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]%d &#35828;: %s\r\n"</span>, c.RoomID, dinfo.UID, dinfo.Text)
    }
    <span style="font-weight: bold;">return</span> <span style="color: #383a42;">false</span>
  })
  bili.<span style="font-weight: bold;">RegHandleFunc</span>(gobilibili.CmdWelcome, <span style="font-weight: bold;">func</span>(<span style="color: #383a42;">c</span> *<span style="font-weight: bold;">gobilibili.Context</span>) <span style="font-weight: bold;">bool</span> {
    <span style="color: #383a42;">winfo</span> := c.<span style="font-weight: bold;">GetWelcomeInfo</span>()
    <span style="font-weight: bold;">if</span> winfo.Uname != <span style="color: #8a3b3c;">""</span> {
      log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]%s(%d) &#36827;&#20837;&#20102;&#25151;&#38388;\r\n"</span>, c.RoomID, winfo.Uname, winfo.UID)
    } <span style="font-weight: bold;">else</span> {
      log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]%d &#36827;&#20837;&#20102;&#25151;&#38388;\r\n"</span>, c.RoomID, winfo.UID)
    }
    <span style="font-weight: bold;">return</span> <span style="color: #383a42;">false</span>
  })

  bili.<span style="font-weight: bold;">RegHandleFunc</span>(gobilibili.CmdSendGift, <span style="font-weight: bold;">func</span>(<span style="color: #383a42;">c</span> *<span style="font-weight: bold;">gobilibili.Context</span>) <span style="font-weight: bold;">bool</span> {
    <span style="color: #383a42;">gInfo</span> := c.<span style="font-weight: bold;">GetGiftInfo</span>()
    <span style="font-weight: bold;">prt</span>(<span style="color: #8a3b3c;">"&#31036;&#29289;"</span>, fmt.<span style="font-weight: bold;">Sprintf</span>(<span style="color: #8a3b3c;">"[%d]%s(%d) %s &#20102; %s x %d (&#20215;&#20540;%.3f)\r\n"</span>, c.RoomID, gInfo.Uname, gInfo.UID, gInfo.Action, gInfo.GiftName, gInfo.Num, <span style="font-weight: bold;">float32</span>(gInfo.Price*gInfo.Num)/<span style="color: #8a3b3c; font-weight: bold;">1000</span>))
    log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]%s(%d) %s &#20102; %s x %d (&#20215;&#20540;%.3f)\r\n"</span>, c.RoomID, gInfo.Uname, gInfo.UID, gInfo.Action, gInfo.GiftName, gInfo.Num, <span style="font-weight: bold;">float32</span>(gInfo.Price*gInfo.Num)/<span style="color: #8a3b3c; font-weight: bold;">1000</span>)
    <span style="font-weight: bold;">return</span> <span style="color: #383a42;">false</span>
  })

  bili.<span style="font-weight: bold;">RegHandleFunc</span>(gobilibili.CmdOnlineChange, <span style="font-weight: bold;">func</span>(<span style="color: #383a42;">c</span> *<span style="font-weight: bold;">gobilibili.Context</span>) <span style="font-weight: bold;">bool</span> {
    <span style="color: #383a42;">online</span> := c.<span style="font-weight: bold;">GetOnlineNumber</span>()
    log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]&#25151;&#38388;&#37324;&#24403;&#21069;&#22312;&#32447;&#65306;%d\r\n"</span>, c.RoomID, online)
    <span style="font-weight: bold;">return</span> <span style="color: #383a42;">false</span>
  })

  bili.<span style="font-weight: bold;">RegHandleFunc</span>(gobilibili.CmdNoticeMsg, <span style="font-weight: bold;">func</span>(<span style="color: #383a42;">c</span> *<span style="font-weight: bold;">gobilibili.Context</span>) <span style="font-weight: bold;">bool</span> {
    <span style="color: #383a42;">nMsg</span> := c.<span style="font-weight: bold;">GetNoticeMsg</span>()
    log.<span style="font-weight: bold;">Printf</span>(<span style="color: #8a3b3c;">"[%d]&#31995;&#32479;&#28040;&#24687;&#36890;&#30693;: %s\r\n"</span>, c.RoomID, nMsg.MsgCommon)
    <span style="font-weight: bold;">return</span> <span style="color: #383a42;">false</span>
  })

  <span style="font-weight: bold;">for</span> {
    <span style="color: #383a42;">err</span> := bili.<span style="font-weight: bold;">ConnectServer</span>(<span style="color: #8a3b3c; font-weight: bold;">1594896</span>) <span style="color: #556b2f;">// </span><span style="color: #556b2f;">&#36825;&#37324;&#20889;&#25151;&#38388;&#21495;</span>
    log.<span style="font-weight: bold;">Println</span>(<span style="color: #8a3b3c;">"&#19982;&#24377;&#24149;&#26381;&#21153;&#22120;&#36830;&#25509;&#20013;&#26029;,3&#31186;&#21518;&#37325;&#36830;&#12290;&#21407;&#22240;:"</span>, err.<span style="font-weight: bold;">Error</span>())
    time.<span style="font-weight: bold;">Sleep</span>(time.Second * <span style="color: #8a3b3c; font-weight: bold;">3</span>)
  }
}
</pre>
</div>

<p>
不要忘了把那两个库安装好，代码最好用 <code>go build</code> 编译成可执行文件。
</p>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-obs.html">obs</a> <a href="https://lampze.github.io/tag-bilibili.html">bilibili</a> <a href="https://lampze.github.io/tag-linux.html">Linux</a> </div>]]></description>
  <category><![CDATA[obs]]></category>
  <category><![CDATA[bilibili]]></category>
  <category><![CDATA[Linux]]></category>
  <link>https://lampze.github.io/obs-config.html</link>
  <pubDate>Thu, 05 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[snails 在 Doom 下的bug]]></title>
  <description><![CDATA[

<div id="outline-container-orgeabbb90" class="outline-2">
<h2 id="orgeabbb90">问题</h2>
<div class="outline-text-2" id="text-orgeabbb90">
<p>
自从 snails 加入了 tips 后，在 Doom 里 snails 就打不开了，会报错 <code>split-window:
Window #&lt;window 9 on  *snails tips*&gt; too small for splitting</code>
</p>

<p>
但在 <code>emacs -q</code> 下就完全没有问题
</p>
</div>
</div>

<div id="outline-container-orgac65fa5" class="outline-2">
<h2 id="orgac65fa5">原因</h2>
<div class="outline-text-2" id="text-orgac65fa5">
<p>
经过一番调试，发现是因为 <code>(line-pixel-height)</code> 返回的值太小了，导致不能分割窗口。
</p>
</div>
</div>

<div id="outline-container-org224c589" class="outline-2">
<h2 id="org224c589">解决</h2>
<div class="outline-text-2" id="text-org224c589">
<p>
两种方法
</p>
<ol class="org-ol">
<li>修改源码把 <code>(line-pixel-height)</code> 改成可以分割的值，比如在原基础上乘二，但以后
更新就比较难维护</li>

<li>把字体调大，snails 调字体需要配置 face。</li>
</ol>
<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #014980;">(</span>def-package! snails
  <span style="color: #556b2f;">;; </span><span style="color: #556b2f;">&#35201;&#22312;&#36733;&#20837;&#23436;&#20043;&#21518;&#20462;&#25913;face</span>
  <span style="font-weight: bold;">:config</span>
  <span style="color: #a626a4;">(</span><span style="font-weight: bold;">set-face-attribute</span> <span style="color: #383a42;">'</span><span style="color: #383a42;">snails-content-buffer-face</span> nil <span style="font-weight: bold;">:height</span> <span style="color: #8a3b3c; font-weight: bold;">240</span><span style="color: #a626a4;">)</span><span style="color: #014980;">)</span>
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-snails.html">snails</a> <a href="https://lampze.github.io/tag-emacs.html">Emacs</a> <a href="https://lampze.github.io/tag-doom.html">Doom</a> </div>]]></description>
  <category><![CDATA[snails]]></category>
  <category><![CDATA[Emacs]]></category>
  <category><![CDATA[Doom]]></category>
  <link>https://lampze.github.io/snails-to-small.html</link>
  <pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[org-page 配置]]></title>
  <description><![CDATA[
<div id="outline-container-orgcd3a71c" class="outline-2">
<h2 id="orgcd3a71c">前言</h2>
<div class="outline-text-2" id="text-orgcd3a71c">
<p>
以前用过几个博客的生成器，感觉都太复杂，太笨重了，而且对 org 的支持也不好，最后还是
换到了 org-page
</p>
</div>
</div>
<div id="outline-container-org9a8f999" class="outline-2">
<h2 id="org9a8f999">Doom 的配置</h2>
<div class="outline-text-2" id="text-org9a8f999">
<div class="org-src-container">
<pre class="src src-lisp"><span style="color: #556b2f;">;; </span><span style="color: #556b2f;">&#23433;&#35013;org-page</span>
(package! org-page)
<span style="color: #556b2f;">;; </span><span style="color: #556b2f;">&#37197;&#32622;</span>
(def-package! org-page
  <span style="font-weight: bold;">:config</span>
  (setq op/repository-directory <span style="color: #8a3b3c;">"~/codehome/lampze.github.io"</span>
        op/repository-org-branch <span style="color: #8a3b3c;">"source"</span>
        op/repository-html-branch <span style="color: #8a3b3c;">"master"</span>
        <span style="color: #556b2f;">;; </span><span style="color: #556b2f;">&#22240;&#20026;Doom&#23433;&#35013;&#26102;&#26159;&#29992;&#36719;&#38142;&#25509;&#65292;&#25152;&#20197;&#25105;&#20204;&#35201;&#25226;org-page&#30340;&#30495;&#23454;&#30446;&#24405;&#35774;&#32622;&#22909;</span>
        op/theme-root-directory <span style="color: #8a3b3c;">"/home/shirui/.emacs.d/.local/straight/repos/org-page/themes"</span>
        op/load-directory <span style="color: #8a3b3c;">"/home/shirui/.emacs.d/.local/straight/repos/org-page/"</span>
        op/personal-github-link <span style="color: #8a3b3c;">"https://github.com/lampze/"</span>
        op/site-domain <span style="color: #8a3b3c;">"https://lampze.github.io/"</span>))
</pre>
</div>
</div>
</div>
<div id="outline-container-org3e4b8c6" class="outline-2">
<h2 id="org3e4b8c6">org-page 的坑</h2>
<div class="outline-text-2" id="text-org3e4b8c6">
<ol class="org-ol">
<li>文章的名字不能使用中文</li>
<li>自动生成的 org 文件有两个 title，需要删掉一个，可能是 Doom的问题</li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://lampze.github.io/tags.html">标签</a>: <a href="https://lampze.github.io/tag-org-page.html">org-page</a> <a href="https://lampze.github.io/tag-emacs.html">Emacs</a> <a href="https://lampze.github.io/tag-doom.html">Doom</a> </div>]]></description>
  <category><![CDATA[org-page]]></category>
  <category><![CDATA[Emacs]]></category>
  <category><![CDATA[Doom]]></category>
  <link>https://lampze.github.io/org-page-config.html</link>
  <pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
