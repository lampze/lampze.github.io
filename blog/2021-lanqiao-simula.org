#+TITLE:       2021年蓝桥杯模拟赛题解
#+AUTHOR:      shirui
#+EMAIL:       1229408499@qq.com
#+DATE:        2021-01-22 五
#+URI:         /blog/%y/%m/%d/2021-lanqiao-simula
#+KEYWORDS:    蓝桥杯
#+TAGS:        蓝桥杯
#+LANGUAGE:    zh
#+OPTIONS:     H:3 num:nil toc:nil \n:t ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 2021年蓝桥杯模拟赛题解
* 第一题
** 题目
问题描述
    请问在 1 到 2020 中，有多少个数既是 4 的整数倍，又是 6 的整数倍。
答案提交
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。
** 解析
直接枚举数字然后判断计数即可
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

int main() {
  int count = 0;
  for (int i = 1; i <= 2020; i++)
    if (i % 4 == 0 && i % 6 == 0)
      count++;
  cout << count << endl;
  return 0;
}
#+end_src

#+RESULTS:
: 168
答案: =168=

* 第二题
** 题目
问题描述
　　小明要用二进制来表示 1 到 10000 的所有整数，要求不同的整数用不同的二进制数表示，请问，为了表示 1 到 10000 的所有整数，至少需要多少个二进制位？
答案提交
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。
** 解析
可以看每种二进制位最高可以表示多大的数，然后选出最小的即可
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

int main() {
  for (int i = 0, n = 1; n - 1 < 10000; n = n << 1, i++)
    cout << i << ":" << n-1 << endl;
  return 0;
}
#+end_src

#+RESULTS:
|     0:0 |
|     1:1 |
|     2:3 |
|     3:7 |
|    4:15 |
|    5:31 |
|    6:63 |
|   7:127 |
|   8:255 |
|   9:511 |
| 10:1023 |
| 11:2047 |
| 12:4095 |
| 13:8191 |

答案： =14=
* 第三题
** 题目
问题描述
　　请问有多少个序列满足下面的条件：
1. 序列的长度为 5。
2. 序列中的每个数都是 1 到 10 之间的整数。
3. 序列中后面的数大于等于前面的数。
** 解析
直接使用 =dfs= 搜索即可

或者写5个循环也行
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

int all[5];
long long count = 0;

void dfs(int now) {
  if (now == 5) {
    count++;
    // for (int i = 0; i < 5; i++)
    //   cout << all[i] << " ";
    // cout << endl;
    return;
  }
  for (int i = 1; i <= 10; i++)
    if (now == 0 || i >= all[now - 1]) {
      all[now] = i;
      dfs(now + 1);
    }
}

int main() {
  dfs(0);
  cout << count << endl;
  return 0;
}
#+end_src

#+RESULTS:
: 2002

#+begin_src cpp
#include <iostream>

using namespace std;

int main() {
  int count = 0;
  for (int a = 1; a <= 10; a++)
    for (int b = a; b <= 10; b++)
      for (int c = b; c <= 10; c++)
        for (int d = c; d <= 10; d++)
          for (int e = d; e <= 10; e++)
            count++;
  cout << count << endl;
  return 0;
}
#+end_src

#+RESULTS:
: 2002

答案： =2002=

* 第四题
** 题目
问题描述
　　一个无向图包含 2020 条边，如果图中没有自环和重边，请问最少包含多少个结点？
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。
** 解析
假设有结点的个数为 $n$ 的图，已知边的个数最多为 $\frac{n \times (n-1)}{2}$ ，可以列出等式 $\frac{n \times (n-1)}{2} = 2020$ 可得 $n = 64.0629609128$ 然后取整加一即可
** 答案
=65=
* 第五题
** 题目
问题描述
　　两个字母之间的距离定义为它们在字母表中位置的距离。例如 A 和 C 的距离为 2，L 和 Q 的距离为 5。
　　对于一个字符串，我们称字符串中两两字符之间的距离之和为字符串的内部距离。
　　例如：ZOO 的内部距离为 22，其中 Z 和 O 的距离为 11。
　　请问，LANQIAO 的内部距离是多少？
　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。
** 解析
枚举 =LANQIAO= 字符串所有两个字符的组合，计算距离然后相加即可
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

long long f(char a, char b) {
  if (b > a)
    return f(b, a);
  return a - b;
}

int main() {
  string s = "LANQIAO";
  long long sum = 0;
  for (int i = 0; i < s.size(); i++)
    for (int j = i; j < s.size(); j++)
      sum += f(s[i], s[j]);
  cout << sum << endl;
  return 0;
}
#+end_src

#+RESULTS:
: 162

答案： =162=
* 第六题
** 题目
问题描述
　　给定一个平行四边形的底边长度 l 和高度 h，求平行四边形的面积。
输入格式
　　输入的第一行包含一个整数 l，表示平行四边形的底边长度。
　　第二行包含一个整数 h，表示平行四边形的高。
输出格式
　　输出一个整数，表示平行四边形的面积。（提示：底边长度和高都是整数的平行四边形面积为整数）
样例输入
#+begin_example
2
7
#+end_example

样例输出
#+begin_example
14
#+end_example

数据规模和约定：对于所有评测用例，1 <= l, h <= 100。
** 解析
直接计算输出，没什么好说的
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

int main() {
  int l,h;
  cin >> l >> h;
  cout << l * h << endl;
  return 0;
}
#+end_src

* 第七题
** 题目
问题描述
　　现在时间是 a 点 b 分，请问 t 分钟后，是几点几分？
输入格式
　　输入的第一行包含一个整数 a。
　　第二行包含一个整数 b。
　　第三行包含一个整数 t。
输出格式
　　输出第一行包含一个整数，表示结果是几点。
　　第二行包含一个整数，表示结果是几分。
样例输入

#+begin_example
3
20
165
#+end_example

样例输出

#+begin_example
6
5
#+end_example

样例输入

#+begin_example
3
20
175
#+end_example

样例输出

#+begin_example
6
15
#+end_example

数据规模和约定：对于所有评测用例，0 <= a <= 23, 0 <= b <= 59, 0 <= t, t 分钟后还是在当天。
** 解析
直接把 =t= 加入到 =b= 中，然后把超出的时间补到小时上，并把分钟修整到60分钟内即可。
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

int main() {
  int a, b, t;
  cin >> a >> b >> t;
  b += t;
  a += b / 60;
  b %= 60;
  cout << a << endl << b << endl;
  return 0;
}
#+end_src
* 第八题
** 题目
问题描述
　　小蓝负责花园的灌溉工作。
　　花园可以看成一个 n 行 m 列的方格图形。中间有一部分位置上安装有出水管。
　　小蓝可以控制一个按钮同时打开所有的出水管，打开时，有出水管的位置可以被认为已经灌溉好。
　　每经过一分钟，水就会向四面扩展一个方格，被扩展到的方格可以被认为已经灌溉好。即如果前一分钟某一个方格被灌溉好，则下一分钟它上下左右的四个方格也被灌溉好。
　　给定花园水管的位置，请问 k 分钟后，有多少个方格被灌溉好？
输入格式
　　输入的第一行包含两个整数 n, m。
　　第二行包含一个整数 t，表示出水管的数量。
　　接下来 t 行描述出水管的位置，其中第 i 行包含两个数 r, c 表示第 r 行第 c 列有一个排水管。
　　接下来一行包含一个整数 k。
输出格式
　　输出一个整数，表示答案。
样例输入

#+begin_example
3 6
2
2 2
3 4
1
#+end_example

样例输出

#+begin_example
9
#+end_example

样例说明
　　用1表示灌溉到，0表示未灌溉到。
　　打开水管时：
　　000000
　　010000
　　000100
　　1分钟后：
　　010000
　　111100
　　011110
　　共有9个方格被灌溉好。
数据规模和约定
　　对于所有评测用例，1 <= n, m <= 100, 1 <= t <= 10, 1 <= k <= 100。
** 解析
使用 =bfs= ，更新每个结点直到时间结束，每次把新灌溉的结点加入到队列即可。
** 代码
#+begin_src cpp
#include <iostream>
#include <queue>

using namespace std;

// 保存状态
struct point {
  int x, y, time;
  point(int _x, int _y, int _time) {
    x = _x;
    y = _y;
    time = _time;
  }
};
// all是全部的花园
bool all[105][105];
// 下一步的数组
int nex[4][2] = {-1, 0, 1, 0, 0, -1, 0, 1};

int main() {
  int n, m, t;
  cin >> n >> m >> t;
  queue<point> q;
  // 处理水管，标记好花园，并加入到队列
  for (int i = 0; i < t; i++) {
    int r, c;
    cin >> r >> c;
    q.push(point(r, c, 0));
    all[r][c] = true;
  }
  int k, count;
  cin >> k;
  count = t;
  while (!q.empty()) {
    point a = q.front();
    q.pop();
    // 如果时间到了就不进行下一步了
    if (a.time == k)
      continue;
    // 遍历四周
    for (int i = 0; i < 4; i++) {
      int x = a.x + nex[i][0], y = a.y + nex[i][1];
      // 如果这个格子没有水，就加入队列并标记
      if (x > 0 && y > 0 && x <= n && y <= m && !all[x][y]) {
        all[x][y] = true;
        q.push(point(x, y, a.time + 1));
        count++;
      }
    }
  }
  cout << count << endl;
  return 0;
}
#+end_src
* 第九题
** 题目
问题描述
　　小蓝有一张黑白图像，由 n * m 个像素组成，其中从上到下共 n 行，每行从左到右 m 列。每个像素由一个 0 到 255 之间的灰度值表示。
　　现在，小蓝准备对图像进行模糊操作，操作的方法为：
　　对于每个像素，将以它为中心 3 * 3 区域内的所有像素（可能是 9 个像素或少于 9 个像素）求和后除以这个范围内的像素个数（取下整），得到的值就是模糊后的结果。
　　请注意每个像素都要用原图中的灰度值计算求和。
输入格式
　　输入的第一行包含两个整数 n, m。
　　第 2 行到第 n + 1 行每行包含 m 个整数，表示每个像素的灰度值，相邻整数之间用一个空格分隔。
输出格式
　　输出 n 行，每行 m 个整数，相邻整数之间用空格分隔，表示模糊后的图像。
样例输入

#+begin_example
3 4
0 0 0 255
0 0 255 0
0 30 255 255
#+end_example

样例输出

#+begin_example
0 42 85 127
5 60 116 170
7 90 132 191
#+end_example

数据规模和约定
　　对于所有评测用例，1 <= n, m <= 100。
** 解析
遍历统计计算并输出即可
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

int main() {
  int n, m;
  cin >> n >> m;
  int pic[n][m];
  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++)
      cin >> pic[i][j];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      int c = 0, sum = 0;
      // 遍历周边像素，计算和与个数
      for (int a = -1; a <= 1; a++)
        for (int b = -1; b <= 1; b++) {
          int x = i + a, y = j + b;
          if (x >= 0 && y >= 0 && x < n && y < m)
            c++, sum += pic[x][y];
        }
      // 计算并直接输出
      cout << sum / c << " ";
    }
    cout << endl;
  }
  return 0;
}
#+end_src
* 第十题
** 题目
问题描述
　　小蓝在一个 n 行 m 列的方格图中玩一个游戏。
　　开始时，小蓝站在方格图的左上角，即第 1 行第 1 列。
　　小蓝可以在方格图上走动，走动时，如果当前在第 r 行第 c 列，他不能走到行号比 r 小的行，也不能走到列号比 c 小的列。同时，他一步走的直线距离不超过3。
　　例如，如果当前小蓝在第 3 行第 5 列，他下一步可以走到第 3 行第 6 列、第 3 行第 7 列、第 3 行第 8 列、第 4 行第 5 列、第 4 行第 6 列、第 4 行第 7 列、第 5 行第 5 列、第 5 行第 6 列、第 6 行第 5 列之一。
　　小蓝最终要走到第 n 行第 m 列。
　　在图中，有的位置有奖励，走上去即可获得，有的位置有惩罚，走上去就要接受惩罚。奖励和惩罚最终抽象成一个权值，奖励为正，惩罚为负。
　　小蓝希望，从第 1 行第 1 列走到第 n 行第 m 列后，总的权值和最大。请问最大是多少？
输入格式
　　输入的第一行包含两个整数 n, m，表示图的大小。
　　接下来 n 行，每行 m 个整数，表示方格图中每个点的权值。
输出格式
　　输出一个整数，表示最大权值和。
样例输入

#+begin_example
3 5
-4 -5 -10 -3 1
7 5 -9 3 -10
10 -2 6 -10 -4
#+end_example

样例输出

#+begin_example
15
#+end_example

数据规模和约定
　　对于30%的评测用例，1 <= n, m <= 10；
　　对于50%的评测用例，1 <= n, m <= 20；
　　对于所有评测用例，1 <= n <= 100，-10000 <= 权值 <= 10000。
** 解析
和只能向下或向右走的题目一样，我们使用逆向思维，每个点的最大权值就是当前点的权值加上能走过来的点的最大权值
** 代码
#+begin_src cpp
#include <iostream>

using namespace std;

long long max(long long a, long long b) {
  if (a == -20000)
    return b;
  return a > b ? a : b;
}

int main() {
  int n, m;
  cin >> n >> m;
  long long dp[n][m];
  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++) {
      // 输入当前权值
      cin >> dp[i][j];
      // 因为不会用到后面的权值
      // 所以可以边输入边处理
      long long mp = -20000;
      // 找到能到当前格子的最大权值
      for (int a = 0; a <= 3; a++)
        // 不能走超过三步
        for (int b = 0; b <= 3 - a; b++)
          if (a + b != 0) {
            int x = i - a, y = j - b;
            if (x >= 0 && y >= 0 && x < n && y < m)
              mp = max(mp, dp[x][y]);
          }
      dp[i][j] += mp;
    }
  cout << dp[n - 1][m - 1] << endl;
  return 0;
}
#+end_src
