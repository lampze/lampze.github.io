#+TITLE:       obs直播配置
#+AUTHOR:
#+EMAIL:       shirui@gentoo
#+DATE:        2020-03-05 四
#+URI:         /blog/%y/%m/%d/obs直播配置
#+KEYWORDS:    obs,bilibili,Linux
#+TAGS:        obs,bilibili,Linux
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: linux下的obs开播配置
* obs 配置
没什么好说的，把推流地址写好，串流的输出主要调比特率，根据自己家的上行网速来填，
最好比最大上行低一点，不然直播的延迟很大。配置好 n 卡的尽量用硬件编码。
* 音频输入配置
主要是配置麦的滤镜，下面是我配置的滤镜，基本都是默认设置，不要随意更改顺序
1. 压缩器
   - 避免来源：桌面音频
2. 扩展效果
3. 噪声抑制
   - 抑制程度：-60 dB
4. 限幅
* 弹幕配置
一般是用 obs 的浏览器场景的，但 Linux 下没有这个，非要用的话倒是有插件，但只适用
于比较低版本的 obs，所以我打算利用系统通知结合网页的爬虫直接显示弹幕。

爬虫已经有人写过了，我就直接拿来用了。
#+BEGIN_SRC go
package main

import (
	"fmt"
	"github.com/lyyyuna/gobilibili"  // 爬虫的库，主页有用法
	"github.com/martinlindhe/notify" // 产生系统通知的库
	"log"
	"time"
)

// 随便写了个方便调用系统通知的函数
func prt(u string, s string) {
	notify.Notify("gobilibili", u, s, "./")
}

func main() {
	// 具体的用法请看爬虫的github
	bili := gobilibili.NewBiliBiliClient()
	// bili.RegHandleFunc(gobilibili.CmdAll, gobilibili.DefaultHandler)
	// bili.RegHandleFunc(gobilibili.CmdAll, gobilibili.DebugHandler)
	bili.RegHandleFunc(gobilibili.CmdDanmuMsg, func(c *gobilibili.Context) bool {
		dinfo := c.GetDanmuInfo()
		if dinfo.Uname != "" {
			prt(dinfo.Uname+"说：", dinfo.Text)
			log.Printf("[%d]%s(%d) 说: %s\r\n", c.RoomID, dinfo.Uname, dinfo.UID, dinfo.Text)
		} else {
			prt(fmt.Sprintf("[%d]说：", dinfo.UID), dinfo.Text)
			log.Printf("[%d]%d 说: %s\r\n", c.RoomID, dinfo.UID, dinfo.Text)
		}
		return false
	})
	bili.RegHandleFunc(gobilibili.CmdWelcome, func(c *gobilibili.Context) bool {
		winfo := c.GetWelcomeInfo()
		if winfo.Uname != "" {
			log.Printf("[%d]%s(%d) 进入了房间\r\n", c.RoomID, winfo.Uname, winfo.UID)
		} else {
			log.Printf("[%d]%d 进入了房间\r\n", c.RoomID, winfo.UID)
		}
		return false
	})

	bili.RegHandleFunc(gobilibili.CmdSendGift, func(c *gobilibili.Context) bool {
		gInfo := c.GetGiftInfo()
		prt("礼物", fmt.Sprintf("[%d]%s(%d) %s 了 %s x %d (价值%.3f)\r\n", c.RoomID, gInfo.Uname, gInfo.UID, gInfo.Action, gInfo.GiftName, gInfo.Num, float32(gInfo.Price*gInfo.Num)/1000))
		log.Printf("[%d]%s(%d) %s 了 %s x %d (价值%.3f)\r\n", c.RoomID, gInfo.Uname, gInfo.UID, gInfo.Action, gInfo.GiftName, gInfo.Num, float32(gInfo.Price*gInfo.Num)/1000)
		return false
	})

	bili.RegHandleFunc(gobilibili.CmdOnlineChange, func(c *gobilibili.Context) bool {
		online := c.GetOnlineNumber()
		log.Printf("[%d]房间里当前在线：%d\r\n", c.RoomID, online)
		return false
	})

	bili.RegHandleFunc(gobilibili.CmdNoticeMsg, func(c *gobilibili.Context) bool {
		nMsg := c.GetNoticeMsg()
		log.Printf("[%d]系统消息通知: %s\r\n", c.RoomID, nMsg.MsgCommon)
		return false
	})

	for {
		err := bili.ConnectServer(1594896) // 这里写房间号
		log.Println("与弹幕服务器连接中断,3秒后重连。原因:", err.Error())
		time.Sleep(time.Second * 3)
	}
}
#+END_SRC

不要忘了把那两个库安装好，代码最好用 =go build= 编译成可执行文件。
