#+TITLE:       C/C++简明教程
#+AUTHOR:      lampze
#+EMAIL:       1229408499@qq.com
#+DATE:        2020-11-17 二
#+URI:         /blog/%y/%m/%d/c-cpp-tutorial
#+KEYWORDS:    tutorial, C/C++
#+TAGS:        tutorial, C/C++
#+LANGUAGE:    zh
#+OPTIONS:     H:3 num:nil toc:t \n:t ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: C/C++的简单教程

* 前言
编程语言是让我们使用一个大部分人能理解的方式控制计算机，所以写代码时最重要的是可读性，对自己要求高的同学可以思考怎么保持代码的整洁与优雅。

本文不会把每种表都列出来（如优先级、关键字等），这些网上或课本上都有，请自行翻阅，本书仅仅是讲清原理与我自己理解的逻辑。

本文只把基础的逻辑与用法讲清楚，最后可能会附带几个例题，想要真正的学会编程还是要多写代码。

最后请看看这篇文章《[[https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md][提问的智慧]]》，问问题时请按照这上面做。

* C语言
** 编程与运行流程
*** 写代码
对于 =windows= 来说，我推荐新手使用 =Dev-C++= 这个 =IDE= 来编写代码，这个软件虽然有些年头了，也很长时间没有更新了，但作为一个编程集成环境还是及格的，具体的操作还是比较简单，很多事情都能一键完成。
对于参加蓝桥杯的同学， =Dev-C++= 也是官方指定的编程环境。
请不要使用 =vc++= ！！！

对于 =Linux= 来说，新手可以使用 =nano= 来编写代码，有基础的同学可以学下 =vim= ，进阶的话可以玩玩 =Emacs= 。
*** 编译
对于 =IDE= 来说只需要按下按钮就能自动的编译了，没有什么需要动脑的地方。

当然我们不能这样就行了，下面简单介绍下编译是什么。我们写的代码其实都是文本文件，计算机并不认识，计算机只能处理2进制的指令，也就是机器语言，每种 =CPU= 的机器语言都是不一样的，所以我们需要把我们认识的代码转换成计算机认识机器代码，这个过程叫做编译。

目前使用最广的编译器是 =gcc= ， =Dev-C++= 也是使用的这个编译器，安装 =gcc= 后可以在命令行使用 =gcc= 命令，这个命令给定一个源代码文件，然后输出一个二进制文件，然后计算机就能执行这个二进制文件了。
*** 运行过程
#+begin_src c
#include <stdio.h>

int main() {
  printf("Hello, World\n");
  return 0;
}
#+end_src

对于 =C= 来说，它运行时总会从 =main= 函数开始，只要 =main= 函数结束整个程序就结束了。对于上面这个代码来说，它输出了一行 =Hello，World= 文本，并返回了0。需要注意这个0是返回给了操作系统，作用只有一个，就是告诉操作系统这个程序运行过程是否有错误，0表示没有错误。

注意 =main= 只是第一个执行的函数，定义语句、引入库函数语句、宏语句等肯定是要优先执行的。
** 语法简介
我们从简单的语句开始，语句由表达式组成，一条语句必须有一个分号当作结尾，比如 =1+1;= 就是一条语句。这条语句中的 =+= 是 =C= 自带的一些操作符，数学上常用的运算符都有。这里需要强调一下 === 是赋值运算符，比如 =a=b;= 的意思就是把a的值设置成b的值，也即对等号右边的表达式进行求值，然后把返回值赋值给左边。变量可以简单理解为一个箱子，箱子可以放置或取出数据。

下面讲解表达式，每个表达式都有返回值，同一时刻只能运算一个操作。对于 =1+1+1= 这个表达式，它的求值过程是这样的：
1. 先运算第一个 =1+1= ，它的返回值是 =2=
2. 表达式变成 =2+1=
3. 得出返回值 =3=

记住分辩操作是跟根据操作符来的，有些操作符是需要两边都有数据，有些只需要一个，并且每个操作符都有优先级的，计算机会优先执行优先级高的操作，优先级一般来说符合直觉
如果是同级的操作，根据操作符的类型来判定是从左到右还是从右到左。
如果记不住执行的顺序，可以简单的使用括号把你想要独立执行的操作括起来，括号内的会优先执行。
比如 =(1 + 2) * 3= -> =(3) * 3= -> =3 * 3= -> =9=

这样就是最基本的 =C= 语法，更加复杂的语法在后面讲解。
** 变量
*** 简介
变量可以理解成一个箱子，我们可以把一些东西放到箱子，也可以从箱子内把东西取出来。
类型的作用只是为每个箱子打上了标签，规定了箱子内不能随便放东西，比如一个放水果的箱子就不能把水倒进去。
*** 类型
=C= 是一个强类型的语言，它的意思就是每个数据都有类型，不同类型的数据不能随便使用，比如一个整数类型的变量就不能放入一个小数数据。

=C= 里有三种简单常用的类型：整数、小数、字符；

我们需要记下这些类型的名称
整数有： =short= 、 =int= 、 =long= 、 =long long=
小数有： =float= 、 =doubel=
字符有： =char=

这些不同的类型之间的区别只是它们用来存储数据的空间大小，比如 =short= 只用2个字节存储整数。
对于初学者只需要记下 =int= 、 =float=  、 =char= 就行了。

*** 创建
创建一个变量需要使用变量声明语句，大概是这种形式 =<变量类型> <变量名>;= ，举个例子 =int a;= 这样就创建了一个 =int= 类型的变量 =a= 。

如果使用这种形式 =<变量类型> <变量名> = <表达式>;= 的语句声明变量的话，就会给这个变量一个初始值，比如 =float pi = 3.1415926;= 就定义了一个 =float= 类型的变量 =pi= ，它的初始值为 =3.1415926= 。

注意一点，变量名不能与 =C= 的关键字重名，已经使用过的名字不能重复定义。
*** 使用
在表达式内，我们可以把变量当作一个求值操作，这个操作的返回值为变量内的值，比如 =int a = 1;= 后 =a= 这个表示式的值就为 =1= ， =(a + 1) * a= -> =(1 + 1) * a= -> =2 * a= -> =2 * 1= -> =2= 。

对于变量我们还可以对它使用赋值运算符，比如 === 、 =++= 、 =--= 
=== 就是简单的把等号右边的表示式求值，放到等号左边的变量内
=++= 是把变量内的值加上1，然后放到变量内
=--= 是把变量内的值减去1，然后放入变量内

赋值运算也是一个表示式，这意味着它也会返回一个值
比如 =1 + (a = 3)= -> =1 + 3= -> =4=
需要注意这个表示式会有一个副作用，它把 =a= 的值改变成 =3= 了

后面两个运算符有些许的复杂
=a++= 的返回值是 =a=
=++a= 的返回值是 =a+1=
=a--= 的返回值是 =a--=
=--a= 的返回值是 =a-1=
注意，虽然返回值不一样，但这个变量的值都改变了，也即是一个副作用

下面举些例子 =int a = 1;=
=1 + a++= -> =1 + 1= -> =2=
=a= -> =2=
=1 + (++a)= -> =1 + 3= -> =4=
=a= -> =3=
=1 + a--= -> =1 + 3= -> =4=
=a= -> =2=
=1 + (--a)= -> =1 + 1= -> =2=
=a= -> =1=

变量不能放入不同类型的数据，但把小数放到整数的盒子里肯定是常见的操作，这种不同类型的数据之间的操作 =C= 是支持。 =C= 会对不同类型的数据自动进行类型转换，转换的规则是尽量减少信息的流失，比如 =short= 和 =int= 类型的数据运算，返回的结果是 =int= 类型的数据。小数转换成整数会直接把小数部分去掉，并不会四舍五入。
对于赋值运行也是相同的道理
** 输入输出
*** 简介
我们写一个程序，一般都是面向用户的，作为人类我们肯定是需要获取和输入一些信息，一个无法干涉无法感知的东西我们是不能使用的。

下面我就介绍下 =C= 里的标准输入输出，标准输入输出可以理解成通用的接口，一般情况下我们都可以使用这个接口来输入输出信息。
一般情况输入输出都是文本的形式。

需要注意 =C= 默认不包含输入输出的功能，我们需要引入这些功能， =stdio.h= 这个头文件包含了我们需要的功能，使用 =#include <stdio.h>= 这个命令我们可以引入它。
可以简单的把这个命令理解成把 =stdio.h= 这个文件里的内容放到我们程序的最前面。

函数也可以理解成一个魔法盒子，它可以放入一些数据，然后扔出一些数据。

*** 输出
**** putchar
这个函数很容易理解，传入一个字符，并把它输出， =c= 可以使用 =''= 包裹一个字符来表示一个字符常量，如果 =''= 内有多个字符就会报错。

=putchar('a')= 语句输出 =a= 到标准输出。
**** puts
同理这个函数也是传入一个字符串，并输出它，与字符的表示方式相似，我们使用 =""= 包裹多个字符来表示字符串变量。

比如 =puts("Hello")= 语句就会输出 =Hello= 到标准输出。
**** printf
格式化输出一串字符，它接收任意多个参数，第一个参数是一个字符串，并把它作为模板，里面可以放一些标识来表示需要把标识替换成我们想要的数据，后面的参数填入表达式，函数会按顺序把它们一个个填入模板字符串中。

#+begin_src c
#include <stdio.h>

int main() {
  /* 语句后面的注释里放输出的内容 */
  /* \n是转义字符，表示换行，因为有些字符不可输入 */
  printf("%d is a number\n", 123); /* 123 is a number */
  printf("%s is a string, and i like %c", "haha", 'a');/* haha is a string, and i like a */
  return 0;
}
#+end_src

*** 输入
**** getchar
这个函数从标准输入读入一个字符然后返回，比如 =char c = getchar();= 这条语句就会从输入流获取一个字符，并赋值给变量 =c= 。

=getchar= 只从输入拿下一个字符，所有的字符都可以拿下来，包括空白字符（空格、回车等等）
**** gets
这个函数从标准输入读取一行字符，并把这一行填入一个字符数组。

#+begin_src c
#include <stdio.h>

int main() {
  char s[100];  /* 字符串可以理解成多个字符，所以c里面使用数组来表示字符串 */
  gets(s);      /* 与上面的getchar不同，它不会返回一个值 */
  puts(s);      /* 输出一个字符串 */
  return 0;
}
#+end_src

请注意一行末尾的回车不会被填入字符数组。
**** scanf
这个函数就可以支持多种形式格式的输入了，与上面的 =printf= 有相同的控制符。
需要注意一点， =scanf= 填写变量的位置需要提供一个指针，获取变量指针的方法是使用 =&= 运算符。
使用 =%c= 时和 =getchar= 一样会读取空白字符
使用 =%s= 时只要遇到一个空白字符就会停止

#+begin_src c
#include <stdio.h>

int main() {
  int n;
  char s[100];
  /* n是一个变量需要使用 & 获取它的指针
   * 而数组名就是一个指针 */
  scanf("%d %s", &n, s);
  printf("%d %s\n", n, s);
  return 0;
}
#+end_src

** 选择
*** 简介
选择结构的出现打破了我之前讲述的简洁明了的语法，我们需要重新学习一些额外的情况，所幸这种新结构并不复杂。

选择结构有三种表达方式， =if= 、 =switch= 、 =三元运算符=
前面两种方式可以相互转换，而最后一种出现的目的是减少代码行数，同时也加重了我们理解程序的负担。

需要注意一点，在选择结构内如果执行了 =break= 会直接结束当前的选择结构。
*** if
它的语法大概是这样 =if (表达式) { 代码块 }=
简单来说如果对表达式求值的结果为真，就执行使用 ={}= 包裹的代码块
=c= 里面使用 =0= 表示假，而其它的任何值都为真
所谓代码块就是任意行语句

如果需要执行的语句只有一行可以使用 =if (表达式-判断) 表达式-执行;= 的形式，表达式可以不写。

如果我们还要对表达式为假的情况做些操作，并不用再写一个 =if= ，可以使用下述方式
=if (表达式) {为真时执行} else {为假时执行}=
同理，只有一条语句时可以省略 ={}=
下面看一个例子

#+begin_src c
#include <stdio.h>

int main() {
  int a = 10;
  if (a < 20)
    puts("a < 20\n");
  
  if (a > 100)
    puts("a > 100");
  else
    puts("a <= 100");

  if (a > 10)
    puts("a > 10\n");
  else if (a < 10)
    puts("a < 10\n");
  else
    puts("a == 10\n");
  return 0;
}
#+end_src
*** switch
=switch= 的语法比较复杂，简单来说它会把你给予的一个整数与 =case= 语句从上到下一一比对
如果跟 =case= 语句后面的值相等，就执行 =case= 对应的代码块
=default= 表示没有一个 =case= 语句匹配时的情况

#+begin_src c
#include <stdio.h>

int main() {
  switch(10) {
    case 10:
      puts("10");
    case 9:
      puts("9");
    default:
      puts("not match");
  }
  return 0;
}
#+end_src

需要注意，有匹配项后它会忽略当前 =case= 后面的所有 =case= 条件，即它会执行匹配 =case= 后面的所有语句，直到 =switch= 结构结束。
所以我们一般对于每个 =case= 都会在它的结尾加上 =break=
*** 三元运算符
它的语法比较简单 =条件?表达式1:表达式2=
对这个三元运算表达式求值时，如果条件为真就执行并返回表达式1的值，否则执行并返回表达式2的值

#+begin_src c
#include <stdio.h>

int main() {
  int a, b;
  scanf("%d %d", &a, &b);
  printf("the max number is:%d\n", a > b ? a : b);
  return 0;
}
#+end_src
** 循环
*** 简介
我们继续来破坏 =c= 的简单性，这次介绍循环结构
有两种方式来描述一个循环结构 =while= 、 =for=
*** while
语法为 =while(条件) {代码块}=
与 =if= 的结构相似，与 =if= 不同的地方在于， =while= 会在代码块执行结束后重复检查条件，如果条件还是为真就继续执行代码块
简单来说就是执行代码块直到条件为假。

#+begin_src c
#include <stdio.h>

int main() {
  int a = 10, sum = 0;
  while (a > 0) {
    sum += a;
    a--;
  }
  printf("%d\n", sum);
  return 0;
}
#+end_src

=while= 还有一种变形 =do while= ，它的语法为
=do {代码块} while(条件);=
与 =while= 的差别就是它一定会执行一次代码块
*** for
语法为： =for (初始化;条件;副作用){代码块}=
=for= 可以转换成 =while= 的形式
=初始化;while(条件){代码块;副作用;}=
初始化部分会在代码块之前执行，并且只执行一次
每次条件为真时会执行代码块
而副作用部分会在每次代码块结束后执行

=for= 可以理解成 =while= 的严格模式，它让你把一些容易忘记写的部分先写好，尽量避免出错的可能性，比如写 =while= 语句时有人可能就忘记在末尾加上递增语句了。

#+begin_src c
#include <stdio.h>

int main() {
  int a = 10, sum = 0;
  for (a = 10; a > 0; a--) {
    sum += a;
  }
  printf("%d\n", sum);
  return 0;
}
#+end_src

** 数组
** 指针
** 结构体
** 函数
** 递归
** 其它
* C++
